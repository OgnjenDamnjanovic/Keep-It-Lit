/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t={442:(t,e)=>{var n=function(){function t(e){if(!e)throw new TypeError("Invalid argument; `value` has no value.");this.value=t.EMPTY,e&&t.isGuid(e)&&(this.value=e)}return t.isGuid=function(e){var n=e.toString();return e&&(e instanceof t||t.validator.test(n))},t.create=function(){return new t([t.gen(2),t.gen(1),t.gen(1),t.gen(1),t.gen(3)].join("-"))},t.createEmpty=function(){return new t("emptyguid")},t.parse=function(e){return new t(e)},t.raw=function(){return[t.gen(2),t.gen(1),t.gen(1),t.gen(1),t.gen(3)].join("-")},t.gen=function(t){for(var e="",n=0;n<t;n++)e+=(65536*(1+Math.random())|0).toString(16).substring(1);return e},t.prototype.equals=function(e){return t.isGuid(e)&&this.value===e.toString()},t.prototype.isEmpty=function(){return this.value===t.EMPTY},t.prototype.toString=function(){return this.value},t.prototype.toJSON=function(){return{value:this.value}},t.validator=new RegExp("^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$","i"),t.EMPTY="00000000-0000-0000-0000-000000000000",t}();e.i=n}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}(()=>{var t;function e(t,e,n,r){var i=document.createElement(t);return i.className=n,i.innerHTML=r,e.appendChild(i),i}function r(t,n,r,i){var o=e("button",t,n,r);return o.onclick=i,o}function i(t,n,r,i,o){var u=e("input",n,r,"");return u.required=i,u.type=t,u.placeholder=o,u}function o(t,n,r,i,o){var u=e("img",t,n,"");return u.src=r,u.width=i,u.height=o,u}function u(t){return Object.getOwnPropertyNames(t)}function s(t,e){return u(t).sort().join()==u(e).sort().join()}function a(t){return(t.flameBaseLevel+t.totalFlameIncrement)*t.totalFlameMultiplier}!function(t){t[t.Home=0]="Home",t[t.Game=1]="Game",t[t.Login=2]="Login",t[t.Register=3]="Register"}(t||(t={}));var c=function(){return(c=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function f(t){return c(c({},t),{inventory:{flammableItems:c({},t.inventory.flammableItems),firewoodItems:c({},t.inventory.firewoodItems),firestarterItems:c({},t.inventory.firestarterItems)}})}function l(t,e){var n=y(t,f(t));return n.balance-=e.price,u(n.inventory.flammableItems).includes(e.name)||(n.inventory.flammableItems[e.name]={item:e,quantity:0}),n.inventory.flammableItems[e.name].quantity++,n}function h(t,e){var n=w(t,f(t));return u(n.inventory.firestarterItems).forEach((function(e){n.inventory.firestarterItems[e]=c({},t.inventory.firestarterItems[e])})),n.balance-=e.price,u(n.inventory.firestarterItems).includes(e.name)||(n.inventory.firestarterItems[e.name]={item:e,quantity:0}),n.inventory.firestarterItems[e.name].quantity++,n}function d(t,e){var n=b(t,f(t));return u(n.inventory.firewoodItems).forEach((function(e){n.inventory.firewoodItems[e]=c({},t.inventory.firewoodItems[e])})),n.balance-=e.price,u(n.inventory.firewoodItems).includes(e.name)||(n.inventory.firewoodItems[e.name]={item:e,quantity:0}),n.inventory.firewoodItems[e.name].quantity++,n}function p(t,e,n){if(!t.inventory.flammableItems[e.name])return t;var r=y(t,f(t));return r.inventory.flammableItems[e.name].quantity--,0===r.inventory.flammableItems[e.name].quantity&&delete r.inventory.flammableItems[e.name],0!=a(r.gameInfo)&&(r.gameInfo.totalFlameMultiplier*=e.flameMultiplier),r}function m(t,e,n){if(!t.inventory.firestarterItems[e.name])return t;var r=w(t,f(t));return r.inventory.firestarterItems[e.name].quantity--,0===r.inventory.firestarterItems[e.name].quantity&&delete r.inventory.firestarterItems[e.name],r.gameInfo.totalFlameIncrement+=e.flameIncrement,e.firewoodContribution>0&&(u(r.gameInfo.firewood).includes(e.name)||(r.gameInfo.firewood[e.name]={combustionFactor:e.combustionFactor,totalFirewoodContribution:0}),r.gameInfo.firewood[e.name].totalFirewoodContribution+=e.firewoodContribution),r}function v(t,e){if(!t.inventory.firewoodItems[e.name])return t;var n=b(t,f(t));return n.inventory.firewoodItems[e.name].quantity--,0===n.inventory.firewoodItems[e.name].quantity&&delete n.inventory.firewoodItems[e.name],u(n.gameInfo.firewood).includes(e.name)||(n.gameInfo.firewood[e.name]={combustionFactor:e.combustionFactor,totalFirewoodContribution:0}),n.gameInfo.firewood[e.name].totalFirewoodContribution+=e.firewoodContribution,n}function b(t,e){return u(e.inventory.firewoodItems).forEach((function(n){e.inventory.firewoodItems[n]=c({},t.inventory.firewoodItems[n])})),e}function y(t,e){return u(e.inventory.flammableItems).forEach((function(n){e.inventory.flammableItems[n]=c({},t.inventory.flammableItems[n])})),e}function w(t,e){return u(e.inventory.firestarterItems).forEach((function(n){e.inventory.firestarterItems[n]=c({},t.inventory.firestarterItems[n])})),e}var g=function(t,e){return(g=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)};function I(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}g(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function _(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function S(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function E(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return u}function x(t,e){for(var n=0,r=e.length,i=t.length;n<r;n++,i++)t[i]=e[n];return t}function C(t){return this instanceof C?(this.v=t,this):new C(t)}function T(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||s(t,e)}))})}function s(t,e){try{(n=i[t](e)).value instanceof C?Promise.resolve(n.value.v).then(a,c):f(o[0][2],n)}catch(t){f(o[0][3],t)}var n}function a(t){s("next",t)}function c(t){s("throw",t)}function f(t,e){t(e),o.shift(),o.length&&s(o[0][0],o[0][1])}}function j(t){return"function"==typeof t}function L(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}Object.create,Object.create;var O=L((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function P(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var k=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._teardowns=null}return t.prototype.unsubscribe=function(){var t,e,n,r,i;if(!this.closed){this.closed=!0;var o=this._parentage;if(o)if(this._parentage=null,Array.isArray(o))try{for(var u=S(o),s=u.next();!s.done;s=u.next())s.value.remove(this)}catch(e){t={error:e}}finally{try{s&&!s.done&&(e=u.return)&&e.call(u)}finally{if(t)throw t.error}}else o.remove(this);var a=this.initialTeardown;if(j(a))try{a()}catch(t){i=t instanceof O?t.errors:[t]}var c=this._teardowns;if(c){this._teardowns=null;try{for(var f=S(c),l=f.next();!l.done;l=f.next()){var h=l.value;try{F(h)}catch(t){i=null!=i?i:[],t instanceof O?i=x(x([],E(i)),E(t.errors)):i.push(t)}}}catch(t){n={error:t}}finally{try{l&&!l.done&&(r=f.return)&&r.call(f)}finally{if(n)throw n.error}}}if(i)throw new O(i)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)F(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._teardowns=null!==(n=this._teardowns)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&P(e,t)},t.prototype.remove=function(e){var n=this._teardowns;n&&P(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t;var e}(),q=k.EMPTY;function A(t){return t instanceof k||t&&"closed"in t&&j(t.remove)&&j(t.add)&&j(t.unsubscribe)}function F(t){j(t)?t():t.unsubscribe()}var M=null,N=null,H=void 0,R=!1,B=!1,Y={setTimeout:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Y.delegate;return((null==n?void 0:n.setTimeout)||setTimeout).apply(void 0,x([],E(t)))},clearTimeout:function(t){var e=Y.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function z(t){Y.setTimeout((function(){if(!M)throw t;M(t)}))}function D(){}var G=U("C",void 0,void 0);function U(t,e,n){return{kind:t,value:e,error:n}}var V=function(t){function e(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,A(e)&&e.add(n)):n.destination=Z,n}return I(e,t),e.create=function(t,e,n){return new J(t,e,n)},e.prototype.next=function(t){this.isStopped?W(function(t){return U("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?W(U("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?W(G,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(k),J=function(t){function e(e,n,r){var i,o=t.call(this)||this;if(j(e))i=e;else if(e){var u;i=e.next,n=e.error,r=e.complete,o&&B?(u=Object.create(e)).unsubscribe=function(){return o.unsubscribe()}:u=e,i=null==i?void 0:i.bind(u),n=null==n?void 0:n.bind(u),r=null==r?void 0:r.bind(u)}return o.destination={next:i?K(i,o):D,error:K(null!=n?n:Q,o),complete:r?K(r,o):D},o}return I(e,t),e}(V);function K(t,e){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];try{t.apply(void 0,x([],E(n)))}catch(t){if(R){if(!e._syncErrorHack_isSubscribing)throw t;e.__syncError=t}else z(t)}}}function Q(t){throw t}function W(t,e){var n=N;n&&Y.setTimeout((function(){return n(t,e)}))}var Z={closed:!0,next:D,error:Q,complete:D},$="function"==typeof Symbol&&Symbol.observable||"@@observable";function X(t){return t}function tt(t){return 0===t.length?X:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var et=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,i=(r=t)&&r instanceof V||function(t){return t&&j(t.next)&&j(t.error)&&j(t.complete)}(r)&&A(r)?t:new J(t,e,n);if(R)this._deprecatedSyncErrorSubscribe(i);else{var o=this.operator,u=this.source;i.add(o?o.call(i,u):u?this._subscribe(i):this._trySubscribe(i))}return i},t.prototype._deprecatedSyncErrorSubscribe=function(t){var e=t;e._syncErrorHack_isSubscribing=!0;var n=this.operator;if(n)t.add(n.call(t,this.source));else try{t.add(this._subscribe(t))}catch(t){e.__syncError=t}for(var r=e;r;){if("__syncError"in r)try{throw r.__syncError}finally{t.unsubscribe()}r=r.destination}e._syncErrorHack_isSubscribing=!1},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=nt(e))((function(e,r){var i;i=n.subscribe((function(e){try{t(e)}catch(t){r(t),null==i||i.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[$]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t.length?tt(t)(this):this},t.prototype.toPromise=function(t){var e=this;return new(t=nt(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function nt(t){var e;return null!==(e=null!=t?t:H)&&void 0!==e?e:Promise}var rt=L((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),it=function(t){function e(){var e=t.call(this)||this;return e.closed=!1,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return I(e,t),e.prototype.lift=function(t){var e=new ot(this,this);return e.operator=t,e},e.prototype._throwIfClosed=function(){if(this.closed)throw new rt},e.prototype.next=function(t){var e,n;if(this._throwIfClosed(),!this.isStopped){var r=this.observers.slice();try{for(var i=S(r),o=i.next();!o.done;o=i.next())o.value.next(t)}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}}},e.prototype.error=function(t){if(this._throwIfClosed(),!this.isStopped){this.hasError=this.isStopped=!0,this.thrownError=t;for(var e=this.observers;e.length;)e.shift().error(t)}},e.prototype.complete=function(){if(this._throwIfClosed(),!this.isStopped){this.isStopped=!0;for(var t=this.observers;t.length;)t.shift().complete()}},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var e=this,n=e.hasError,r=e.isStopped,i=e.observers;return n||r?q:(i.push(t),new k((function(){return P(i,t)})))},e.prototype._checkFinalizedStatuses=function(t){var e=this,n=e.hasError,r=e.thrownError,i=e.isStopped;n?t.error(r):i&&t.complete()},e.prototype.asObservable=function(){var t=new et;return t.source=this,t},e.create=function(t,e){return new ot(t,e)},e}(et),ot=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return I(e,t),e.prototype.next=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===n||n.call(e,t)},e.prototype.error=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===n||n.call(e,t)},e.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},e.prototype._subscribe=function(t){var e,n;return null!==(n=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==n?n:q},e}(it),ut=function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return I(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){var t=this,e=t.hasError,n=t.thrownError,r=t._value;if(e)throw n;return this._throwIfClosed(),r},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(it);function st(t){return function(e){if(function(t){return j(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}var at=function(t){function e(e,n,r,i,o){var u=t.call(this,e)||this;return u.onFinalize=o,u._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,u._error=i?function(t){try{i(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return I(e,t),e.prototype.unsubscribe=function(){var e,n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))},e}(V);function ct(t,e){return st((function(n,r){var i=0;n.subscribe(new at(r,(function(n){r.next(t.call(e,n,i++))})))}))}var ft=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function lt(t){return j(null==t?void 0:t.then)}function ht(t,e){return new et((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}var dt="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function pt(t,e){if(!t)throw new Error("Iterable cannot be null");return new et((function(n){var r=new k;return r.add(e.schedule((function(){var i=t[Symbol.asyncIterator]();r.add(e.schedule((function(){var t=this;i.next().then((function(e){e.done?n.complete():(n.next(e.value),t.schedule())}))})))}))),r}))}function mt(t){return j(t[$])}function vt(t){return j(null==t?void 0:t[dt])}function bt(t){return Symbol.asyncIterator&&j(null==t?void 0:t[Symbol.asyncIterator])}function yt(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function wt(t){return T(this,arguments,(function(){var e,n,r;return _(this,(function(i){switch(i.label){case 0:e=t.getReader(),i.label=1;case 1:i.trys.push([1,,9,10]),i.label=2;case 2:return[4,C(e.read())];case 3:return n=i.sent(),r=n.value,n.done?[4,C(void 0)]:[3,5];case 4:return[2,i.sent()];case 5:return[4,C(r)];case 6:return[4,i.sent()];case 7:return i.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function gt(t){return j(null==t?void 0:t.getReader)}function It(t,e){return e?function(t,e){if(null!=t){if(mt(t))return function(t,e){return new et((function(n){var r=new k;return r.add(e.schedule((function(){var i=t[$]();r.add(i.subscribe({next:function(t){r.add(e.schedule((function(){return n.next(t)})))},error:function(t){r.add(e.schedule((function(){return n.error(t)})))},complete:function(){r.add(e.schedule((function(){return n.complete()})))}}))}))),r}))}(t,e);if(ft(t))return ht(t,e);if(lt(t))return function(t,e){return new et((function(n){return e.schedule((function(){return t.then((function(t){n.add(e.schedule((function(){n.next(t),n.add(e.schedule((function(){return n.complete()})))})))}),(function(t){n.add(e.schedule((function(){return n.error(t)})))}))}))}))}(t,e);if(bt(t))return pt(t,e);if(vt(t))return function(t,e){return new et((function(n){var r;return n.add(e.schedule((function(){r=t[dt](),function(t,e,n,r){void 0===r&&(r=0);var i=e.schedule((function(){try{n.call(this)}catch(e){t.error(e)}}),r);t.add(i)}(n,e,(function(){var t=r.next(),e=t.value;t.done?n.complete():(n.next(e),this.schedule())}))}))),function(){return j(null==r?void 0:r.return)&&r.return()}}))}(t,e);if(gt(t))return function(t,e){return pt(wt(t),e)}(t,e)}throw yt(t)}(t,e):_t(t)}function _t(t){if(t instanceof et)return t;if(null!=t){if(mt(t))return r=t,new et((function(t){var e=r[$]();if(j(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(ft(t))return St(t);if(lt(t))return n=t,new et((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,z)}));if(bt(t))return Et(t);if(vt(t))return e=t,new et((function(t){var n,r;try{for(var i=S(e),o=i.next();!o.done;o=i.next()){var u=o.value;if(t.next(u),t.closed)return}}catch(t){n={error:t}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}t.complete()}));if(gt(t))return Et(wt(t))}var e,n,r;throw yt(t)}function St(t){return new et((function(e){for(var n=0;n<t.length&&!e.closed;n++)e.next(t[n]);e.complete()}))}function Et(t){return new et((function(e){(function(t,e){var n,r,i,o,u,s,a,c;return u=this,s=void 0,c=function(){var u,s;return _(this,(function(a){switch(a.label){case 0:a.trys.push([0,5,6,11]),n=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=S(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,i,(e=t[n](e)).done,e.value)}))}}}(t),a.label=1;case 1:return[4,n.next()];case 2:if((r=a.sent()).done)return[3,4];if(u=r.value,e.next(u),e.closed)return[2];a.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=a.sent(),i={error:s},[3,11];case 6:return a.trys.push([6,,9,10]),r&&!r.done&&(o=n.return)?[4,o.call(n)]:[3,8];case 7:a.sent(),a.label=8;case 8:return[3,10];case 9:if(i)throw i.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((a=void 0)||(a=Promise))((function(t,e){function n(t){try{i(c.next(t))}catch(t){e(t)}}function r(t){try{i(c.throw(t))}catch(t){e(t)}}function i(e){var i;e.done?t(e.value):(i=e.value,i instanceof a?i:new a((function(t){t(i)}))).then(n,r)}i((c=c.apply(u,s||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function xt(t,e,n){return void 0===n&&(n=1/0),j(e)?xt((function(n,r){return ct((function(t,i){return e(n,t,r,i)}))(_t(t(n,r)))}),n):("number"==typeof e&&(n=e),st((function(e,r){return function(t,e,n,r,i,o,u,s){var a=[],c=0,f=0,l=!1,h=function(){!l||a.length||c||e.complete()},d=function(t){return c<r?p(t):a.push(t)},p=function(t){c++;var i=!1;_t(n(t,f++)).subscribe(new at(e,(function(t){e.next(t)}),(function(){i=!0}),void 0,(function(){if(i)try{c--;for(;a.length&&c<r;)t=void 0,t=a.shift(),p(t);h()}catch(t){e.error(t)}var t})))};return t.subscribe(new at(e,d,(function(){l=!0,h()}))),function(){}}(e,r,t,n)})))}var Ct=Array.isArray;function Tt(t,e){return e?ht(t,e):St(t)}var jt=["addListener","removeListener"],Lt=["addEventListener","removeEventListener"],Ot=["on","off"];function Pt(t,e,n,r){if(j(n)&&(r=n,n=void 0),r)return Pt(t,e,n).pipe((i=r,ct((function(t){return function(t,e){return Ct(e)?t.apply(void 0,x([],E(e))):t(e)}(i,t)}))));var i,o=E(function(t){return j(t.addEventListener)&&j(t.removeEventListener)}(t)?Lt.map((function(r){return function(i){return t[r](e,i,n)}})):function(t){return j(t.addListener)&&j(t.removeListener)}(t)?jt.map(kt(t,e)):function(t){return j(t.on)&&j(t.off)}(t)?Ot.map(kt(t,e)):[],2),u=o[0],s=o[1];if(!u&&ft(t))return xt((function(t){return Pt(t,e,n)}))(Tt(t));if(!u)throw new TypeError("Invalid event target");return new et((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return u(e),function(){return s(e)}}))}function kt(t,e){return function(n){return function(r){return t[n](e,r)}}}var qt=Array.isArray;function At(t){return 1===t.length&&qt(t[0])?t[0]:t}var Ft=new et((function(t){return t.complete()}));function Mt(t){return t[t.length-1]}function Nt(t){return j(Mt(t))?t.pop():void 0}function Ht(t){return(e=Mt(t))&&j(e.schedule)?t.pop():void 0;var e}function Rt(t,e){return"number"==typeof Mt(t)?t.pop():e}function Bt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Nt(t),r=At(t);return r.length?new et((function(t){var e=r.map((function(){return[]})),i=r.map((function(){return!1}));t.add((function(){e=i=null}));for(var o=function(o){_t(r[o]).subscribe(new at(t,(function(r){if(e[o].push(r),e.every((function(t){return t.length}))){var u=e.map((function(t){return t.shift()}));t.next(n?n.apply(void 0,x([],E(u))):u),e.some((function(t,e){return!t.length&&i[e]}))&&t.complete()}}),(function(){i[o]=!0,!e[o].length&&t.complete()})))},u=0;!t.closed&&u<r.length;u++)o(u);return function(){e=i=null}})):Ft}function Yt(t,e){return t===e}function zt(t,e){return void 0===r&&(r=X),n=null!=(n=function(n,r){return e?e(n[t],r[t]):n[t]===r[t]})?n:Yt,st((function(t,e){var i,o=!0;t.subscribe(new at(e,(function(t){var u=r(t);!o&&n(i,u)||(o=!1,i=u,e.next(t))})))}));var n,r}function Dt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Nt(t);return st((function(e,r){for(var i=t.length,o=new Array(i),u=t.map((function(){return!1})),s=!1,a=function(e){_t(t[e]).subscribe(new at(r,(function(t){o[e]=t,s||u[e]||(u[e]=!0,(s=u.every(X))&&(u=null))}),D))},c=0;c<i;c++)a(c);e.subscribe(new at(r,(function(t){if(s){var e=x([t],E(o));r.next(n?n.apply(void 0,x([],E(e))):e)}})))}))}function Gt(t,e){return st((function(n,r){var i=0;n.subscribe(new at(r,(function(n){return t.call(e,n,i++)&&r.next(n)})))}))}function Ut(t){return t<=0?function(){return Ft}:st((function(e,n){var r=0;e.subscribe(new at(n,(function(e){++r<=t&&(n.next(e),t<=r&&n.complete())})))}))}function Vt(t){void 0===t&&(t={});var e=t.connector,n=void 0===e?function(){return new it}:e,r=t.resetOnError,i=void 0===r||r,o=t.resetOnComplete,u=void 0===o||o,s=t.resetOnRefCountZero,a=void 0===s||s;return function(t){var e=null,r=null,o=null,s=0,c=!1,f=!1,l=function(){null==r||r.unsubscribe(),r=null},h=function(){l(),e=o=null,c=f=!1},d=function(){var t=e;h(),null==t||t.unsubscribe()};return st((function(t,p){s++,f||c||l();var m=o=null!=o?o:n();p.add((function(){0!=--s||f||c||(r=Jt(d,a))})),m.subscribe(p),e||(e=new J({next:function(t){return m.next(t)},error:function(t){f=!0,l(),r=Jt(h,i,t),m.error(t)},complete:function(){c=!0,l(),r=Jt(h,u),m.complete()}}),It(t).subscribe(e))}))(t)}}function Jt(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];return!0===e?(t(),null):!1===e?null:e.apply(void 0,x([],E(n))).pipe(Ut(1)).subscribe((function(){return t()}))}function Kt(t,e){return st((function(n,r){var i=null,o=0,u=!1,s=function(){return u&&!i&&r.complete()};n.subscribe(new at(r,(function(n){null==i||i.unsubscribe();var u=0,a=o++;_t(t(n,a)).subscribe(i=new at(r,(function(t){return r.next(e?e(n,t,a,u++):t)}),(function(){i=null,s()})))}),(function(){u=!0,s()})))}))}var Qt,Wt="src/assets/Images/",Zt=Wt+"game/",$t="http://localhost:3000/",Xt=$t+"users/",te=$t+"rest/store/firewoodItems/",ee=$t+"rest/store/flammableItems/",ne=$t+"rest/store/firestarterItems/";function re(t,e){return j(e)?xt(t,e,1):xt(t,1)}function ie(t,e,n,r,i){return function(o,u){var s=n,a=e,c=0;o.subscribe(new at(u,(function(e){var n=c++;a=s?t(a,e,n):(s=!0,e),r&&u.next(a)}),i&&function(){s&&u.next(a),u.complete()}))}}!function(t){t[t.userNotFound=0]="userNotFound"}(Qt||(Qt={}));var oe=function(t,e){return t.push(e),t};function ue(){return st((function(t,e){(function(t,e){return st(ie(t,e,arguments.length>=2,!1,!0))})(oe,[])(t).subscribe(e)}))}function se(t,e){if(!s(t.firestarterItems,e.firestarterItems)||!s(t.firewoodItems,e.firewoodItems)||!s(t.flammableItems,e.flammableItems))return!1;for(var n in t.firestarterItems)if(!ae(t.firestarterItems[n],e.firestarterItems[n]))return!1;for(var n in t.flammableItems)if(!ae(t.flammableItems[n],e.flammableItems[n]))return!1;for(var n in t.firewoodItems)if(!ae(t.firewoodItems[n],e.firewoodItems[n]))return!1;return console.log("::true"),!0}function ae(t,e){return t.quantity===e.quantity&&t.item===e.item}var ce=n(442);function fe(t,e){return{id:ce.i.create().toString(),username:t,password:e,gameInfo:{emberAmount:0,flameBaseLevel:0,fireboosters:[],totalFlameMultiplier:1,totalFlameIncrement:0,firewood:{}},balance:1e3,inventory:{firewoodItems:[],flammableItems:[],firestarterItems:[]}}}function le(t){return{id:t.id,balance:t.balance,password:t.password,username:t.username,gameInfo:t.gameInfo,inventory:(e=t.inventory,{firestarterItems:u(e.firestarterItems).map((function(t){return{item:e.firestarterItems[t].item.id,quantity:e.firestarterItems[t].quantity}})),firewoodItems:u(e.firewoodItems).map((function(t){return{item:e.firewoodItems[t].item.id,quantity:e.firewoodItems[t].quantity}})),flammableItems:u(e.flammableItems).map((function(t){return{item:e.flammableItems[t].item.id,quantity:e.flammableItems[t].quantity}}))})};var e}function he(t,e){var n=function(t,e){return It(fetch(Xt+"?username="+t+"&password="+e).then((function(t){return t.json()})).then((function(t){return t[0]})))}(t,e).pipe(ct((function(t){if(!t)throw new Error(Qt.userNotFound.toString());return t})),Vt());return Bt(n.pipe(Kt((function(t){return Bt(It((e=t.inventory).firewoodItems).pipe(re((function(t){return e=t.item,It(fetch(te+""+e).then((function(t){return t.json()})));var e})),Gt((function(t){return Object.keys(t).length>0})),ct((function(t,n){return{item:t,quantity:e.firewoodItems[n].quantity}}))).pipe(ue()),It(e.flammableItems).pipe(re((function(t){return e=t.item,It(fetch(ee+""+e).then((function(t){return t.json()})));var e})),Gt((function(t){return Object.keys(t).length>0})),ct((function(t,n){return{item:t,quantity:e.flammableItems[n].quantity}}))).pipe(ue()),It(e.firestarterItems).pipe(re((function(t){return e=t.item,It(fetch(ne+""+e).then((function(t){return t.json()})));var e})),Gt((function(t){return Object.keys(t).length>0})),ct((function(t,n){return{item:t,quantity:e.firestarterItems[n].quantity}}))).pipe(ue())).pipe(ct((function(t){return e=t[1],n=t[0],r=t[2],i={firestarterItems:{},firewoodItems:{},flammableItems:{}},e.map((function(t){return i.flammableItems[t.item.name]=t})),n.map((function(t){return i.firewoodItems[t.item.name]=t})),r.map((function(t){return i.firestarterItems[t.item.name]=t})),i;var e,n,r,i})));var e}))),n).pipe(ct((function(t){return e=t[1],n=t[0],{id:e.id,username:e.username,password:e.password,gameInfo:e.gameInfo,inventory:n,balance:e.balance};var e,n})))}function de(t){return It(fetch("http://localhost:3000/users/"+t.id,{method:"PUT",body:JSON.stringify(le(t)),headers:{"Content-Type":"application/json"}}).then((function(t){if(!t.ok)throw Error(Qt.userNotFound.toString());return t})))}var pe=function(){function t(t,n){var r=this;this._container=e("div",t,"storeContainer",""),this.userSubject=n,this.userSubject.pipe(zt("balance")).subscribe((function(t){r.disableExpensiveItems(t.balance),r.renderBalance(t.balance)}))}return t.prototype.renderContent=function(){var t=this,n="<i class='fas fa-caret-left'></i><div>S<br/>T<br/>O<br/>R<br/>E</div>";e("div",this._container,"storeSpacer","");var i=r(this._container,"storeShowBtn",n,(function(){"none"===window.getComputedStyle(o).display?(i.innerHTML="<i class='fas fa-caret-right'></i><div>S<br/>T<br/>O<br/>R<br/>E</div>",o.style.display="flex",u.classList.add("balanceLabelOffset"),i.classList.add("storeShowBtnOffset")):(i.innerHTML=n,o.style.display="none",u.classList.remove("balanceLabelOffset"),i.classList.remove("storeShowBtnOffset"))})),o=e("div",this._container,"storeItemsCont",""),u=e("label",this._container,"balanceLabel","");Bt(It(fetch(ee).then((function(t){return t.json()})).then((function(t){return t}))),It(fetch(te).then((function(t){return t.json()})).then((function(t){return t}))),It(fetch(ne).then((function(t){return t.json()})).then((function(t){return t})))).pipe(ct((function(t){return{flammableItems:t[0],firewoodItems:t[1],firestarterItems:t[2]}}))).pipe(Dt(this.userSubject.pipe(ct((function(t){return t.balance}))))).subscribe((function(e){e[0].firewoodItems.map((function(e){return t.renderStoreItem(e,d,o)})),e[0].flammableItems.map((function(e){return t.renderStoreItem(e,l,o)})),e[0].firestarterItems.map((function(e){return t.renderStoreItem(e,h,o)})),t.disableExpensiveItems(e[1]),t.renderBalance(e[1])}))},t.prototype.disableExpensiveItems=function(t){this._container.querySelectorAll(".storeItemPrice").forEach((function(e){e.parentElement.classList.remove("disabledDiv"),parseInt(e.getAttribute("price"))>t&&e.parentElement.classList.add("disabledDiv")}))},t.prototype.renderBalance=function(t){var e=document.querySelector(".balanceLabel");e&&(e.innerHTML=t.toString()+"   <i class='fa fa-coins'></i>")},t.prototype.renderStoreItem=function(t,n,r){var i=e("div",r,"storeItemContainer","");o(i,"storeitemImage",Zt+t.imageSrc,95,80),e("div",i,"storeItemPrice","<label>"+t.price+"</label> <i class='fa fa-coins'></i>").setAttribute("price",t.price.toString());var u=Pt(i,"click").pipe(Dt(this.userSubject),Gt((function(e){return t.price<=e[1].balance})),ct((function(e){return n(e[1],t)})),Vt());Bt(u.pipe(Kt((function(t){return de(t)}))),u).pipe(ct((function(t){return t[1]}))).subscribe(this.userSubject)},t}(),me=function(){function t(t,n){this._container=e("div",t,"inventoryContainer",""),this.userSubject=n}return t.prototype.renderContent=function(){var t=this;this.userSubject.pipe(zt("inventory",se)).subscribe((function(e){return t.renderInventory(e.inventory)}))},t.prototype.renderInventory=function(t){var n=this;this._container.innerHTML="",0!==u(t.firewoodItems).length&&e("h2",this._container,"","Firewoods:"),u(t.firewoodItems).map((function(e){return n.renderInventoryItem(t.firewoodItems[e],v)})),0!==u(t.flammableItems).length&&e("h2",this._container,"","Flammables:"),u(t.flammableItems).map((function(e){return n.renderInventoryItem(t.flammableItems[e],p)})),0!==u(t.firestarterItems).length&&e("h2",this._container,"","Firestarters:"),u(t.firestarterItems).map((function(e){return n.renderInventoryItem(t.firestarterItems[e],m)}))},t.prototype.renderInventoryItem=function(t,n){var r=this,i=e("span",this._container,"invItemContainer",""),u=o(i,"invItemImg",Zt+t.item.imageSrc,100,90);e("label",i,"ivnItemQuantity","x"+t.quantity);var s=Pt(u,"click").pipe(Dt(this.userSubject),ct((function(e){return n(e[1],t.item,r.userSubject)})),Vt());Bt(s,s.pipe(Kt((function(t){return de(t)})))).pipe(ct((function(t){return t[0]}))).subscribe(this.userSubject)},t}(),ve=function(){function t(t,n){this._container=e("div",t,"fireplaceContainer",""),this.userSubject=n}return t.prototype.renderContent=function(){this.userSubject.pipe(ct((function(t){return t.gameInfo}))).subscribe((function(t){var e="TotalfireLevel: "+a(t)+"\nmultiplier: "+t.totalFlameMultiplier+"\nincrement: "+t.totalFlameIncrement+"\n";e+="\n",u(t.firewood).forEach((function(n){e+=n+"{combustion factor: "+t.firewood[n].combustionFactor+" firewoodContribution: "+t.firewood[n].totalFirewoodContribution+"}\n"})),e+="\n",t.fireboosters.forEach((function(t){e+="increment: "+t.flameIncrement+" multiplier: "+t.flameMultiplier+" timeleft: "+t.timeLeft+"\n"})),console.log(e+"\n\n")}))},t}(),be=function(){function t(t,n){this._container=e("div",t,"gameContainer",""),this.userSubject=new ut(n)}return t.prototype.renderContent=function(){o(this._container,"fullMark",Wt+"fullMark.jpg",1400,900),new me(this._container,this.userSubject).renderContent(),new pe(this._container,this.userSubject).renderContent(),new ve(this._container,this.userSubject).renderContent()},t.prototype.dispose=function(){},t.anyToPageParameter=function(t){if("id"in(e=t)&&"username"in e&&"password"in e&&"gameInfo"in e&&"inventory"in e&&"balance"in e)return t;var e;throw new Error("Invalid GamePage parameter")},t}(),ye=function(){function n(t){this.mainContainer=t}return n.prototype.renderContent=function(){this._container=e("div",this.mainContainer,"homeContainer",""),e("h1",this._container,"gameTitle","Keep it Lit"),o(this._container,"homeImage",Wt+"thumbMark.jpg",650,420),e("h3",this._container,"gameDescription","This is Mark. He is a web developer.<br> Keep him warm so he may continue creating web apps and eventualy open his own startup.<br> If you do this, he will keep giving you money for fire mantainance material, and the rest is yours to spend :)"),r(this._container,"playButton","PLAY",(function(){je.Navigator.goTo(t.Login)}))},n}(),we=function(){function n(t){this._container=e("form",t,"loginForm","")}return n.prototype.renderContent=function(){e("h2",this._container,"loginHeadline","ENTER YOUR CREDENTIALS:");var n=i("text",this._container,"loginInput",!0,"Username"),o=i("password",this._container,"loginInput",!0,"Password");r(this._container,"loginSubmitBtn","Login",null),this._container.onsubmit=function(){return he(n.value,o.value).subscribe({next:function(e){return je.Navigator.goTo(t.Game,e)},error:function(t){t.message===Qt.userNotFound.toString()&&alert("Wrong credentials")}}),!1},e("a",this._container,"dontHaveAcc","I don't have an acount").onclick=function(){return je.Navigator.goTo(t.Register)}},n}();function ge(t){return void 0===t&&(t=1/0),xt(X,t)}var Ie=function(t){function e(e,n){return t.call(this)||this}return I(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(k),_e={setInterval:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=_e.delegate;return((null==n?void 0:n.setInterval)||setInterval).apply(void 0,x([],E(t)))},clearInterval:function(t){var e=_e.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},Se=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return I(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),_e.setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;_e.clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=!!t&&t||new Error(t)}if(r)return this.unsubscribe(),n},e.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,P(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(Ie),Ee={now:function(){return(Ee.delegate||Date).now()},delegate:void 0},xe=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=Ee.now,t}(),Ce=new(function(t){function e(e,n){void 0===n&&(n=xe.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return I(e,t),e.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(xe))(Se),Te=function(){function n(t){this._container=e("form",t,"registerForm","")}return n.prototype.renderContent=function(){var n=this;e("div",this._container,"","<i class='fas fa-arrow-alt-circle-left backArrow'></i>").onclick=function(){return je.Navigator.goTo(t.Login)},e("h2",this._container,"registerHeadline","ENTER YOUR CREDENTIALS:");var o,u=i("text",this._container,"registerInput",!0,"Username"),s=e("label",this._container,"registerError errorHidden","Username already taken!");Pt(u,"input").pipe((800,void 0===o&&(o=Ce),st((function(t,e){var n=null,r=null,i=null,u=function(){if(n){n.unsubscribe(),n=null;var t=r;r=null,e.next(t)}};function s(){var t=i+800,e=o.now();e<t?n=this.schedule(void 0,t-e):u()}t.subscribe(new at(e,(function(t){r=t,i=o.now(),n||(n=o.schedule(s,800))}),(function(){u(),e.complete()}),void 0,(function(){r=n=null})))}))),ct((function(t){return t.target.value})),Kt((function(t){return function(t){return It(fetch(Xt+"?username="+t).then((function(t){return t.json()}))).pipe(ct((function(t){return null!=t[0]})))}(t)}))).subscribe((function(t){return t?n.showErrorMessage(s):n.hideErrorMessage(s)}));var a=i("password",this._container,"registerInput",!0,"Password"),c=i("password",this._container,"registerInput",!0,"Password"),f=e("label",this._container,"passwordError errorHidden","Passwords don't match");(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Ht(t),r=Rt(t,1/0),i=t;return i.length?1===i.length?_t(i[0]):ge(r)(Tt(i,n)):Ft})(Pt(c,"input"),Pt(a,"input")).subscribe((function(){c.value===a.value?n.hideErrorMessage(f):n.showErrorMessage(f)})),r(this._container,"registerSubmitBtn","Register",null),this._container.onsubmit=function(){var e,n;return s.classList.contains("errorVisible")||f.classList.contains("errorVisible")||(e=u.value,n=a.value,It(fetch("http://localhost:3000/users",{method:"POST",body:JSON.stringify(fe(e,n)),headers:{"Content-Type":"application/json"}}))).subscribe((function(e){e.ok&&je.Navigator.goTo(t.Login)})),!1}},n.prototype.showErrorMessage=function(t){t.classList.replace("errorHidden","errorVisible")},n.prototype.hideErrorMessage=function(t){t.classList.replace("errorVisible","errorHidden")},n}(),je=function(){function e(){this._mainContainer=document.getElementById("main")}return Object.defineProperty(e,"Navigator",{get:function(){var t;return null!==(t=this._navigator)&&void 0!==t?t:this._navigator=new e},enumerable:!1,configurable:!0}),e.prototype.goTo=function(e,n){switch(void 0===n&&(n=null),this.clearMainContainer(),this.disposeSubscriptions(),e){case t.Home:new ye(this._mainContainer).renderContent();break;case t.Game:var r=new be(this._mainContainer,be.anyToPageParameter(n));this.pageToDispose=r,r.renderContent();break;case t.Login:new we(this._mainContainer).renderContent();break;case t.Register:new Te(this._mainContainer).renderContent()}},e.prototype.clearMainContainer=function(){this._mainContainer.innerHTML=""},e.prototype.disposeSubscriptions=function(){this.pageToDispose&&this.pageToDispose.dispose()},e}();je.Navigator.goTo(t.Home)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,