/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t={442:(t,e)=>{var n=function(){function t(e){if(!e)throw new TypeError("Invalid argument; `value` has no value.");this.value=t.EMPTY,e&&t.isGuid(e)&&(this.value=e)}return t.isGuid=function(e){var n=e.toString();return e&&(e instanceof t||t.validator.test(n))},t.create=function(){return new t([t.gen(2),t.gen(1),t.gen(1),t.gen(1),t.gen(3)].join("-"))},t.createEmpty=function(){return new t("emptyguid")},t.parse=function(e){return new t(e)},t.raw=function(){return[t.gen(2),t.gen(1),t.gen(1),t.gen(1),t.gen(3)].join("-")},t.gen=function(t){for(var e="",n=0;n<t;n++)e+=(65536*(1+Math.random())|0).toString(16).substring(1);return e},t.prototype.equals=function(e){return t.isGuid(e)&&this.value===e.toString()},t.prototype.isEmpty=function(){return this.value===t.EMPTY},t.prototype.toString=function(){return this.value},t.prototype.toJSON=function(){return{value:this.value}},t.validator=new RegExp("^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$","i"),t.EMPTY="00000000-0000-0000-0000-000000000000",t}();e.i=n}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}(()=>{var t;function e(t,e,n,r){var i=document.createElement(t);return i.className=n,i.innerHTML=r,e.appendChild(i),i}function r(t,n,r,i){var o=e("button",t,n,r);return o.onclick=i,o}function i(t,n,r,i,o){var u=e("input",n,r,"");return u.required=i,u.type=t,u.placeholder=o,u}function o(t,n,r,i,o){var u=e("img",t,n,"");return u.src=r,u.width=i,u.height=o,u}!function(t){t[t.Home=0]="Home",t[t.Game=1]="Game",t[t.Login=2]="Login",t[t.Register=3]="Register"}(t||(t={}));var u=function(t,e){return(u=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)};function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}u(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function a(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function c(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function f(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return u}function l(t,e){for(var n=0,r=e.length,i=t.length;n<r;n++,i++)t[i]=e[n];return t}function h(t){return this instanceof h?(this.v=t,this):new h(t)}function d(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||s(t,e)}))})}function s(t,e){try{(n=i[t](e)).value instanceof h?Promise.resolve(n.value.v).then(a,c):f(o[0][2],n)}catch(t){f(o[0][3],t)}var n}function a(t){s("next",t)}function c(t){s("throw",t)}function f(t,e){t(e),o.shift(),o.length&&s(o[0][0],o[0][1])}}function p(t){return"function"==typeof t}function m(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}Object.create,Object.create;var v=m((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function b(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var y=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._teardowns=null}return t.prototype.unsubscribe=function(){var t,e,n,r,i;if(!this.closed){this.closed=!0;var o=this._parentage;if(o)if(this._parentage=null,Array.isArray(o))try{for(var u=c(o),s=u.next();!s.done;s=u.next())s.value.remove(this)}catch(e){t={error:e}}finally{try{s&&!s.done&&(e=u.return)&&e.call(u)}finally{if(t)throw t.error}}else o.remove(this);var a=this.initialTeardown;if(p(a))try{a()}catch(t){i=t instanceof v?t.errors:[t]}var h=this._teardowns;if(h){this._teardowns=null;try{for(var d=c(h),m=d.next();!m.done;m=d.next()){var b=m.value;try{I(b)}catch(t){i=null!=i?i:[],t instanceof v?i=l(l([],f(i)),f(t.errors)):i.push(t)}}}catch(t){n={error:t}}finally{try{m&&!m.done&&(r=d.return)&&r.call(d)}finally{if(n)throw n.error}}}if(i)throw new v(i)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)I(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._teardowns=null!==(n=this._teardowns)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&b(e,t)},t.prototype.remove=function(e){var n=this._teardowns;n&&b(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t;var e}(),w=y.EMPTY;function g(t){return t instanceof y||t&&"closed"in t&&p(t.remove)&&p(t.add)&&p(t.unsubscribe)}function I(t){p(t)?t():t.unsubscribe()}var _=null,S=null,x=void 0,E=!1,C=!1,j={setTimeout:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=j.delegate;return((null==n?void 0:n.setTimeout)||setTimeout).apply(void 0,l([],f(t)))},clearTimeout:function(t){var e=j.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function T(t){j.setTimeout((function(){if(!_)throw t;_(t)}))}function L(){}var O=P("C",void 0,void 0);function P(t,e,n){return{kind:t,value:e,error:n}}var k=function(t){function e(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,g(e)&&e.add(n)):n.destination=N,n}return s(e,t),e.create=function(t,e,n){return new M(t,e,n)},e.prototype.next=function(t){this.isStopped?A(function(t){return P("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?A(P("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?A(O,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(y),M=function(t){function e(e,n,r){var i,o=t.call(this)||this;if(p(e))i=e;else if(e){var u;i=e.next,n=e.error,r=e.complete,o&&C?(u=Object.create(e)).unsubscribe=function(){return o.unsubscribe()}:u=e,i=null==i?void 0:i.bind(u),n=null==n?void 0:n.bind(u),r=null==r?void 0:r.bind(u)}return o.destination={next:i?F(i,o):L,error:F(null!=n?n:q,o),complete:r?F(r,o):L},o}return s(e,t),e}(k);function F(t,e){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];try{t.apply(void 0,l([],f(n)))}catch(t){if(E){if(!e._syncErrorHack_isSubscribing)throw t;e.__syncError=t}else T(t)}}}function q(t){throw t}function A(t,e){var n=S;n&&j.setTimeout((function(){return n(t,e)}))}var N={closed:!0,next:L,error:q,complete:L},H="function"==typeof Symbol&&Symbol.observable||"@@observable";function R(t){return t}function B(t){return 0===t.length?R:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var D=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,i=(r=t)&&r instanceof k||function(t){return t&&p(t.next)&&p(t.error)&&p(t.complete)}(r)&&g(r)?t:new M(t,e,n);if(E)this._deprecatedSyncErrorSubscribe(i);else{var o=this.operator,u=this.source;i.add(o?o.call(i,u):u?this._subscribe(i):this._trySubscribe(i))}return i},t.prototype._deprecatedSyncErrorSubscribe=function(t){var e=t;e._syncErrorHack_isSubscribing=!0;var n=this.operator;if(n)t.add(n.call(t,this.source));else try{t.add(this._subscribe(t))}catch(t){e.__syncError=t}for(var r=e;r;){if("__syncError"in r)try{throw r.__syncError}finally{t.unsubscribe()}r=r.destination}e._syncErrorHack_isSubscribing=!1},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=Y(e))((function(e,r){var i;i=n.subscribe((function(e){try{t(e)}catch(t){r(t),null==i||i.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[H]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t.length?B(t)(this):this},t.prototype.toPromise=function(t){var e=this;return new(t=Y(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function Y(t){var e;return null!==(e=null!=t?t:x)&&void 0!==e?e:Promise}var z=function(t){function e(e,n){return t.call(this)||this}return s(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(y),G={setInterval:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=G.delegate;return((null==n?void 0:n.setInterval)||setInterval).apply(void 0,l([],f(t)))},clearInterval:function(t){var e=G.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},U=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return s(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),G.setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;G.clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=!!t&&t||new Error(t)}if(r)return this.unsubscribe(),n},e.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,b(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(z),V={now:function(){return(V.delegate||Date).now()},delegate:void 0},J=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=V.now,t}(),K=new(function(t){function e(e,n){void 0===n&&(n=J.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return s(e,t),e.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(J))(U),Q=K;function W(t){return t&&p(t.schedule)}function Z(t){return function(e){if(function(t){return p(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}var $=function(t){function e(e,n,r,i,o){var u=t.call(this,e)||this;return u.onFinalize=o,u._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,u._error=i?function(t){try{i(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return s(e,t),e.prototype.unsubscribe=function(){var e,n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))},e}(k),X=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function tt(t){return p(null==t?void 0:t.then)}function et(t,e){return new D((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}var nt="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function rt(t,e){if(!t)throw new Error("Iterable cannot be null");return new D((function(n){var r=new y;return r.add(e.schedule((function(){var i=t[Symbol.asyncIterator]();r.add(e.schedule((function(){var t=this;i.next().then((function(e){e.done?n.complete():(n.next(e.value),t.schedule())}))})))}))),r}))}function it(t){return p(t[H])}function ot(t){return p(null==t?void 0:t[nt])}function ut(t){return Symbol.asyncIterator&&p(null==t?void 0:t[Symbol.asyncIterator])}function st(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function at(t){return d(this,arguments,(function(){var e,n,r;return a(this,(function(i){switch(i.label){case 0:e=t.getReader(),i.label=1;case 1:i.trys.push([1,,9,10]),i.label=2;case 2:return[4,h(e.read())];case 3:return n=i.sent(),r=n.value,n.done?[4,h(void 0)]:[3,5];case 4:return[2,i.sent()];case 5:return[4,h(r)];case 6:return[4,i.sent()];case 7:return i.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function ct(t){return p(null==t?void 0:t.getReader)}function ft(t,e){return e?function(t,e){if(null!=t){if(it(t))return function(t,e){return new D((function(n){var r=new y;return r.add(e.schedule((function(){var i=t[H]();r.add(i.subscribe({next:function(t){r.add(e.schedule((function(){return n.next(t)})))},error:function(t){r.add(e.schedule((function(){return n.error(t)})))},complete:function(){r.add(e.schedule((function(){return n.complete()})))}}))}))),r}))}(t,e);if(X(t))return et(t,e);if(tt(t))return function(t,e){return new D((function(n){return e.schedule((function(){return t.then((function(t){n.add(e.schedule((function(){n.next(t),n.add(e.schedule((function(){return n.complete()})))})))}),(function(t){n.add(e.schedule((function(){return n.error(t)})))}))}))}))}(t,e);if(ut(t))return rt(t,e);if(ot(t))return function(t,e){return new D((function(n){var r;return n.add(e.schedule((function(){r=t[nt](),function(t,e,n,r){void 0===r&&(r=0);var i=e.schedule((function(){try{n.call(this)}catch(e){t.error(e)}}),r);t.add(i)}(n,e,(function(){var t=r.next(),e=t.value;t.done?n.complete():(n.next(e),this.schedule())}))}))),function(){return p(null==r?void 0:r.return)&&r.return()}}))}(t,e);if(ct(t))return function(t,e){return rt(at(t),e)}(t,e)}throw st(t)}(t,e):lt(t)}function lt(t){if(t instanceof D)return t;if(null!=t){if(it(t))return r=t,new D((function(t){var e=r[H]();if(p(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(X(t))return ht(t);if(tt(t))return n=t,new D((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,T)}));if(ut(t))return dt(t);if(ot(t))return e=t,new D((function(t){var n,r;try{for(var i=c(e),o=i.next();!o.done;o=i.next()){var u=o.value;if(t.next(u),t.closed)return}}catch(t){n={error:t}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}t.complete()}));if(ct(t))return dt(at(t))}var e,n,r;throw st(t)}function ht(t){return new D((function(e){for(var n=0;n<t.length&&!e.closed;n++)e.next(t[n]);e.complete()}))}function dt(t){return new D((function(e){(function(t,e){var n,r,i,o,u,s,f,l;return u=this,s=void 0,l=function(){var u,s;return a(this,(function(a){switch(a.label){case 0:a.trys.push([0,5,6,11]),n=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=c(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,i,(e=t[n](e)).done,e.value)}))}}}(t),a.label=1;case 1:return[4,n.next()];case 2:if((r=a.sent()).done)return[3,4];if(u=r.value,e.next(u),e.closed)return[2];a.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=a.sent(),i={error:s},[3,11];case 6:return a.trys.push([6,,9,10]),r&&!r.done&&(o=n.return)?[4,o.call(n)]:[3,8];case 7:a.sent(),a.label=8;case 8:return[3,10];case 9:if(i)throw i.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((f=void 0)||(f=Promise))((function(t,e){function n(t){try{i(l.next(t))}catch(t){e(t)}}function r(t){try{i(l.throw(t))}catch(t){e(t)}}function i(e){var i;e.done?t(e.value):(i=e.value,i instanceof f?i:new f((function(t){t(i)}))).then(n,r)}i((l=l.apply(u,s||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function pt(t){return t[t.length-1]}function mt(t){return p(pt(t))?t.pop():void 0}function vt(t){return W(pt(t))?t.pop():void 0}function bt(t,e){return"number"==typeof pt(t)?t.pop():e}function yt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=mt(t);return Z((function(e,r){for(var i=t.length,o=new Array(i),u=t.map((function(){return!1})),s=!1,a=function(e){lt(t[e]).subscribe(new $(r,(function(t){o[e]=t,s||u[e]||(u[e]=!0,(s=u.every(R))&&(u=null))}),L))},c=0;c<i;c++)a(c);e.subscribe(new $(r,(function(t){if(s){var e=l([t],f(o));r.next(n?n.apply(void 0,l([],f(e))):e)}})))}))}function wt(t,e){return Z((function(n,r){var i=0;n.subscribe(new $(r,(function(n){r.next(t.call(e,n,i++))})))}))}function gt(t){return Object.getOwnPropertyNames(t)}function It(t,e){return gt(t).sort().join()==gt(e).sort().join()}var _t=Array.isArray;function St(t){return 1===t.length&&_t(t[0])?t[0]:t}var xt=new D((function(t){return t.complete()}));function Et(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=mt(t),r=St(t);return r.length?new D((function(t){var e=r.map((function(){return[]})),i=r.map((function(){return!1}));t.add((function(){e=i=null}));for(var o=function(o){lt(r[o]).subscribe(new $(t,(function(r){if(e[o].push(r),e.every((function(t){return t.length}))){var u=e.map((function(t){return t.shift()}));t.next(n?n.apply(void 0,l([],f(u))):u),e.some((function(t,e){return!t.length&&i[e]}))&&t.complete()}}),(function(){i[o]=!0,!e[o].length&&t.complete()})))},u=0;!t.closed&&u<r.length;u++)o(u);return function(){e=i=null}})):xt}function Ct(t){return t<=0?function(){return xt}:Z((function(e,n){var r=0;e.subscribe(new $(n,(function(e){++r<=t&&(n.next(e),t<=r&&n.complete())})))}))}var jt=m((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),Tt=function(t){function e(){var e=t.call(this)||this;return e.closed=!1,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return s(e,t),e.prototype.lift=function(t){var e=new Lt(this,this);return e.operator=t,e},e.prototype._throwIfClosed=function(){if(this.closed)throw new jt},e.prototype.next=function(t){var e,n;if(this._throwIfClosed(),!this.isStopped){var r=this.observers.slice();try{for(var i=c(r),o=i.next();!o.done;o=i.next())o.value.next(t)}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}}},e.prototype.error=function(t){if(this._throwIfClosed(),!this.isStopped){this.hasError=this.isStopped=!0,this.thrownError=t;for(var e=this.observers;e.length;)e.shift().error(t)}},e.prototype.complete=function(){if(this._throwIfClosed(),!this.isStopped){this.isStopped=!0;for(var t=this.observers;t.length;)t.shift().complete()}},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var e=this,n=e.hasError,r=e.isStopped,i=e.observers;return n||r?w:(i.push(t),new y((function(){return b(i,t)})))},e.prototype._checkFinalizedStatuses=function(t){var e=this,n=e.hasError,r=e.thrownError,i=e.isStopped;n?t.error(r):i&&t.complete()},e.prototype.asObservable=function(){var t=new D;return t.source=this,t},e.create=function(t,e){return new Lt(t,e)},e}(D),Lt=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return s(e,t),e.prototype.next=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===n||n.call(e,t)},e.prototype.error=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===n||n.call(e,t)},e.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},e.prototype._subscribe=function(t){var e,n;return null!==(n=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==n?n:w},e}(Tt);function Ot(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];return!0===e?(t(),null):!1===e?null:e.apply(void 0,l([],f(n))).pipe(Ct(1)).subscribe((function(){return t()}))}function Pt(t,e){return Z((function(n,r){var i=null,o=0,u=!1,s=function(){return u&&!i&&r.complete()};n.subscribe(new $(r,(function(n){null==i||i.unsubscribe();var u=0,a=o++;lt(t(n,a)).subscribe(i=new $(r,(function(t){return r.next(e?e(n,t,a,u++):t)}),(function(){i=null,s()})))}),(function(){u=!0,s()})))}))}var kt,Mt="http://localhost:3000/",Ft=Mt+"users/",qt=Mt+"rest/store/firewoodItems/",At=Mt+"rest/store/flammableItems/",Nt=Mt+"rest/store/firestarterItems/";function Ht(t,e,n){return void 0===n&&(n=1/0),p(e)?Ht((function(n,r){return wt((function(t,i){return e(n,t,r,i)}))(lt(t(n,r)))}),n):("number"==typeof e&&(n=e),Z((function(e,r){return function(t,e,n,r,i,o,u,s){var a=[],c=0,f=0,l=!1,h=function(){!l||a.length||c||e.complete()},d=function(t){return c<r?p(t):a.push(t)},p=function(t){c++;var i=!1;lt(n(t,f++)).subscribe(new $(e,(function(t){e.next(t)}),(function(){i=!0}),void 0,(function(){if(i)try{c--;for(;a.length&&c<r;)t=void 0,t=a.shift(),p(t);h()}catch(t){e.error(t)}var t})))};return t.subscribe(new $(e,d,(function(){l=!0,h()}))),function(){}}(e,r,t,n)})))}function Rt(t,e){return p(e)?Ht(t,e,1):Ht(t,1)}function Bt(t,e){return Z((function(n,r){var i=0;n.subscribe(new $(r,(function(n){return t.call(e,n,i++)&&r.next(n)})))}))}function Dt(t,e,n,r,i){return function(o,u){var s=n,a=e,c=0;o.subscribe(new $(u,(function(e){var n=c++;a=s?t(a,e,n):(s=!0,e),r&&u.next(a)}),i&&function(){s&&u.next(a),u.complete()}))}}!function(t){t[t.userNotFound=0]="userNotFound"}(kt||(kt={}));var Yt=function(t,e){return t.push(e),t};function zt(){return Z((function(t,e){(function(t,e){return Z(Dt(t,e,arguments.length>=2,!1,!0))})(Yt,[])(t).subscribe(e)}))}function Gt(t,e){if(!It(t.firestarterItems,e.firestarterItems)||!It(t.firewoodItems,e.firewoodItems)||!It(t.flammableItems,e.flammableItems))return!1;for(var n in t.firestarterItems)if(!Ut(t.firestarterItems[n],e.firestarterItems[n]))return!1;for(var n in t.flammableItems)if(!Ut(t.flammableItems[n],e.flammableItems[n]))return!1;for(var n in t.firewoodItems)if(!Ut(t.firewoodItems[n],e.firewoodItems[n]))return!1;return console.log("::true"),!0}function Ut(t,e){return t.quantity===e.quantity&&t.item===e.item}var Vt=n(442);function Jt(t,e){return{id:Vt.i.create().toString(),username:t,password:e,gameInfo:{emberAmount:0,flameBaseLevel:0,fireboosters:[],totalFlameMultiplier:1,totalFlameIncrement:0,firewood:{}},balance:1e3,inventory:{firewoodItems:[],flammableItems:[],firestarterItems:[]}}}function Kt(t){return{id:t.id,balance:t.balance,password:t.password,username:t.username,gameInfo:t.gameInfo,inventory:(e=t.inventory,{firestarterItems:gt(e.firestarterItems).map((function(t){return{item:e.firestarterItems[t].item.id,quantity:e.firestarterItems[t].quantity}})),firewoodItems:gt(e.firewoodItems).map((function(t){return{item:e.firewoodItems[t].item.id,quantity:e.firewoodItems[t].quantity}})),flammableItems:gt(e.flammableItems).map((function(t){return{item:e.flammableItems[t].item.id,quantity:e.flammableItems[t].quantity}}))})};var e}function Qt(t,e){var n=function(t,e){return ft(fetch(Ft+"?username="+t+"&password="+e).then((function(t){return t.json()})).then((function(t){return t[0]})))}(t,e).pipe(wt((function(t){if(!t)throw new Error(kt.userNotFound.toString());return t})),function(t){void 0===t&&(t={});var e=t.connector,n=void 0===e?function(){return new Tt}:e,r=t.resetOnError,i=void 0===r||r,o=t.resetOnComplete,u=void 0===o||o,s=t.resetOnRefCountZero,a=void 0===s||s;return function(t){var e=null,r=null,o=null,s=0,c=!1,f=!1,l=function(){null==r||r.unsubscribe(),r=null},h=function(){l(),e=o=null,c=f=!1},d=function(){var t=e;h(),null==t||t.unsubscribe()};return Z((function(t,p){s++,f||c||l();var m=o=null!=o?o:n();p.add((function(){0!=--s||f||c||(r=Ot(d,a))})),m.subscribe(p),e||(e=new M({next:function(t){return m.next(t)},error:function(t){f=!0,l(),r=Ot(h,i,t),m.error(t)},complete:function(){c=!0,l(),r=Ot(h,u),m.complete()}}),ft(t).subscribe(e))}))(t)}}());return Et(n.pipe(Pt((function(t){return Et(ft((e=t.inventory).firewoodItems).pipe(Rt((function(t){return e=t.item,ft(fetch(qt+""+e).then((function(t){return t.json()})));var e})),Bt((function(t){return Object.keys(t).length>0})),wt((function(t,n){return{item:t,quantity:e.firewoodItems[n].quantity}}))).pipe(zt()),ft(e.flammableItems).pipe(Rt((function(t){return e=t.item,ft(fetch(At+""+e).then((function(t){return t.json()})));var e})),Bt((function(t){return Object.keys(t).length>0})),wt((function(t,n){return{item:t,quantity:e.flammableItems[n].quantity}}))).pipe(zt()),ft(e.firestarterItems).pipe(Rt((function(t){return e=t.item,ft(fetch(Nt+""+e).then((function(t){return t.json()})));var e})),Bt((function(t){return Object.keys(t).length>0})),wt((function(t,n){return{item:t,quantity:e.firestarterItems[n].quantity}}))).pipe(zt())).pipe(wt((function(t){return e=t[1],n=t[0],r=t[2],i={firestarterItems:{},firewoodItems:{},flammableItems:{}},e.map((function(t){return i.flammableItems[t.item.name]=t})),n.map((function(t){return i.firewoodItems[t.item.name]=t})),r.map((function(t){return i.firestarterItems[t.item.name]=t})),i;var e,n,r,i})));var e}))),n).pipe(wt((function(t){return e=t[1],n=t[0],{id:e.id,username:e.username,password:e.password,gameInfo:e.gameInfo,inventory:n,balance:e.balance};var e,n})))}function Wt(t){return ft(fetch("http://localhost:3000/users/"+t.id,{method:"PUT",body:JSON.stringify(Kt(t)),headers:{"Content-Type":"application/json"}}).then((function(t){if(!t.ok)throw Error(kt.userNotFound.toString());return t})))}function Zt(t){return(t.flameBaseLevel+t.totalFlameIncrement)*t.totalFlameMultiplier}var $t=function(){return($t=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function Xt(t){return $t($t({},t),{inventory:{flammableItems:$t({},t.inventory.flammableItems),firewoodItems:$t({},t.inventory.firewoodItems),firestarterItems:$t({},t.inventory.firestarterItems)}})}function te(t,e){var n=ae(t,Xt(t));return n.balance-=e.price,gt(n.inventory.flammableItems).includes(e.name)||(n.inventory.flammableItems[e.name]={item:e,quantity:0}),n.inventory.flammableItems[e.name].quantity++,n}function ee(t,e){var n=ce(t,Xt(t));return gt(n.inventory.firestarterItems).forEach((function(e){n.inventory.firestarterItems[e]=$t({},t.inventory.firestarterItems[e])})),n.balance-=e.price,gt(n.inventory.firestarterItems).includes(e.name)||(n.inventory.firestarterItems[e.name]={item:e,quantity:0}),n.inventory.firestarterItems[e.name].quantity++,n}function ne(t,e){var n=se(t,Xt(t));return gt(n.inventory.firewoodItems).forEach((function(e){n.inventory.firewoodItems[e]=$t({},t.inventory.firewoodItems[e])})),n.balance-=e.price,gt(n.inventory.firewoodItems).includes(e.name)||(n.inventory.firewoodItems[e.name]={item:e,quantity:0}),n.inventory.firewoodItems[e.name].quantity++,n}function re(t,e){var n=function(t,e,n){void 0===t&&(t=0),void 0===n&&(n=Q);var r=-1;return null!=e&&(W(e)?n=e:r=e),new D((function(e){var i,o=(i=t)instanceof Date&&!isNaN(i)?+t-n.now():t;o<0&&(o=0);var u=0;return n.schedule((function(){e.closed||(e.next(u++),0<=r?this.schedule(void 0,r):e.complete())}),o)}))}(0,1e3).pipe(yt(e),wt((function(r){return function(t,e,n,r){return e.timeLeft--,0==e.timeLeft&&(n.unsubscribe(),r.next(function(t,e){return t.gameInfo.fireboosters=t.gameInfo.fireboosters.filter((function(t){return t!==e})),t.gameInfo.totalFlameIncrement-=e.flameIncrement,t.gameInfo.totalFlameMultiplier/=e.flameMultiplier,t}(t,e)),Wt(t)),t}(r[1],t,n,e)}))).subscribe(e)}function ie(t,e,n){if(!t.inventory.flammableItems[e.name])return t;var r=ae(t,Xt(t));return r.inventory.flammableItems[e.name].quantity--,0===r.inventory.flammableItems[e.name].quantity&&delete r.inventory.flammableItems[e.name],0!=Zt(r.gameInfo)&&(r.gameInfo.totalFlameMultiplier*=e.flameMultiplier,re(r.gameInfo.fireboosters[r.gameInfo.fireboosters.push({timeLeft:e.flameMultiplierDuration,flameIncrement:0,flameMultiplier:e.flameMultiplier})-1],n)),r}function oe(t,e,n){if(!t.inventory.firestarterItems[e.name])return t;var r=ce(t,Xt(t));return r.inventory.firestarterItems[e.name].quantity--,0===r.inventory.firestarterItems[e.name].quantity&&delete r.inventory.firestarterItems[e.name],r.gameInfo.totalFlameIncrement+=e.flameIncrement,e.firewoodContribution>0&&(gt(r.gameInfo.firewood).includes(e.name)||(r.gameInfo.firewood[e.name]={combustionFactor:e.combustionFactor,totalFirewoodContribution:0}),r.gameInfo.firewood[e.name].totalFirewoodContribution+=e.firewoodContribution),re(t.gameInfo.fireboosters[t.gameInfo.fireboosters.push({timeLeft:e.flameIncrementDuration,flameIncrement:e.flameIncrement,flameMultiplier:1})-1],n),r}function ue(t,e){if(!t.inventory.firewoodItems[e.name])return t;var n=se(t,Xt(t));return n.inventory.firewoodItems[e.name].quantity--,0===n.inventory.firewoodItems[e.name].quantity&&delete n.inventory.firewoodItems[e.name],gt(n.gameInfo.firewood).includes(e.name)||(n.gameInfo.firewood[e.name]={combustionFactor:e.combustionFactor,totalFirewoodContribution:0}),n.gameInfo.firewood[e.name].totalFirewoodContribution+=e.firewoodContribution,n}function se(t,e){return gt(e.inventory.firewoodItems).forEach((function(n){e.inventory.firewoodItems[n]=$t({},t.inventory.firewoodItems[n])})),e}function ae(t,e){return gt(e.inventory.flammableItems).forEach((function(n){e.inventory.flammableItems[n]=$t({},t.inventory.flammableItems[n])})),e}function ce(t,e){return gt(e.inventory.firestarterItems).forEach((function(n){e.inventory.firestarterItems[n]=$t({},t.inventory.firestarterItems[n])})),e}var fe=function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return s(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){var t=this,e=t.hasError,n=t.thrownError,r=t._value;if(e)throw n;return this._throwIfClosed(),r},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(Tt),le=Array.isArray;function he(t,e){return e?et(t,e):ht(t)}var de=["addListener","removeListener"],pe=["addEventListener","removeEventListener"],me=["on","off"];function ve(t,e,n,r){if(p(n)&&(r=n,n=void 0),r)return ve(t,e,n).pipe((i=r,wt((function(t){return function(t,e){return le(e)?t.apply(void 0,l([],f(e))):t(e)}(i,t)}))));var i,o=f(function(t){return p(t.addEventListener)&&p(t.removeEventListener)}(t)?pe.map((function(r){return function(i){return t[r](e,i,n)}})):function(t){return p(t.addListener)&&p(t.removeListener)}(t)?de.map(be(t,e)):function(t){return p(t.on)&&p(t.off)}(t)?me.map(be(t,e)):[],2),u=o[0],s=o[1];if(!u&&X(t))return Ht((function(t){return ve(t,e,n)}))(he(t));if(!u)throw new TypeError("Invalid event target");return new D((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return u(e),function(){return s(e)}}))}function be(t,e){return function(n){return function(r){return t[n](e,r)}}}function ye(t,e){return t===e}function we(t,e){return void 0===r&&(r=R),n=null!=(n=function(n,r){return e?e(n[t],r[t]):n[t]===r[t]})?n:ye,Z((function(t,e){var i,o=!0;t.subscribe(new $(e,(function(t){var u=r(t);!o&&n(i,u)||(o=!1,i=u,e.next(t))})))}));var n,r}function ge(t,e,n){var r=p(t)||e||n?{next:t,error:e,complete:n}:t;return r?Z((function(t,e){t.subscribe(new $(e,(function(t){var n;null===(n=r.next)||void 0===n||n.call(r,t),e.next(t)}),(function(){var t;null===(t=r.complete)||void 0===t||t.call(r),e.complete()}),(function(t){var n;null===(n=r.error)||void 0===n||n.call(r,t),e.error(t)})))})):R}var Ie="src/assets/Images/",_e=Ie+"game/",Se=function(){function t(t,n){var r=this;this._container=e("div",t,"storeContainer",""),this.userSubject=n,this.userSubject.pipe(we("balance")).subscribe((function(t){r.disableExpensiveItems(t.balance),r.renderBalance(t.balance)}))}return t.prototype.renderContent=function(){var t=this,n="<i class='fas fa-caret-left'></i><div>S<br/>T<br/>O<br/>R<br/>E</div>";e("div",this._container,"storeSpacer","");var i=r(this._container,"storeShowBtn",n,(function(){"none"===window.getComputedStyle(o).display?(i.innerHTML="<i class='fas fa-caret-right'></i><div>S<br/>T<br/>O<br/>R<br/>E</div>",o.style.display="flex",u.classList.add("balanceLabelOffset"),i.classList.add("storeShowBtnOffset")):(i.innerHTML=n,o.style.display="none",u.classList.remove("balanceLabelOffset"),i.classList.remove("storeShowBtnOffset"))})),o=e("div",this._container,"storeItemsCont",""),u=e("label",this._container,"balanceLabel","");Et(ft(fetch(At).then((function(t){return t.json()})).then((function(t){return t}))),ft(fetch(qt).then((function(t){return t.json()})).then((function(t){return t}))),ft(fetch(Nt).then((function(t){return t.json()})).then((function(t){return t})))).pipe(wt((function(t){return{flammableItems:t[0],firewoodItems:t[1],firestarterItems:t[2]}}))).pipe(yt(this.userSubject.pipe(wt((function(t){return t.balance}))))).subscribe((function(e){e[0].firewoodItems.map((function(e){return t.renderStoreItem(e,ne,o)})),e[0].flammableItems.map((function(e){return t.renderStoreItem(e,te,o)})),e[0].firestarterItems.map((function(e){return t.renderStoreItem(e,ee,o)})),t.disableExpensiveItems(e[1]),t.renderBalance(e[1])}))},t.prototype.disableExpensiveItems=function(t){this._container.querySelectorAll(".storeItemPrice").forEach((function(e){e.parentElement.classList.remove("disabledDiv"),parseInt(e.getAttribute("price"))>t&&e.parentElement.classList.add("disabledDiv")}))},t.prototype.renderBalance=function(t){var e=document.querySelector(".balanceLabel");e&&(e.innerHTML=t.toString()+"   <i class='fa fa-coins'></i>")},t.prototype.renderStoreItem=function(t,n,r){var i=e("div",r,"storeItemContainer","");o(i,"storeitemImage",_e+t.imageSrc,95,80),e("div",i,"storeItemPrice","<label>"+t.price+"</label> <i class='fa fa-coins'></i>").setAttribute("price",t.price.toString()),ve(i,"click").pipe(yt(this.userSubject),Bt((function(e){return t.price<=e[1].balance})),wt((function(e){return n(e[1],t)})),ge((function(t){return Wt(t)}))).subscribe(this.userSubject)},t}(),xe=function(){function t(t,n){this._container=e("div",t,"inventoryContainer",""),this.userSubject=n}return t.prototype.renderContent=function(){var t=this;this.userSubject.pipe(we("inventory",Gt)).subscribe((function(e){return t.renderInventory(e.inventory)}))},t.prototype.renderInventory=function(t){var n=this;this._container.innerHTML="",0!==gt(t.firewoodItems).length&&e("h2",this._container,"","Firewoods:"),gt(t.firewoodItems).map((function(e){return n.renderInventoryItem(t.firewoodItems[e],ue)})),0!==gt(t.flammableItems).length&&e("h2",this._container,"","Flammables:"),gt(t.flammableItems).map((function(e){return n.renderInventoryItem(t.flammableItems[e],ie)})),0!==gt(t.firestarterItems).length&&e("h2",this._container,"","Firestarters:"),gt(t.firestarterItems).map((function(e){return n.renderInventoryItem(t.firestarterItems[e],oe)}))},t.prototype.renderInventoryItem=function(t,n){var r=this,i=e("span",this._container,"invItemContainer",""),u=o(i,"invItemImg",_e+t.item.imageSrc,100,90);e("label",i,"ivnItemQuantity","x"+t.quantity),ve(u,"click").pipe(yt(this.userSubject),wt((function(e){return n(e[1],t.item,r.userSubject)})),ge((function(t){return Wt(t)}))).subscribe(this.userSubject)},t}(),Ee=function(){function t(t,n){this._container=e("div",t,"fireplaceContainer",""),this.userSubject=n,this.userSubject.pipe(Ct(1)).subscribe((function(t){t.gameInfo.fireboosters.forEach((function(t){re(t,n)}))}))}return t.prototype.renderContent=function(){this.userSubject.pipe(wt((function(t){return t.gameInfo}))).subscribe((function(t){var e="TotalfireLevel: "+Zt(t)+"\nfireLevel: "+t.flameBaseLevel+"\nmultiplier: "+t.totalFlameMultiplier+"\nincrement: "+t.totalFlameIncrement+"\n";e+="\n",gt(t.firewood).forEach((function(n){e+=n+"{combustion factor: "+t.firewood[n].combustionFactor+" firewoodContribution: "+t.firewood[n].totalFirewoodContribution+"}\n"})),e+="\n",t.fireboosters.forEach((function(t){e+="increment: "+t.flameIncrement+" multiplier: "+t.flameMultiplier+" timeleft: "+t.timeLeft+"\n"})),console.log(e+"\n\n")}))},t}(),Ce=function(){function t(t,n){this._container=e("div",t,"gameContainer",""),this.userSubject=new fe(n)}return t.prototype.renderContent=function(){o(this._container,"fullMark",Ie+"fullMark.jpg",1400,900),new xe(this._container,this.userSubject).renderContent(),new Se(this._container,this.userSubject).renderContent(),new Ee(this._container,this.userSubject).renderContent()},t.prototype.dispose=function(){},t.anyToPageParameter=function(t){if("id"in(e=t)&&"username"in e&&"password"in e&&"gameInfo"in e&&"inventory"in e&&"balance"in e)return t;var e;throw new Error("Invalid GamePage parameter")},t}(),je=function(){function n(t){this.mainContainer=t}return n.prototype.renderContent=function(){this._container=e("div",this.mainContainer,"homeContainer",""),e("h1",this._container,"gameTitle","Keep it Lit"),o(this._container,"homeImage",Ie+"thumbMark.jpg",650,420),e("h3",this._container,"gameDescription","This is Mark. He is a web developer.<br> Keep him warm so he may continue creating web apps and eventualy open his own startup.<br> If you do this, he will keep giving you money for fire mantainance material, and the rest is yours to spend :)"),r(this._container,"playButton","PLAY",(function(){Pe.Navigator.goTo(t.Login)}))},n}(),Te=function(){function n(t){this._container=e("form",t,"loginForm","")}return n.prototype.renderContent=function(){e("h2",this._container,"loginHeadline","ENTER YOUR CREDENTIALS:");var n=i("text",this._container,"loginInput",!0,"Username"),o=i("password",this._container,"loginInput",!0,"Password");r(this._container,"loginSubmitBtn","Login",null),this._container.onsubmit=function(){return Qt(n.value,o.value).subscribe({next:function(e){return Pe.Navigator.goTo(t.Game,e)},error:function(t){t.message===kt.userNotFound.toString()&&alert("Wrong credentials")}}),!1},e("a",this._container,"dontHaveAcc","I don't have an acount").onclick=function(){return Pe.Navigator.goTo(t.Register)}},n}();function Le(t){return void 0===t&&(t=1/0),Ht(R,t)}var Oe=function(){function n(t){this._container=e("form",t,"registerForm","")}return n.prototype.renderContent=function(){var n=this;e("div",this._container,"","<i class='fas fa-arrow-alt-circle-left backArrow'></i>").onclick=function(){return Pe.Navigator.goTo(t.Login)},e("h2",this._container,"registerHeadline","ENTER YOUR CREDENTIALS:");var o,u=i("text",this._container,"registerInput",!0,"Username"),s=e("label",this._container,"registerError errorHidden","Username already taken!");ve(u,"input").pipe((800,void 0===o&&(o=K),Z((function(t,e){var n=null,r=null,i=null,u=function(){if(n){n.unsubscribe(),n=null;var t=r;r=null,e.next(t)}};function s(){var t=i+800,e=o.now();e<t?n=this.schedule(void 0,t-e):u()}t.subscribe(new $(e,(function(t){r=t,i=o.now(),n||(n=o.schedule(s,800))}),(function(){u(),e.complete()}),void 0,(function(){r=n=null})))}))),wt((function(t){return t.target.value})),Pt((function(t){return function(t){return ft(fetch(Ft+"?username="+t).then((function(t){return t.json()}))).pipe(wt((function(t){return null!=t[0]})))}(t)}))).subscribe((function(t){return t?n.showErrorMessage(s):n.hideErrorMessage(s)}));var a=i("password",this._container,"registerInput",!0,"Password"),c=i("password",this._container,"registerInput",!0,"Password"),f=e("label",this._container,"passwordError errorHidden","Passwords don't match");(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=vt(t),r=bt(t,1/0),i=t;return i.length?1===i.length?lt(i[0]):Le(r)(he(i,n)):xt})(ve(c,"input"),ve(a,"input")).subscribe((function(){c.value===a.value?n.hideErrorMessage(f):n.showErrorMessage(f)})),r(this._container,"registerSubmitBtn","Register",null),this._container.onsubmit=function(){var e,n;return s.classList.contains("errorVisible")||f.classList.contains("errorVisible")||(e=u.value,n=a.value,ft(fetch("http://localhost:3000/users",{method:"POST",body:JSON.stringify(Jt(e,n)),headers:{"Content-Type":"application/json"}}))).subscribe((function(e){e.ok&&Pe.Navigator.goTo(t.Login)})),!1}},n.prototype.showErrorMessage=function(t){t.classList.replace("errorHidden","errorVisible")},n.prototype.hideErrorMessage=function(t){t.classList.replace("errorVisible","errorHidden")},n}(),Pe=function(){function e(){this._mainContainer=document.getElementById("main")}return Object.defineProperty(e,"Navigator",{get:function(){var t;return null!==(t=this._navigator)&&void 0!==t?t:this._navigator=new e},enumerable:!1,configurable:!0}),e.prototype.goTo=function(e,n){switch(void 0===n&&(n=null),this.clearMainContainer(),this.disposeSubscriptions(),e){case t.Home:new je(this._mainContainer).renderContent();break;case t.Game:var r=new Ce(this._mainContainer,Ce.anyToPageParameter(n));this.pageToDispose=r,r.renderContent();break;case t.Login:new Te(this._mainContainer).renderContent();break;case t.Register:new Oe(this._mainContainer).renderContent()}},e.prototype.clearMainContainer=function(){this._mainContainer.innerHTML=""},e.prototype.disposeSubscriptions=function(){this.pageToDispose&&this.pageToDispose.dispose()},e}();Pe.Navigator.goTo(t.Home)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,