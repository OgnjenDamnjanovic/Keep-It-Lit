/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var n;!function(n){n[n.Home=0]="Home",n[n.Game=1]="Game",n[n.Login=2]="Login",n[n.Register=3]="Register"}(n||(n={}));var t="src/assets/Images/";function e(n,t,e,r){var o=document.createElement(n);return o.className=e,o.innerHTML=r,t.appendChild(o),o}function r(n,t,r,o){var i=e("button",n,t,r);return i.onclick=function(){o&&o()},i}function o(n,t,r,o,i){var u=e("input",t,r,"");return u.required=o,u.type=n,u.placeholder=i,u}function i(n,t,r,o,i){var u=e("img",n,t,"");return u.src=r,u.width=o,u.height=i,u}var u,c=function(){function n(n){this._container=e("form",n,"homeForm","")}return n.prototype.renderContent=function(){i(this._container,"homeImage ",t+"fullMark.jpg",1400,900)},n.prototype.dispose=function(){},n}(),a=function(){function o(n){this.mainContainer=n}return o.prototype.renderContent=function(){this._container=e("div",this.mainContainer,"homeContainer",""),e("h1",this._container,"gameTitle","Keep it Lit"),i(this._container,"homeImage",t+"thumbMark.jpg",650,420),e("h3",this._container,"gameDescription","This is Mark. He is a web developer.<br> Keep him warm so he may continue creating web apps and eventualy open his own startup.<br> If you do this, he will keep giving you money for fire mantainance material, and the rest is yours to spend :)"),r(this._container,"playButton","PLAY",(function(){Sn.Navigator.goTo(n.Login)}))},o}();!function(n){n[n.userNotFound=0]="userNotFound"}(u||(u={}));var s=function(n,t){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e])})(n,t)};function f(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function e(){this.constructor=n}s(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}function l(n,t){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(n,u)}catch(n){i=[6,n],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}function h(n){var t="function"==typeof Symbol&&Symbol.iterator,e=t&&n[t],r=0;if(e)return e.call(n);if(n&&"number"==typeof n.length)return{next:function(){return n&&r>=n.length&&(n=void 0),{value:n&&n[r++],done:!n}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function p(n,t){var e="function"==typeof Symbol&&n[Symbol.iterator];if(!e)return n;var r,o,i=e.call(n),u=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(n){o={error:n}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u}function d(n,t){for(var e=0,r=t.length,o=n.length;e<r;e++,o++)n[o]=t[e];return n}function v(n){return this instanceof v?(this.v=n,this):new v(n)}function y(n,t,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=e.apply(n,t||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(n){o[n]&&(r[n]=function(t){return new Promise((function(e,r){i.push([n,t,e,r])>1||c(n,t)}))})}function c(n,t){try{(e=o[n](t)).value instanceof v?Promise.resolve(e.value.v).then(a,s):f(i[0][2],e)}catch(n){f(i[0][3],n)}var e}function a(n){c("next",n)}function s(n){c("throw",n)}function f(n,t){n(t),i.shift(),i.length&&c(i[0][0],i[0][1])}}Object.create,Object.create;var b=function(n){return n&&"number"==typeof n.length&&"function"!=typeof n};function m(n){return"function"==typeof n}function w(n){return m(null==n?void 0:n.then)}var g,_="function"==typeof Symbol&&Symbol.observable||"@@observable",x=((g=function(n){var t;t=this,Error.call(t),t.stack=(new Error).stack,this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(n,t){return t+1+") "+n.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}).prototype=Object.create(Error.prototype),g.prototype.constructor=g,g);function S(n,t){if(n){var e=n.indexOf(t);0<=e&&n.splice(e,1)}}var E=function(){function n(n){this.initialTeardown=n,this.closed=!1,this._parentage=null,this._teardowns=null}return n.prototype.unsubscribe=function(){var n,t,e,r,o;if(!this.closed){this.closed=!0;var i=this._parentage;if(i)if(this._parentage=null,Array.isArray(i))try{for(var u=h(i),c=u.next();!c.done;c=u.next())c.value.remove(this)}catch(t){n={error:t}}finally{try{c&&!c.done&&(t=u.return)&&t.call(u)}finally{if(n)throw n.error}}else i.remove(this);var a=this.initialTeardown;if(m(a))try{a()}catch(n){o=n instanceof x?n.errors:[n]}var s=this._teardowns;if(s){this._teardowns=null;try{for(var f=h(s),l=f.next();!l.done;l=f.next()){var v=l.value;try{T(v)}catch(n){o=null!=o?o:[],n instanceof x?o=d(d([],p(o)),p(n.errors)):o.push(n)}}}catch(n){e={error:n}}finally{try{l&&!l.done&&(r=f.return)&&r.call(f)}finally{if(e)throw e.error}}}if(o)throw new x(o)}},n.prototype.add=function(t){var e;if(t&&t!==this)if(this.closed)T(t);else{if(t instanceof n){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._teardowns=null!==(e=this._teardowns)&&void 0!==e?e:[]).push(t)}},n.prototype._hasParent=function(n){var t=this._parentage;return t===n||Array.isArray(t)&&t.includes(n)},n.prototype._addParent=function(n){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(n),t):t?[t,n]:n},n.prototype._removeParent=function(n){var t=this._parentage;t===n?this._parentage=null:Array.isArray(t)&&S(t,n)},n.prototype.remove=function(t){var e=this._teardowns;e&&S(e,t),t instanceof n&&t._removeParent(this)},n.EMPTY=((t=new n).closed=!0,t),n;var t}();function I(n){return n instanceof E||n&&"closed"in n&&m(n.remove)&&m(n.add)&&m(n.unsubscribe)}function T(n){m(n)?n():n.unsubscribe()}E.EMPTY;var P=null,k=null,j=void 0,C=!1,O=!1,A={setTimeout:function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];var e=A.delegate;return((null==e?void 0:e.setTimeout)||setTimeout).apply(void 0,d([],p(n)))},clearTimeout:function(n){var t=A.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(n)},delegate:void 0};function L(n){A.setTimeout((function(){if(!P)throw n;P(n)}))}function N(){}var H=M("C",void 0,void 0);function M(n,t,e){return{kind:n,value:t,error:e}}var F=function(n){function t(t){var e=n.call(this)||this;return e.isStopped=!1,t?(e.destination=t,I(t)&&t.add(e)):e.destination=G,e}return f(t,n),t.create=function(n,t,e){return new R(n,t,e)},t.prototype.next=function(n){this.isStopped?q(function(n){return M("N",n,void 0)}(n),this):this._next(n)},t.prototype.error=function(n){this.isStopped?q(M("E",void 0,n),this):(this.isStopped=!0,this._error(n))},t.prototype.complete=function(){this.isStopped?q(H,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,n.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(n){this.destination.next(n)},t.prototype._error=function(n){try{this.destination.error(n)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(E),R=function(n){function t(t,e,r){var o,i=n.call(this)||this;if(m(t))o=t;else if(t){var u;o=t.next,e=t.error,r=t.complete,i&&O?(u=Object.create(t)).unsubscribe=function(){return i.unsubscribe()}:u=t,o=null==o?void 0:o.bind(u),e=null==e?void 0:e.bind(u),r=null==r?void 0:r.bind(u)}return i.destination={next:o?Y(o,i):N,error:Y(null!=e?e:D,i),complete:r?Y(r,i):N},i}return f(t,n),t}(F);function Y(n,t){return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];try{n.apply(void 0,d([],p(e)))}catch(n){if(C){if(!t._syncErrorHack_isSubscribing)throw n;t.__syncError=n}else L(n)}}}function D(n){throw n}function q(n,t){var e=k;e&&A.setTimeout((function(){return e(n,t)}))}var G={closed:!0,next:N,error:D,complete:N};function U(n){return n}function B(n){return 0===n.length?U:1===n.length?n[0]:function(t){return n.reduce((function(n,t){return t(n)}),t)}}var z=function(){function n(n){n&&(this._subscribe=n)}return n.prototype.lift=function(t){var e=new n;return e.source=this,e.operator=t,e},n.prototype.subscribe=function(n,t,e){var r,o=(r=n)&&r instanceof F||function(n){return n&&m(n.next)&&m(n.error)&&m(n.complete)}(r)&&I(r)?n:new R(n,t,e);if(C)this._deprecatedSyncErrorSubscribe(o);else{var i=this.operator,u=this.source;o.add(i?i.call(o,u):u?this._subscribe(o):this._trySubscribe(o))}return o},n.prototype._deprecatedSyncErrorSubscribe=function(n){var t=n;t._syncErrorHack_isSubscribing=!0;var e=this.operator;if(e)n.add(e.call(n,this.source));else try{n.add(this._subscribe(n))}catch(n){t.__syncError=n}for(var r=t;r;){if("__syncError"in r)try{throw r.__syncError}finally{n.unsubscribe()}r=r.destination}t._syncErrorHack_isSubscribing=!1},n.prototype._trySubscribe=function(n){try{return this._subscribe(n)}catch(t){n.error(t)}},n.prototype.forEach=function(n,t){var e=this;return new(t=K(t))((function(t,r){var o;o=e.subscribe((function(t){try{n(t)}catch(n){r(n),null==o||o.unsubscribe()}}),r,t)}))},n.prototype._subscribe=function(n){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(n)},n.prototype[_]=function(){return this},n.prototype.pipe=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return n.length?B(n)(this):this},n.prototype.toPromise=function(n){var t=this;return new(n=K(n))((function(n,e){var r;t.subscribe((function(n){return r=n}),(function(n){return e(n)}),(function(){return n(r)}))}))},n.create=function(t){return new n(t)},n}();function K(n){var t;return null!==(t=null!=n?n:j)&&void 0!==t?t:Promise}var W="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function J(n,t){if(!n)throw new Error("Iterable cannot be null");return new z((function(e){var r=new E;return r.add(t.schedule((function(){var o=n[Symbol.asyncIterator]();r.add(t.schedule((function(){var n=this;o.next().then((function(t){t.done?e.complete():(e.next(t.value),n.schedule())}))})))}))),r}))}function Q(n){return m(n[_])}function V(n){return m(null==n?void 0:n[W])}function X(n){return Symbol.asyncIterator&&m(null==n?void 0:n[Symbol.asyncIterator])}function Z(n){return new TypeError("You provided "+(null!==n&&"object"==typeof n?"an invalid object":"'"+n+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function $(n){return y(this,arguments,(function(){var t,e,r;return l(this,(function(o){switch(o.label){case 0:t=n.getReader(),o.label=1;case 1:o.trys.push([1,,9,10]),o.label=2;case 2:return[4,v(t.read())];case 3:return e=o.sent(),r=e.value,e.done?[4,v(void 0)]:[3,5];case 4:return[2,o.sent()];case 5:return[4,v(r)];case 6:return[4,o.sent()];case 7:return o.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function nn(n){return m(null==n?void 0:n.getReader)}function tn(n,t){return t?function(n,t){if(null!=n){if(Q(n))return function(n,t){return new z((function(e){var r=new E;return r.add(t.schedule((function(){var o=n[_]();r.add(o.subscribe({next:function(n){r.add(t.schedule((function(){return e.next(n)})))},error:function(n){r.add(t.schedule((function(){return e.error(n)})))},complete:function(){r.add(t.schedule((function(){return e.complete()})))}}))}))),r}))}(n,t);if(b(n))return function(n,t){return new z((function(e){var r=0;return t.schedule((function(){r===n.length?e.complete():(e.next(n[r++]),e.closed||this.schedule())}))}))}(n,t);if(w(n))return function(n,t){return new z((function(e){return t.schedule((function(){return n.then((function(n){e.add(t.schedule((function(){e.next(n),e.add(t.schedule((function(){return e.complete()})))})))}),(function(n){e.add(t.schedule((function(){return e.error(n)})))}))}))}))}(n,t);if(X(n))return J(n,t);if(V(n))return function(n,t){return new z((function(e){var r;return e.add(t.schedule((function(){r=n[W](),function(n,t,e,r){void 0===r&&(r=0);var o=t.schedule((function(){try{e.call(this)}catch(t){n.error(t)}}),r);n.add(o)}(e,t,(function(){var n=r.next(),t=n.value;n.done?e.complete():(e.next(t),this.schedule())}))}))),function(){return m(null==r?void 0:r.return)&&r.return()}}))}(n,t);if(nn(n))return function(n,t){return J($(n),t)}(n,t)}throw Z(n)}(n,t):en(n)}function en(n){if(n instanceof z)return n;if(null!=n){if(Q(n))return o=n,new z((function(n){var t=o[_]();if(m(t.subscribe))return t.subscribe(n);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(b(n))return r=n,new z((function(n){for(var t=0;t<r.length&&!n.closed;t++)n.next(r[t]);n.complete()}));if(w(n))return e=n,new z((function(n){e.then((function(t){n.closed||(n.next(t),n.complete())}),(function(t){return n.error(t)})).then(null,L)}));if(X(n))return rn(n);if(V(n))return t=n,new z((function(n){var e,r;try{for(var o=h(t),i=o.next();!i.done;i=o.next()){var u=i.value;if(n.next(u),n.closed)return}}catch(n){e={error:n}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}n.complete()}));if(nn(n))return rn($(n))}var t,e,r,o;throw Z(n)}function rn(n){return new z((function(t){(function(n,t){var e,r,o,i,u,c,a,s;return u=this,c=void 0,s=function(){var u,c;return l(this,(function(a){switch(a.label){case 0:a.trys.push([0,5,6,11]),e=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,e=n[Symbol.asyncIterator];return e?e.call(n):(n=h(n),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(e){t[e]=n[e]&&function(t){return new Promise((function(r,o){!function(n,t,e,r){Promise.resolve(r).then((function(t){n({value:t,done:e})}),t)}(r,o,(t=n[e](t)).done,t.value)}))}}}(n),a.label=1;case 1:return[4,e.next()];case 2:if((r=a.sent()).done)return[3,4];if(u=r.value,t.next(u),t.closed)return[2];a.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=a.sent(),o={error:c},[3,11];case 6:return a.trys.push([6,,9,10]),r&&!r.done&&(i=e.return)?[4,i.call(e)]:[3,8];case 7:a.sent(),a.label=8;case 8:return[3,10];case 9:if(o)throw o.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((a=void 0)||(a=Promise))((function(n,t){function e(n){try{o(s.next(n))}catch(n){t(n)}}function r(n){try{o(s.throw(n))}catch(n){t(n)}}function o(t){var o;t.done?n(t.value):(o=t.value,o instanceof a?o:new a((function(n){n(o)}))).then(e,r)}o((s=s.apply(u,c||[])).next())}))})(n,t).catch((function(n){return t.error(n)}))}))}var on=Array.isArray;function un(n){return 1===n.length&&on(n[0])?n[0]:n}var cn=new z((function(n){return n.complete()})),an=function(n){function t(t,e,r,o,i){var u=n.call(this,t)||this;return u.onFinalize=i,u._next=e?function(n){try{e(n)}catch(n){t.error(n)}}:n.prototype._next,u._error=o?function(n){try{o(n)}catch(n){t.error(n)}finally{this.unsubscribe()}}:n.prototype._error,u._complete=r?function(){try{r()}catch(n){t.error(n)}finally{this.unsubscribe()}}:n.prototype._complete,u}return f(t,n),t.prototype.unsubscribe=function(){var t,e=this.closed;n.prototype.unsubscribe.call(this),!e&&(null===(t=this.onFinalize)||void 0===t||t.call(this))},t}(F);function sn(n){return m((t=n)[t.length-1])?n.pop():void 0;var t}function fn(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];var e=sn(n),r=un(n);return r.length?new z((function(n){var t=r.map((function(){return[]})),o=r.map((function(){return!1}));n.add((function(){t=o=null}));for(var i=function(i){en(r[i]).subscribe(new an(n,(function(r){if(t[i].push(r),t.every((function(n){return n.length}))){var u=t.map((function(n){return n.shift()}));n.next(e?e.apply(void 0,d([],p(u))):u),t.some((function(n,t){return!n.length&&o[t]}))&&n.complete()}}),(function(){o[i]=!0,!t[i].length&&n.complete()})))},u=0;!n.closed&&u<r.length;u++)i(u);return function(){t=o=null}})):cn}function ln(n){return function(t){if(function(n){return m(null==n?void 0:n.lift)}(t))return t.lift((function(t){try{return n(t,this)}catch(n){this.error(n)}}));throw new TypeError("Unable to lift unknown Observable type")}}function hn(n,t){return ln((function(e,r){var o=0;e.subscribe(new an(r,(function(e){r.next(n.call(t,e,o++))})))}))}function pn(n,t,e){return void 0===e&&(e=1/0),m(t)?pn((function(e,r){return hn((function(n,o){return t(e,n,r,o)}))(en(n(e,r)))}),e):("number"==typeof t&&(e=t),ln((function(t,r){return function(n,t,e,r,o,i,u,c){var a=[],s=0,f=0,l=!1,h=function(){!l||a.length||s||t.complete()},p=function(n){return s<r?d(n):a.push(n)},d=function(n){s++;var o=!1;en(e(n,f++)).subscribe(new an(t,(function(n){t.next(n)}),(function(){o=!0}),void 0,(function(){if(o)try{s--;for(;a.length&&s<r;)n=void 0,n=a.shift(),d(n);h()}catch(n){t.error(n)}var n})))};return n.subscribe(new an(t,p,(function(){l=!0,h()}))),function(){}}(t,r,n,e)})))}function dn(n,t){return m(t)?pn(n,t,1):pn(n,1)}function vn(n,t){return ln((function(e,r){var o=0;e.subscribe(new an(r,(function(e){return n.call(t,e,o++)&&r.next(e)})))}))}function yn(n,t,e,r,o){return function(i,u){var c=e,a=t,s=0;i.subscribe(new an(u,(function(t){var e=s++;a=c?n(a,t,e):(c=!0,t),r&&u.next(a)}),o&&function(){c&&u.next(a),u.complete()}))}}var bn=function(n,t){return n.push(t),n};function mn(){return ln((function(n,t){(function(n,t){return ln(yn(n,t,arguments.length>=2,!1,!0))})(bn,[])(n).subscribe(t)}))}var wn=function(n,t){var e=this;this.flammableItems={},this.firewoodItems={},n.map((function(n){return e.flammableItems[n.item.name]=n})),t.map((function(n){return e.firewoodItems[n.item.name]=n}))},gn=function(n,t){this.item=n,this.quantity=t};function _n(n,t){var e,r=tn(fetch("http://localhost:3000/users/?username="+n+"&password="+t).then((function(n){return n.json()})).then((function(n){return n[0]}))).pipe(hn((function(n){if(!n)throw new Error(u.userNotFound.toString());return n})));return fn(r.pipe((e=function(n){return fn(tn((t=n.inventory).firewoodItems).pipe(dn((function(n){return t=n.item,tn(fetch("http://localhost:3000/rest/store/firewoodItems/"+t).then((function(n){return n.json()})));var t})),vn((function(n){return Object.keys(n).length>0})),hn((function(n,e){return new gn(n,t.firewoodItems[e].quantity)}))).pipe(mn()),tn(t.flammableItems).pipe(dn((function(n){return t=n.item,tn(fetch("http://localhost:3000/rest/store/flammableItems/"+t).then((function(n){return n.json()})));var t})),vn((function(n){return Object.keys(n).length>0})),hn((function(n,e){return new gn(n,t.flammableItems[e].quantity)}))).pipe(mn())).pipe(hn((function(n){return new wn(n[1],n[0])})));var t},ln((function(n,t){var r=null,o=!1,i=function(){return o&&!r&&t.complete()};n.subscribe(new an(t,(function(n){null==r||r.unsubscribe();0;en(e(n)).subscribe(r=new an(t,(function(n){return t.next(n)}),(function(){r=null,i()})))}),(function(){o=!0,i()})))})))),r).pipe(hn((function(n){return t=n[1],e=n[0],{username:t.username,password:t.password,gameInfo:t.gameInfo,inventory:e};var t,e})))}var xn=function(){function n(n){this._container=e("form",n,"homeForm","")}return n.prototype.renderContent=function(){e("h2",this._container,"homeHeadline","ENTER YOUR CREDENTIALS:");var n=o("text",this._container,"loginInput",!0,"Username"),t=o("password",this._container,"loginInput",!0,"Password");r(this._container,"loginSubmitBtn","Login",null),this._container.onsubmit=function(){return _n(n.value,t.value).subscribe({next:function(n){return console.log(n)},error:function(n){n.message===u.userNotFound.toString()&&alert("Wrong credentials")}}),!1}},n}(),Sn=function(){function t(){this._mainContainer=document.getElementById("main")}return Object.defineProperty(t,"Navigator",{get:function(){var n;return null!==(n=this._navigator)&&void 0!==n?n:this._navigator=new t},enumerable:!1,configurable:!0}),t.prototype.goTo=function(t){switch(this.clearMainContainer(),this.disposeSubscriptions(),t){case n.Home:new a(this._mainContainer).renderContent();break;case n.Game:var e=new c(this._mainContainer);this.pageToDispose=e,e.renderContent();break;case n.Login:new xn(this._mainContainer).renderContent()}},t.prototype.clearMainContainer=function(){this._mainContainer.innerHTML=""},t.prototype.disposeSubscriptions=function(){this.pageToDispose&&this.pageToDispose.dispose()},t}();Sn.Navigator.goTo(n.Login)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,