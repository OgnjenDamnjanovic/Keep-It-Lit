/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t={442:(t,n)=>{var e=function(){function t(n){if(!n)throw new TypeError("Invalid argument; `value` has no value.");this.value=t.EMPTY,n&&t.isGuid(n)&&(this.value=n)}return t.isGuid=function(n){var e=n.toString();return n&&(n instanceof t||t.validator.test(e))},t.create=function(){return new t([t.gen(2),t.gen(1),t.gen(1),t.gen(1),t.gen(3)].join("-"))},t.createEmpty=function(){return new t("emptyguid")},t.parse=function(n){return new t(n)},t.raw=function(){return[t.gen(2),t.gen(1),t.gen(1),t.gen(1),t.gen(3)].join("-")},t.gen=function(t){for(var n="",e=0;e<t;e++)n+=(65536*(1+Math.random())|0).toString(16).substring(1);return n},t.prototype.equals=function(n){return t.isGuid(n)&&this.value===n.toString()},t.prototype.isEmpty=function(){return this.value===t.EMPTY},t.prototype.toString=function(){return this.value},t.prototype.toJSON=function(){return{value:this.value}},t.validator=new RegExp("^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$","i"),t.EMPTY="00000000-0000-0000-0000-000000000000",t}();n.i=e}},n={};function e(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={exports:{}};return t[r](i,i.exports,e),i.exports}(()=>{var t;function n(t,n,e,r){var o=document.createElement(t);return o.className=e,o.innerHTML=r,n.appendChild(o),o}function r(t,e,r,o){var i=n("button",t,e,r);return i.onclick=function(){o&&o()},i}function o(t,e,r,o,i){var u=n("input",e,r,"");return u.required=o,u.type=t,u.placeholder=i,u}function i(t,e,r,o,i){var u=n("img",t,e,"");return u.src=r,u.width=o,u.height=i,u}!function(t){t[t.Home=0]="Home",t[t.Game=1]="Game",t[t.Login=2]="Login",t[t.Register=3]="Register"}(t||(t={}));var u=function(t,n){this.item=t,this.quantity=n};function s(t,n){return t.balance-=n.price,Object.getOwnPropertyNames(t.inventory.flammableItems).includes(n.name)||(t.inventory.flammableItems[n.name]=new u(n,0)),t.inventory.flammableItems[n.name].quantity++,t}function c(t,n){return t.balance-=n.price,Object.getOwnPropertyNames(t.inventory.firestarterItems).includes(n.name)||(t.inventory.firestarterItems[n.name]=new u(n,0)),t.inventory.firestarterItems[n.name].quantity++,t}function a(t,n){return t.balance-=n.price,Object.getOwnPropertyNames(t.inventory.firewoodItems).includes(n.name)||(t.inventory.firewoodItems[n.name]=new u(n,0)),t.inventory.firewoodItems[n.name].quantity++,t}var l=function(t,n){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(t,n)};function f(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}l(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}function h(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}function p(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function d(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,i=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u}function v(t,n){for(var e=0,r=n.length,o=t.length;e<r;e++,o++)t[o]=n[e];return t}function b(t){return this instanceof b?(this.v=t,this):new b(t)}function y(t,n,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=e.apply(t,n||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(t){o[t]&&(r[t]=function(n){return new Promise((function(e,r){i.push([t,n,e,r])>1||s(t,n)}))})}function s(t,n){try{(e=o[t](n)).value instanceof b?Promise.resolve(e.value.v).then(c,a):l(i[0][2],e)}catch(t){l(i[0][3],t)}var e}function c(t){s("next",t)}function a(t){s("throw",t)}function l(t,n){t(n),i.shift(),i.length&&s(i[0][0],i[0][1])}}function m(t){return"function"==typeof t}function w(t){var n=t((function(t){Error.call(t),t.stack=(new Error).stack}));return n.prototype=Object.create(Error.prototype),n.prototype.constructor=n,n}Object.create,Object.create;var g=w((function(t){return function(n){t(this),this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}}));function _(t,n){if(t){var e=t.indexOf(n);0<=e&&t.splice(e,1)}}var I=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._teardowns=null}return t.prototype.unsubscribe=function(){var t,n,e,r,o;if(!this.closed){this.closed=!0;var i=this._parentage;if(i)if(this._parentage=null,Array.isArray(i))try{for(var u=p(i),s=u.next();!s.done;s=u.next())s.value.remove(this)}catch(n){t={error:n}}finally{try{s&&!s.done&&(n=u.return)&&n.call(u)}finally{if(t)throw t.error}}else i.remove(this);var c=this.initialTeardown;if(m(c))try{c()}catch(t){o=t instanceof g?t.errors:[t]}var a=this._teardowns;if(a){this._teardowns=null;try{for(var l=p(a),f=l.next();!f.done;f=l.next()){var h=f.value;try{E(h)}catch(t){o=null!=o?o:[],t instanceof g?o=v(v([],d(o)),d(t.errors)):o.push(t)}}}catch(t){e={error:t}}finally{try{f&&!f.done&&(r=l.return)&&r.call(l)}finally{if(e)throw e.error}}}if(o)throw new g(o)}},t.prototype.add=function(n){var e;if(n&&n!==this)if(this.closed)E(n);else{if(n instanceof t){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._teardowns=null!==(e=this._teardowns)&&void 0!==e?e:[]).push(n)}},t.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},t.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},t.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&_(n,t)},t.prototype.remove=function(n){var e=this._teardowns;e&&_(e,n),n instanceof t&&n._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t;var n}(),S=I.EMPTY;function x(t){return t instanceof I||t&&"closed"in t&&m(t.remove)&&m(t.add)&&m(t.unsubscribe)}function E(t){m(t)?t():t.unsubscribe()}var T=null,j=null,P=void 0,C=!1,O=!1,k={setTimeout:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=k.delegate;return((null==e?void 0:e.setTimeout)||setTimeout).apply(void 0,v([],d(t)))},clearTimeout:function(t){var n=k.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(t)},delegate:void 0};function A(t){k.setTimeout((function(){if(!T)throw t;T(t)}))}function N(){}var L=M("C",void 0,void 0);function M(t,n,e){return{kind:t,value:n,error:e}}var H=function(t){function n(n){var e=t.call(this)||this;return e.isStopped=!1,n?(e.destination=n,x(n)&&n.add(e)):e.destination=z,e}return f(n,t),n.create=function(t,n,e){return new R(t,n,e)},n.prototype.next=function(t){this.isStopped?Y(function(t){return M("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?Y(M("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?Y(L,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(I),R=function(t){function n(n,e,r){var o,i=t.call(this)||this;if(m(n))o=n;else if(n){var u;o=n.next,e=n.error,r=n.complete,i&&O?(u=Object.create(n)).unsubscribe=function(){return i.unsubscribe()}:u=n,o=null==o?void 0:o.bind(u),e=null==e?void 0:e.bind(u),r=null==r?void 0:r.bind(u)}return i.destination={next:o?q(o,i):N,error:q(null!=e?e:F,i),complete:r?q(r,i):N},i}return f(n,t),n}(H);function q(t,n){return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];try{t.apply(void 0,v([],d(e)))}catch(t){if(C){if(!n._syncErrorHack_isSubscribing)throw t;n.__syncError=t}else A(t)}}}function F(t){throw t}function Y(t,n){var e=j;e&&k.setTimeout((function(){return e(t,n)}))}var z={closed:!0,next:N,error:F,complete:N},G="function"==typeof Symbol&&Symbol.observable||"@@observable";function U(t){return t}function D(t){return 0===t.length?U:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}var V=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r,o=(r=t)&&r instanceof H||function(t){return t&&m(t.next)&&m(t.error)&&m(t.complete)}(r)&&x(r)?t:new R(t,n,e);if(C)this._deprecatedSyncErrorSubscribe(o);else{var i=this.operator,u=this.source;o.add(i?i.call(o,u):u?this._subscribe(o):this._trySubscribe(o))}return o},t.prototype._deprecatedSyncErrorSubscribe=function(t){var n=t;n._syncErrorHack_isSubscribing=!0;var e=this.operator;if(e)t.add(e.call(t,this.source));else try{t.add(this._subscribe(t))}catch(t){n.__syncError=t}for(var r=n;r;){if("__syncError"in r)try{throw r.__syncError}finally{t.unsubscribe()}r=r.destination}n._syncErrorHack_isSubscribing=!1},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=B(n))((function(n,r){var o;o=e.subscribe((function(n){try{t(n)}catch(t){r(t),null==o||o.unsubscribe()}}),r,n)}))},t.prototype._subscribe=function(t){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(t)},t.prototype[G]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return t.length?D(t)(this):this},t.prototype.toPromise=function(t){var n=this;return new(t=B(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function B(t){var n;return null!==(n=null!=t?t:P)&&void 0!==n?n:Promise}var J=w((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),K=function(t){function n(){var n=t.call(this)||this;return n.closed=!1,n.observers=[],n.isStopped=!1,n.hasError=!1,n.thrownError=null,n}return f(n,t),n.prototype.lift=function(t){var n=new W(this,this);return n.operator=t,n},n.prototype._throwIfClosed=function(){if(this.closed)throw new J},n.prototype.next=function(t){var n,e;if(this._throwIfClosed(),!this.isStopped){var r=this.observers.slice();try{for(var o=p(r),i=o.next();!i.done;i=o.next())i.value.next(t)}catch(t){n={error:t}}finally{try{i&&!i.done&&(e=o.return)&&e.call(o)}finally{if(n)throw n.error}}}},n.prototype.error=function(t){if(this._throwIfClosed(),!this.isStopped){this.hasError=this.isStopped=!0,this.thrownError=t;for(var n=this.observers;n.length;)n.shift().error(t)}},n.prototype.complete=function(){if(this._throwIfClosed(),!this.isStopped){this.isStopped=!0;for(var t=this.observers;t.length;)t.shift().complete()}},n.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=null},Object.defineProperty(n.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),n.prototype._trySubscribe=function(n){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,n)},n.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},n.prototype._innerSubscribe=function(t){var n=this,e=n.hasError,r=n.isStopped,o=n.observers;return e||r?S:(o.push(t),new I((function(){return _(o,t)})))},n.prototype._checkFinalizedStatuses=function(t){var n=this,e=n.hasError,r=n.thrownError,o=n.isStopped;e?t.error(r):o&&t.complete()},n.prototype.asObservable=function(){var t=new V;return t.source=this,t},n.create=function(t,n){return new W(t,n)},n}(V),W=function(t){function n(n,e){var r=t.call(this)||this;return r.destination=n,r.source=e,r}return f(n,t),n.prototype.next=function(t){var n,e;null===(e=null===(n=this.destination)||void 0===n?void 0:n.next)||void 0===e||e.call(n,t)},n.prototype.error=function(t){var n,e;null===(e=null===(n=this.destination)||void 0===n?void 0:n.error)||void 0===e||e.call(n,t)},n.prototype.complete=function(){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===n||n.call(t)},n.prototype._subscribe=function(t){var n,e;return null!==(e=null===(n=this.source)||void 0===n?void 0:n.subscribe(t))&&void 0!==e?e:S},n}(K),Z=function(t){function n(n){var e=t.call(this)||this;return e._value=n,e}return f(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),n.prototype._subscribe=function(n){var e=t.prototype._subscribe.call(this,n);return!e.closed&&n.next(this._value),e},n.prototype.getValue=function(){var t=this,n=t.hasError,e=t.thrownError,r=t._value;if(n)throw e;return this._throwIfClosed(),r},n.prototype.next=function(n){t.prototype.next.call(this,this._value=n)},n}(K);function $(t){return function(n){if(function(t){return m(null==t?void 0:t.lift)}(n))return n.lift((function(n){try{return t(n,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}var Q=function(t){function n(n,e,r,o,i){var u=t.call(this,n)||this;return u.onFinalize=i,u._next=e?function(t){try{e(t)}catch(t){n.error(t)}}:t.prototype._next,u._error=o?function(t){try{o(t)}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return f(n,t),n.prototype.unsubscribe=function(){var n,e=this.closed;t.prototype.unsubscribe.call(this),!e&&(null===(n=this.onFinalize)||void 0===n||n.call(this))},n}(H);function X(t,n){return $((function(e,r){var o=0;e.subscribe(new Q(r,(function(e){r.next(t.call(n,e,o++))})))}))}var tt=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function nt(t){return m(null==t?void 0:t.then)}function et(t,n){return new V((function(e){var r=0;return n.schedule((function(){r===t.length?e.complete():(e.next(t[r++]),e.closed||this.schedule())}))}))}var rt="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function ot(t,n){if(!t)throw new Error("Iterable cannot be null");return new V((function(e){var r=new I;return r.add(n.schedule((function(){var o=t[Symbol.asyncIterator]();r.add(n.schedule((function(){var t=this;o.next().then((function(n){n.done?e.complete():(e.next(n.value),t.schedule())}))})))}))),r}))}function it(t){return m(t[G])}function ut(t){return m(null==t?void 0:t[rt])}function st(t){return Symbol.asyncIterator&&m(null==t?void 0:t[Symbol.asyncIterator])}function ct(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function at(t){return y(this,arguments,(function(){var n,e,r;return h(this,(function(o){switch(o.label){case 0:n=t.getReader(),o.label=1;case 1:o.trys.push([1,,9,10]),o.label=2;case 2:return[4,b(n.read())];case 3:return e=o.sent(),r=e.value,e.done?[4,b(void 0)]:[3,5];case 4:return[2,o.sent()];case 5:return[4,b(r)];case 6:return[4,o.sent()];case 7:return o.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function lt(t){return m(null==t?void 0:t.getReader)}function ft(t,n){return n?function(t,n){if(null!=t){if(it(t))return function(t,n){return new V((function(e){var r=new I;return r.add(n.schedule((function(){var o=t[G]();r.add(o.subscribe({next:function(t){r.add(n.schedule((function(){return e.next(t)})))},error:function(t){r.add(n.schedule((function(){return e.error(t)})))},complete:function(){r.add(n.schedule((function(){return e.complete()})))}}))}))),r}))}(t,n);if(tt(t))return et(t,n);if(nt(t))return function(t,n){return new V((function(e){return n.schedule((function(){return t.then((function(t){e.add(n.schedule((function(){e.next(t),e.add(n.schedule((function(){return e.complete()})))})))}),(function(t){e.add(n.schedule((function(){return e.error(t)})))}))}))}))}(t,n);if(st(t))return ot(t,n);if(ut(t))return function(t,n){return new V((function(e){var r;return e.add(n.schedule((function(){r=t[rt](),function(t,n,e,r){void 0===r&&(r=0);var o=n.schedule((function(){try{e.call(this)}catch(n){t.error(n)}}),r);t.add(o)}(e,n,(function(){var t=r.next(),n=t.value;t.done?e.complete():(e.next(n),this.schedule())}))}))),function(){return m(null==r?void 0:r.return)&&r.return()}}))}(t,n);if(lt(t))return function(t,n){return ot(at(t),n)}(t,n)}throw ct(t)}(t,n):ht(t)}function ht(t){if(t instanceof V)return t;if(null!=t){if(it(t))return r=t,new V((function(t){var n=r[G]();if(m(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(tt(t))return pt(t);if(nt(t))return e=t,new V((function(t){e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,A)}));if(st(t))return dt(t);if(ut(t))return n=t,new V((function(t){var e,r;try{for(var o=p(n),i=o.next();!i.done;i=o.next()){var u=i.value;if(t.next(u),t.closed)return}}catch(t){e={error:t}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}t.complete()}));if(lt(t))return dt(at(t))}var n,e,r;throw ct(t)}function pt(t){return new V((function(n){for(var e=0;e<t.length&&!n.closed;e++)n.next(t[e]);n.complete()}))}function dt(t){return new V((function(n){(function(t,n){var e,r,o,i,u,s,c,a;return u=this,s=void 0,a=function(){var u,s;return h(this,(function(c){switch(c.label){case 0:c.trys.push([0,5,6,11]),e=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,e=t[Symbol.asyncIterator];return e?e.call(t):(t=p(t),n={},r("next"),r("throw"),r("return"),n[Symbol.asyncIterator]=function(){return this},n);function r(e){n[e]=t[e]&&function(n){return new Promise((function(r,o){!function(t,n,e,r){Promise.resolve(r).then((function(n){t({value:n,done:e})}),n)}(r,o,(n=t[e](n)).done,n.value)}))}}}(t),c.label=1;case 1:return[4,e.next()];case 2:if((r=c.sent()).done)return[3,4];if(u=r.value,n.next(u),n.closed)return[2];c.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=c.sent(),o={error:s},[3,11];case 6:return c.trys.push([6,,9,10]),r&&!r.done&&(i=e.return)?[4,i.call(e)]:[3,8];case 7:c.sent(),c.label=8;case 8:return[3,10];case 9:if(o)throw o.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))},new((c=void 0)||(c=Promise))((function(t,n){function e(t){try{o(a.next(t))}catch(t){n(t)}}function r(t){try{o(a.throw(t))}catch(t){n(t)}}function o(n){var o;n.done?t(n.value):(o=n.value,o instanceof c?o:new c((function(t){t(o)}))).then(e,r)}o((a=a.apply(u,s||[])).next())}))})(t,n).catch((function(t){return n.error(t)}))}))}function vt(t,n,e){return void 0===e&&(e=1/0),m(n)?vt((function(e,r){return X((function(t,o){return n(e,t,r,o)}))(ht(t(e,r)))}),e):("number"==typeof n&&(e=n),$((function(n,r){return function(t,n,e,r,o,i,u,s){var c=[],a=0,l=0,f=!1,h=function(){!f||c.length||a||n.complete()},p=function(t){return a<r?d(t):c.push(t)},d=function(t){a++;var o=!1;ht(e(t,l++)).subscribe(new Q(n,(function(t){n.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{a--;for(;c.length&&a<r;)t=void 0,t=c.shift(),d(t);h()}catch(t){n.error(t)}var t})))};return t.subscribe(new Q(n,p,(function(){f=!0,h()}))),function(){}}(n,r,t,e)})))}var bt=Array.isArray;function yt(t,n){return n?et(t,n):pt(t)}var mt=["addListener","removeListener"],wt=["addEventListener","removeEventListener"],gt=["on","off"];function _t(t,n,e,r){if(m(e)&&(r=e,e=void 0),r)return _t(t,n,e).pipe((o=r,X((function(t){return function(t,n){return bt(n)?t.apply(void 0,v([],d(n))):t(n)}(o,t)}))));var o,i=d(function(t){return m(t.addEventListener)&&m(t.removeEventListener)}(t)?wt.map((function(r){return function(o){return t[r](n,o,e)}})):function(t){return m(t.addListener)&&m(t.removeListener)}(t)?mt.map(It(t,n)):function(t){return m(t.on)&&m(t.off)}(t)?gt.map(It(t,n)):[],2),u=i[0],s=i[1];if(!u&&tt(t))return vt((function(t){return _t(t,n,e)}))(yt(t));if(!u)throw new TypeError("Invalid event target");return new V((function(t){var n=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return t.next(1<n.length?n:n[0])};return u(n),function(){return s(n)}}))}function It(t,n){return function(e){return function(r){return t[e](n,r)}}}var St=Array.isArray;function xt(t){return 1===t.length&&St(t[0])?t[0]:t}var Et=new V((function(t){return t.complete()}));function Tt(t){return t[t.length-1]}function jt(t){return m(Tt(t))?t.pop():void 0}function Pt(t){return(n=Tt(t))&&m(n.schedule)?t.pop():void 0;var n}function Ct(t,n){return"number"==typeof Tt(t)?t.pop():n}function Ot(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=jt(t),r=xt(t);return r.length?new V((function(t){var n=r.map((function(){return[]})),o=r.map((function(){return!1}));t.add((function(){n=o=null}));for(var i=function(i){ht(r[i]).subscribe(new Q(t,(function(r){if(n[i].push(r),n.every((function(t){return t.length}))){var u=n.map((function(t){return t.shift()}));t.next(e?e.apply(void 0,v([],d(u))):u),n.some((function(t,n){return!t.length&&o[n]}))&&t.complete()}}),(function(){o[i]=!0,!n[i].length&&t.complete()})))},u=0;!t.closed&&u<r.length;u++)i(u);return function(){n=o=null}})):Et}function kt(t,n){return $((function(e,r){var o=0;e.subscribe(new Q(r,(function(e){return t.call(n,e,o++)&&r.next(e)})))}))}function At(t){return t<=0?function(){return Et}:$((function(n,e){var r=0;n.subscribe(new Q(e,(function(n){++r<=t&&(e.next(n),t<=r&&e.complete())})))}))}function Nt(t){void 0===t&&(t={});var n=t.connector,e=void 0===n?function(){return new K}:n,r=t.resetOnError,o=void 0===r||r,i=t.resetOnComplete,u=void 0===i||i,s=t.resetOnRefCountZero,c=void 0===s||s;return function(t){var n=null,r=null,i=null,s=0,a=!1,l=!1,f=function(){null==r||r.unsubscribe(),r=null},h=function(){f(),n=i=null,a=l=!1},p=function(){var t=n;h(),null==t||t.unsubscribe()};return $((function(t,d){s++,l||a||f();var v=i=null!=i?i:e();d.add((function(){0!=--s||l||a||(r=Lt(p,c))})),v.subscribe(d),n||(n=new R({next:function(t){return v.next(t)},error:function(t){l=!0,f(),r=Lt(h,o,t),v.error(t)},complete:function(){a=!0,f(),r=Lt(h,u),v.complete()}}),ft(t).subscribe(n))}))(t)}}function Lt(t,n){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];return!0===n?(t(),null):!1===n?null:n.apply(void 0,v([],d(e))).pipe(At(1)).subscribe((function(){return t()}))}function Mt(t,n){return $((function(e,r){var o=null,i=0,u=!1,s=function(){return u&&!o&&r.complete()};e.subscribe(new Q(r,(function(e){null==o||o.unsubscribe();var u=0,c=i++;ht(t(e,c)).subscribe(o=new Q(r,(function(t){return r.next(n?n(e,t,c,u++):t)}),(function(){o=null,s()})))}),(function(){u=!0,s()})))}))}var Ht,Rt="http://localhost:3000/",qt=Rt+"users/",Ft=Rt+"rest/store/firewoodItems/",Yt=Rt+"rest/store/flammableItems/",zt=Rt+"rest/store/firestarterItems/";function Gt(t,n){return m(n)?vt(t,n,1):vt(t,1)}function Ut(t,n,e,r,o){return function(i,u){var s=e,c=n,a=0;i.subscribe(new Q(u,(function(n){var e=a++;c=s?t(c,n,e):(s=!0,n),r&&u.next(c)}),o&&function(){s&&u.next(c),u.complete()}))}}!function(t){t[t.userNotFound=0]="userNotFound"}(Ht||(Ht={}));var Dt=function(t,n){return t.push(n),t};function Vt(){return $((function(t,n){(function(t,n){return $(Ut(t,n,arguments.length>=2,!1,!0))})(Dt,[])(t).subscribe(n)}))}var Bt=function(t,n,e){var r=this;this.flammableItems={},this.firewoodItems={},this.firestarterItems={},t.map((function(t){return r.flammableItems[t.item.name]=t})),n.map((function(t){return r.firewoodItems[t.item.name]=t})),e.map((function(t){return r.firestarterItems[t.item.name]=t}))};var Jt=e(442);function Kt(t,n){return{id:Jt.i.create().toString(),username:t,password:n,gameInfo:null,balance:200,inventory:{firewoodItems:[],flammableItems:[],firestarterItems:[]}}}function Wt(t){return{id:t.id,balance:t.balance,password:t.password,username:t.username,gameInfo:t.gameInfo,inventory:(n=t.inventory,{firestarterItems:Object.getOwnPropertyNames(n.firestarterItems).map((function(t){return new u(n.firestarterItems[t].item.id,n.firestarterItems[t].quantity)})),firewoodItems:Object.getOwnPropertyNames(n.firewoodItems).map((function(t){return new u(n.firewoodItems[t].item.id,n.firewoodItems[t].quantity)})),flammableItems:Object.getOwnPropertyNames(n.flammableItems).map((function(t){return new u(n.flammableItems[t].item.id,n.flammableItems[t].quantity)}))})};var n}function Zt(t,n){var e=function(t,n){return ft(fetch(qt+"?username="+t+"&password="+n).then((function(t){return t.json()})).then((function(t){return t[0]})))}(t,n).pipe(X((function(t){if(!t)throw new Error(Ht.userNotFound.toString());return t})),Nt());return Ot(e.pipe(Mt((function(t){return Ot(ft((n=t.inventory).firewoodItems).pipe(Gt((function(t){return n=t.item,ft(fetch(Ft+""+n).then((function(t){return t.json()})));var n})),kt((function(t){return Object.keys(t).length>0})),X((function(t,e){return new u(t,n.firewoodItems[e].quantity)}))).pipe(Vt()),ft(n.flammableItems).pipe(Gt((function(t){return n=t.item,ft(fetch(Yt+""+n).then((function(t){return t.json()})));var n})),kt((function(t){return Object.keys(t).length>0})),X((function(t,e){return new u(t,n.flammableItems[e].quantity)}))).pipe(Vt()),ft(n.firestarterItems).pipe(Gt((function(t){return n=t.item,ft(fetch(zt+""+n).then((function(t){return t.json()})));var n})),kt((function(t){return Object.keys(t).length>0})),X((function(t,e){return new u(t,n.firestarterItems[e].quantity)}))).pipe(Vt())).pipe(X((function(t){return new Bt(t[1],t[0],t[2])})));var n}))),e).pipe(X((function(t){return n=t[1],e=t[0],{id:n.id,username:n.username,password:n.password,gameInfo:n.gameInfo,inventory:e,balance:n.balance};var n,e})))}var $t=function(){function t(t,e){this._container=n("div",t,"storeContainer",""),this.userSubject=e}return t.prototype.renderContent=function(){var t=this;Ot(ft(fetch(Yt).then((function(t){return t.json()})).then((function(t){return t}))),ft(fetch(Ft).then((function(t){return t.json()})).then((function(t){return t}))),ft(fetch(zt).then((function(t){return t.json()})).then((function(t){return t})))).pipe(X((function(t){return{flammableItems:t[0],firewoodItems:t[1],firestarterItems:t[2]}}))).subscribe((function(n){n.firewoodItems.map((function(n){return t.drawStoreItem(n,a)})),n.flammableItems.map((function(n){return t.drawStoreItem(n,s)})),n.firestarterItems.map((function(n){return t.drawStoreItem(n,c)}))}))},t.prototype.drawStoreItem=function(t,e){var r=n("span",this._container,"storeItemContainer","");i(r,"storeitemImage","src/assets/Images/game/"+t.imageSrc,85,85),n("span",r,"storeItemPrice","<label>"+t.price+"</label> <i class='fa fa-coins'></i>");var o=_t(r,"click").pipe(function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=jt(t);return $((function(n,r){for(var o=t.length,i=new Array(o),u=t.map((function(){return!1})),s=!1,c=function(n){ht(t[n]).subscribe(new Q(r,(function(t){i[n]=t,s||u[n]||(u[n]=!0,(s=u.every(U))&&(u=null))}),N))},a=0;a<o;a++)c(a);n.subscribe(new Q(r,(function(t){if(s){var n=v([t],d(i));r.next(e?e.apply(void 0,v([],d(n))):n)}})))}))}(this.userSubject),kt((function(n){return t.price<=n[1].balance})),X((function(n){return e(n[1],t)})),Nt());Ot(o.pipe(Mt((function(t){return function(t){return ft(fetch("http://localhost:3000/users/"+t.id,{method:"PUT",body:JSON.stringify(Wt(t)),headers:{"Content-Type":"application/json"}}).then((function(t){if(!t.ok)throw Error(Ht.userNotFound.toString());return t})))}(t)}))),o).pipe(X((function(t){return t[1]}))).subscribe(this.userSubject)},t}(),Qt=function(){function t(t,e){this._container=n("div",t,"gameContainer",""),this.userSubject=new Z(e),this.userSubject.subscribe((function(t){return console.log(t)}))}return t.prototype.renderContent=function(){new $t(this._container,this.userSubject).renderContent()},t.prototype.dispose=function(){},t.anyToPageParameter=function(t){if("id"in(n=t)&&"username"in n&&"password"in n&&"gameInfo"in n&&"inventory"in n&&"balance"in n)return t;var n;throw new Error("Invalid GamePage parameter")},t}(),Xt=function(){function e(t){this.mainContainer=t}return e.prototype.renderContent=function(){this._container=n("div",this.mainContainer,"homeContainer",""),n("h1",this._container,"gameTitle","Keep it Lit"),i(this._container,"homeImage","src/assets/Images/thumbMark.jpg",650,420),n("h3",this._container,"gameDescription","This is Mark. He is a web developer.<br> Keep him warm so he may continue creating web apps and eventualy open his own startup.<br> If you do this, he will keep giving you money for fire mantainance material, and the rest is yours to spend :)"),r(this._container,"playButton","PLAY",(function(){ln.Navigator.goTo(t.Login)}))},e}(),tn=function(){function e(t){this._container=n("form",t,"loginForm","")}return e.prototype.renderContent=function(){n("h2",this._container,"loginHeadline","ENTER YOUR CREDENTIALS:");var e=o("text",this._container,"loginInput",!0,"Username"),i=o("password",this._container,"loginInput",!0,"Password");r(this._container,"loginSubmitBtn","Login",null),this._container.onsubmit=function(){return Zt(e.value,i.value).subscribe({next:function(n){return ln.Navigator.goTo(t.Game,n)},error:function(t){t.message===Ht.userNotFound.toString()&&alert("Wrong credentials")}}),!1},n("a",this._container,"dontHaveAcc","I don't have an acount").onclick=function(){return ln.Navigator.goTo(t.Register)}},e}();function nn(t){return void 0===t&&(t=1/0),vt(U,t)}var en=function(t){function n(n,e){return t.call(this)||this}return f(n,t),n.prototype.schedule=function(t,n){return void 0===n&&(n=0),this},n}(I),rn={setInterval:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=rn.delegate;return((null==e?void 0:e.setInterval)||setInterval).apply(void 0,v([],d(t)))},clearInterval:function(t){var n=rn.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(t)},delegate:void 0},on=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r.pending=!1,r}return f(n,t),n.prototype.schedule=function(t,n){if(void 0===n&&(n=0),this.closed)return this;this.state=t;var e=this.id,r=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(r,e,n)),this.pending=!0,this.delay=n,this.id=this.id||this.requestAsyncId(r,this.id,n),this},n.prototype.requestAsyncId=function(t,n,e){return void 0===e&&(e=0),rn.setInterval(t.flush.bind(t,this),e)},n.prototype.recycleAsyncId=function(t,n,e){if(void 0===e&&(e=0),null!=e&&this.delay===e&&!1===this.pending)return n;rn.clearInterval(n)},n.prototype.execute=function(t,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(t,n);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,n){var e,r=!1;try{this.work(t)}catch(t){r=!0,e=!!t&&t||new Error(t)}if(r)return this.unsubscribe(),e},n.prototype.unsubscribe=function(){if(!this.closed){var n=this.id,e=this.scheduler,r=e.actions;this.work=this.state=this.scheduler=null,this.pending=!1,_(r,this),null!=n&&(this.id=this.recycleAsyncId(e,n,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},n}(en),un={now:function(){return(un.delegate||Date).now()},delegate:void 0},sn=function(){function t(n,e){void 0===e&&(e=t.now),this.schedulerActionCtor=n,this.now=e}return t.prototype.schedule=function(t,n,e){return void 0===n&&(n=0),new this.schedulerActionCtor(this,t).schedule(e,n)},t.now=un.now,t}(),cn=new(function(t){function n(n,e){void 0===e&&(e=sn.now);var r=t.call(this,n,e)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return f(n,t),n.prototype.flush=function(t){var n=this.actions;if(this._active)n.push(t);else{var e;this._active=!0;do{if(e=t.execute(t.state,t.delay))break}while(t=n.shift());if(this._active=!1,e){for(;t=n.shift();)t.unsubscribe();throw e}}},n}(sn))(on),an=function(){function e(t){this._container=n("form",t,"registerForm","")}return e.prototype.renderContent=function(){var e=this;n("div",this._container,"","<i class='fas fa-arrow-alt-circle-left backArrow'></i>").onclick=function(){return ln.Navigator.goTo(t.Login)},n("h2",this._container,"registerHeadline","ENTER YOUR CREDENTIALS:");var i,u=o("text",this._container,"registerInput",!0,"Username"),s=n("label",this._container,"registerError errorHidden","Username already taken!");_t(u,"input").pipe((800,void 0===i&&(i=cn),$((function(t,n){var e=null,r=null,o=null,u=function(){if(e){e.unsubscribe(),e=null;var t=r;r=null,n.next(t)}};function s(){var t=o+800,n=i.now();n<t?e=this.schedule(void 0,t-n):u()}t.subscribe(new Q(n,(function(t){r=t,o=i.now(),e||(e=i.schedule(s,800))}),(function(){u(),n.complete()}),void 0,(function(){r=e=null})))}))),X((function(t){return t.target.value})),Mt((function(t){return function(t){return ft(fetch(qt+"?username="+t).then((function(t){return t.json()}))).pipe(X((function(t){return null!=t[0]})))}(t)}))).subscribe((function(t){return t?e.showErrorMessage(s):e.hideErrorMessage(s)}));var c=o("password",this._container,"registerInput",!0,"Password"),a=o("password",this._container,"registerInput",!0,"Password"),l=n("label",this._container,"passwordError errorHidden","Passwords don't match");(function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=Pt(t),r=Ct(t,1/0),o=t;return o.length?1===o.length?ht(o[0]):nn(r)(yt(o,e)):Et})(_t(a,"input"),_t(c,"input")).subscribe((function(){a.value===c.value?e.hideErrorMessage(l):e.showErrorMessage(l)})),r(this._container,"registerSubmitBtn","Register",null),this._container.onsubmit=function(){var n,e;return s.classList.contains("errorVisible")||l.classList.contains("errorVisible")||(n=u.value,e=c.value,ft(fetch("http://localhost:3000/users",{method:"POST",body:JSON.stringify(Kt(n,e)),headers:{"Content-Type":"application/json"}}))).subscribe((function(n){n.ok&&ln.Navigator.goTo(t.Login)})),!1}},e.prototype.showErrorMessage=function(t){t.classList.replace("errorHidden","errorVisible")},e.prototype.hideErrorMessage=function(t){t.classList.replace("errorVisible","errorHidden")},e}(),ln=function(){function n(){this._mainContainer=document.getElementById("main")}return Object.defineProperty(n,"Navigator",{get:function(){var t;return null!==(t=this._navigator)&&void 0!==t?t:this._navigator=new n},enumerable:!1,configurable:!0}),n.prototype.goTo=function(n,e){switch(void 0===e&&(e=null),this.clearMainContainer(),this.disposeSubscriptions(),n){case t.Home:new Xt(this._mainContainer).renderContent();break;case t.Game:var r=new Qt(this._mainContainer,Qt.anyToPageParameter(e));this.pageToDispose=r,r.renderContent();break;case t.Login:new tn(this._mainContainer).renderContent();break;case t.Register:new an(this._mainContainer).renderContent()}},n.prototype.clearMainContainer=function(){this._mainContainer.innerHTML=""},n.prototype.disposeSubscriptions=function(){this.pageToDispose&&this.pageToDispose.dispose()},n}();ln.Navigator.goTo(t.Home)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9ndWlkLXR5cGVzY3JpcHQvZGlzdC9ndWlkLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vc3JjL21pc2MvUGFnZS50cyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL3NyYy9zZXJ2aWNlcy9ET00uc2VydmljZS50cyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL3NyYy9tb2RlbHMvaW52ZW50b3J5LWl0ZW0udHMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9zcmMvbW9kZWxzL3VzZXIudHMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2NyZWF0ZUVycm9yQ2xhc3MuanMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJyUmVtb3ZlLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9jb25maWcuanMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbm9vcC5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lkZW50aXR5LmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvcGlwZS5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9PYnNlcnZhYmxlLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3ViamVjdC5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9CZWhhdmlvclN1YmplY3QuanMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9saWZ0LmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9PcGVyYXRvclN1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21hcC5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNQcm9taXNlLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUFycmF5LmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBc3luY0l0ZXJhYmxlLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0FzeW5jSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UuanMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZWQuanMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVQcm9taXNlLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUl0ZXJhYmxlLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvY2F1Z2h0U2NoZWR1bGUuanMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZU1hcC5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VJbnRlcm5hbHMuanMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9tYXBPbmVPck1hbnlBcmdzLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbUFycmF5LmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbUV2ZW50LmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJnc09yQXJnQXJyYXkuanMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9lbXB0eS5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2FyZ3MuanMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL3ppcC5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvZmlsdGVyLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy90YWtlLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9zaGFyZS5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoTWFwLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vc3JjL21pc2MvQXNzZXRzVVJMLnRzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vc3JjL21pc2MvRXJyb3JDb2Rlcy50cyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL2Vudmlyb25tZW50LnRzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vc3JjL21pc2MvQVBJIFVSTHMudHMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdE1hcC5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc2NhbkludGVybmFscy5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvdG9BcnJheS5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvcmVkdWNlLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vc3JjL21vZGVscy9pbnZlbnRvcnkudHMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9zcmMvbWlzYy9HYW1lQ29uZmlnLnRzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vc3JjL21vZGVscy9EVE9zL3VzZXItZHRvLnRzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vc3JjL21vZGVscy9EVE9zL2ludmVudG9yeS1kdG8udHMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9zcmMvc2VydmljZXMvREIgc2VydmljZXMvdXNlci5zZXJ2aWNlLnRzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vc3JjL3NlcnZpY2VzL0RCIHNlcnZpY2VzL3N0b3JlLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9zcmMvdmlld3MvY29tcG9uZW50cy9zdG9yZS12aWV3LnRzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy93aXRoTGF0ZXN0RnJvbS5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL3NyYy92aWV3cy9wYWdlcy9nYW1lLnRzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vc3JjL3ZpZXdzL3BhZ2VzL2hvbWUudHMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9zcmMvdmlld3MvcGFnZXMvbG9naW4udHMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlQWxsLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9BY3Rpb24uanMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2ludGVydmFsUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FzeW5jQWN0aW9uLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9kYXRlVGltZXN0YW1wUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU2NoZWR1bGVyLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9hc3luYy5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9zcmMvdmlld3MvcGFnZXMvcmVnaXN0ZXIudHMiLCJ3ZWJwYWNrOi8va2VlcC1pdC1saXQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2RlYm91bmNlVGltZS5qcyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL21lcmdlLmpzIiwid2VicGFjazovL2tlZXAtaXQtbGl0Ly4vc3JjL3ZpZXdzL3JvdXRlci50cyIsIndlYnBhY2s6Ly9rZWVwLWl0LWxpdC8uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJHdWlkIiwiZ3VpZCIsIlR5cGVFcnJvciIsInRoaXMiLCJ2YWx1ZSIsIkVNUFRZIiwiaXNHdWlkIiwidG9TdHJpbmciLCJ2YWxpZGF0b3IiLCJ0ZXN0IiwiY3JlYXRlIiwiZ2VuIiwiam9pbiIsImNyZWF0ZUVtcHR5IiwicGFyc2UiLCJyYXciLCJjb3VudCIsIm91dCIsImkiLCJNYXRoIiwicmFuZG9tIiwic3Vic3RyaW5nIiwicHJvdG90eXBlIiwiZXF1YWxzIiwib3RoZXIiLCJpc0VtcHR5IiwidG9KU09OIiwiUmVnRXhwIiwiZXhwb3J0cyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJQYWdlIiwiY3JlYXRlRWxlbWVudCIsImVsZW1lbnRUeXBlIiwicGFyZW50RWxlbWVudCIsImNsYXNzTmFtZSIsImlubmVySFRNTCIsIm5ld0VsZW1lbnQiLCJkb2N1bWVudCIsImFwcGVuZENoaWxkIiwiY3JlYXRlQnV0dG9uIiwib25DbGljayIsIm5ld0J1dHRvbiIsIm9uY2xpY2siLCJjcmVhdGVJbnB1dCIsImlucHV0VHlwZSIsInJlcXVpcmVkIiwicGxhY2Vob2xkZXIiLCJ0eXBlIiwiY3JlYXRlSW1hZ2UiLCJzcmMiLCJ3aWR0aCIsImhlaWdodCIsIkludmVudG9yeUl0ZW0iLCJpdGVtIiwicXVhbnRpdHkiLCJidXlGbGFtbWFibGVJdGVtIiwidXNlciIsImJhbGFuY2UiLCJwcmljZSIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJpbnZlbnRvcnkiLCJmbGFtbWFibGVJdGVtcyIsImluY2x1ZGVzIiwibmFtZSIsImJ1eUZpcmVzdGFydGVySXRlbSIsImZpcmVzdGFydGVySXRlbXMiLCJidXlGaXJld29vZEl0ZW0iLCJmaXJld29vZEl0ZW1zIiwiZXh0ZW5kU3RhdGljcyIsImQiLCJiIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfX2V4dGVuZHMiLCJTdHJpbmciLCJfXyIsImNvbnN0cnVjdG9yIiwiX19nZW5lcmF0b3IiLCJ0aGlzQXJnIiwiYm9keSIsImYiLCJ5IiwidCIsImciLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsIm5leHQiLCJ2ZXJiIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuIiwidiIsIm9wIiwiZG9uZSIsInBvcCIsImxlbmd0aCIsInB1c2giLCJlIiwic3RlcCIsIl9fdmFsdWVzIiwibyIsInMiLCJtIiwiX19yZWFkIiwiciIsImFyIiwiZXJyb3IiLCJfX3NwcmVhZEFycmF5IiwidG8iLCJmcm9tIiwiaWwiLCJqIiwiX19hd2FpdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJfYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwiYXN5bmNJdGVyYXRvciIsImFwcGx5IiwicSIsIlByb21pc2UiLCJhIiwicmVzdW1lIiwicmVzb2x2ZSIsInRoZW4iLCJmdWxmaWxsIiwicmVqZWN0Iiwic2V0dGxlIiwic2hpZnQiLCJpc0Z1bmN0aW9uIiwiY3JlYXRlRXJyb3JDbGFzcyIsImNyZWF0ZUltcGwiLCJjdG9yRnVuYyIsImluc3RhbmNlIiwiRXJyb3IiLCJzdGFjayIsIlVuc3Vic2NyaXB0aW9uRXJyb3IiLCJfc3VwZXIiLCJlcnJvcnMiLCJtZXNzYWdlIiwibWFwIiwiZXJyIiwiYXJyUmVtb3ZlIiwiYXJyIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiU3Vic2NyaXB0aW9uIiwiaW5pdGlhbFRlYXJkb3duIiwiY2xvc2VkIiwiX3BhcmVudGFnZSIsIl90ZWFyZG93bnMiLCJ1bnN1YnNjcmliZSIsImVfMSIsIl9hIiwiZV8yIiwiX2IiLCJpc0FycmF5IiwiX3BhcmVudGFnZV8xIiwiX3BhcmVudGFnZV8xXzEiLCJyZW1vdmUiLCJlXzFfMSIsInJldHVybiIsIl90ZWFyZG93bnNfMSIsIl90ZWFyZG93bnNfMV8xIiwidGVhcmRvd25fMSIsImV4ZWNUZWFyZG93biIsImVfMl8xIiwiYWRkIiwidGVhcmRvd24iLCJfaGFzUGFyZW50IiwiX2FkZFBhcmVudCIsInBhcmVudCIsIl9yZW1vdmVQYXJlbnQiLCJlbXB0eSIsIkVNUFRZX1NVQlNDUklQVElPTiIsImlzU3Vic2NyaXB0aW9uIiwiY29uZmlnIiwidGltZW91dFByb3ZpZGVyIiwic2V0VGltZW91dCIsImFyZ3MiLCJfaSIsImFyZ3VtZW50cyIsImRlbGVnYXRlIiwiY2xlYXJUaW1lb3V0IiwiaGFuZGxlIiwicmVwb3J0VW5oYW5kbGVkRXJyb3IiLCJub29wIiwiQ09NUExFVEVfTk9USUZJQ0FUSU9OIiwiY3JlYXRlTm90aWZpY2F0aW9uIiwia2luZCIsIlN1YnNjcmliZXIiLCJkZXN0aW5hdGlvbiIsIl90aGlzIiwiaXNTdG9wcGVkIiwiRU1QVFlfT0JTRVJWRVIiLCJjb21wbGV0ZSIsIlNhZmVTdWJzY3JpYmVyIiwiaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbiIsIm5leHROb3RpZmljYXRpb24iLCJfbmV4dCIsIl9lcnJvciIsIl9jb21wbGV0ZSIsIm9ic2VydmVyT3JOZXh0IiwiY29udGV4dF8xIiwiYmluZCIsIndyYXBGb3JFcnJvckhhbmRsaW5nIiwiZGVmYXVsdEVycm9ySGFuZGxlciIsImhhbmRsZXIiLCJfc3luY0Vycm9ySGFja19pc1N1YnNjcmliaW5nIiwiX19zeW5jRXJyb3IiLCJub3RpZmljYXRpb24iLCJzdWJzY3JpYmVyIiwib25TdG9wcGVkTm90aWZpY2F0aW9uIiwib2JzZXJ2YWJsZSIsImlkZW50aXR5IiwieCIsInBpcGVGcm9tQXJyYXkiLCJmbnMiLCJpbnB1dCIsInJlZHVjZSIsInByZXYiLCJmbiIsIk9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJfc3Vic2NyaWJlIiwibGlmdCIsIm9wZXJhdG9yIiwic291cmNlIiwiaXNPYnNlcnZlciIsIl9kZXByZWNhdGVkU3luY0Vycm9yU3Vic2NyaWJlIiwiX3RyeVN1YnNjcmliZSIsImxvY2FsU3Vic2NyaWJlciIsImRlc3QiLCJzaW5rIiwiZm9yRWFjaCIsInByb21pc2VDdG9yIiwiZ2V0UHJvbWlzZUN0b3IiLCJzdWJzY3JpcHRpb24iLCJwaXBlIiwib3BlcmF0aW9ucyIsInRvUHJvbWlzZSIsIk9iamVjdFVuc3Vic2NyaWJlZEVycm9yIiwiU3ViamVjdCIsIm9ic2VydmVycyIsImhhc0Vycm9yIiwidGhyb3duRXJyb3IiLCJzdWJqZWN0IiwiQW5vbnltb3VzU3ViamVjdCIsIl90aHJvd0lmQ2xvc2VkIiwiY29weSIsInNsaWNlIiwiY29weV8xIiwiY29weV8xXzEiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJfY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyIsIl9pbm5lclN1YnNjcmliZSIsImFzT2JzZXJ2YWJsZSIsIkJlaGF2aW9yU3ViamVjdCIsIl92YWx1ZSIsImdldFZhbHVlIiwib3BlcmF0ZSIsImluaXQiLCJoYXNMaWZ0IiwibGlmdGVkU291cmNlIiwiT3BlcmF0b3JTdWJzY3JpYmVyIiwib25OZXh0Iiwib25Db21wbGV0ZSIsIm9uRXJyb3IiLCJvbkZpbmFsaXplIiwicHJvamVjdCIsImlzQXJyYXlMaWtlIiwiaXNQcm9taXNlIiwic2NoZWR1bGVBcnJheSIsInNjaGVkdWxlciIsInNjaGVkdWxlIiwic2NoZWR1bGVBc3luY0l0ZXJhYmxlIiwic3ViIiwicmVzdWx0IiwiaXNJbnRlcm9wT2JzZXJ2YWJsZSIsImlzSXRlcmFibGUiLCJpc0FzeW5jSXRlcmFibGUiLCJvYmoiLCJjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciIsInJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IiLCJyZWFkYWJsZVN0cmVhbSIsInJlYWRlciIsImdldFJlYWRlciIsInJlYWQiLCJyZWxlYXNlTG9jayIsImlzUmVhZGFibGVTdHJlYW1MaWtlIiwic2NoZWR1bGVPYnNlcnZhYmxlIiwic2NoZWR1bGVQcm9taXNlIiwiZXhlY3V0ZSIsImRlbGF5IiwiY2F1Z2h0U2NoZWR1bGUiLCJzY2hlZHVsZUl0ZXJhYmxlIiwic2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UiLCJzY2hlZHVsZWQiLCJpbm5lckZyb20iLCJvYnMiLCJmcm9tQXJyYXlMaWtlIiwicHJvbWlzZSIsImZyb21Bc3luY0l0ZXJhYmxlIiwiaXRlcmFibGUiLCJpdGVyYWJsZV8xIiwiaXRlcmFibGVfMV8xIiwiYXJyYXkiLCJhc3luY0l0ZXJhYmxlIiwiYXN5bmNJdGVyYWJsZV8xIiwiYXN5bmNJdGVyYWJsZV8xXzEiLCJQIiwiX19hc3luY1ZhbHVlcyIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicHJvY2VzcyIsImNhdGNoIiwibWVyZ2VNYXAiLCJyZXN1bHRTZWxlY3RvciIsImNvbmN1cnJlbnQiLCJJbmZpbml0eSIsImlpIiwib25CZWZvcmVOZXh0IiwiZXhwYW5kIiwiaW5uZXJTdWJTY2hlZHVsZXIiLCJhZGRpdGlvbmFsVGVhcmRvd24iLCJidWZmZXIiLCJhY3RpdmUiLCJpc0NvbXBsZXRlIiwiY2hlY2tDb21wbGV0ZSIsIm91dGVyTmV4dCIsImRvSW5uZXJTdWIiLCJpbm5lckNvbXBsZXRlIiwiaW5uZXJWYWx1ZSIsImJ1ZmZlcmVkVmFsdWUiLCJtZXJnZUludGVybmFscyIsImludGVybmFsRnJvbUFycmF5Iiwibm9kZUV2ZW50RW1pdHRlck1ldGhvZHMiLCJldmVudFRhcmdldE1ldGhvZHMiLCJqcXVlcnlNZXRob2RzIiwiZnJvbUV2ZW50IiwidGFyZ2V0IiwiZXZlbnROYW1lIiwib3B0aW9ucyIsImNhbGxPckFwcGx5IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc0V2ZW50VGFyZ2V0IiwibWV0aG9kTmFtZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJpc05vZGVTdHlsZUV2ZW50RW1pdHRlciIsInRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5Iiwib24iLCJvZmYiLCJpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyIiwic3ViVGFyZ2V0IiwiYXJnc09yQXJnQXJyYXkiLCJsYXN0IiwicG9wUmVzdWx0U2VsZWN0b3IiLCJwb3BTY2hlZHVsZXIiLCJwb3BOdW1iZXIiLCJkZWZhdWx0VmFsdWUiLCJ6aXAiLCJzb3VyY2VzIiwiYnVmZmVycyIsImNvbXBsZXRlZCIsIl9sb29wXzEiLCJzb3VyY2VJbmRleCIsImV2ZXJ5Iiwic29tZSIsImZpbHRlciIsInByZWRpY2F0ZSIsInRha2UiLCJzZWVuIiwic2hhcmUiLCJjb25uZWN0b3IiLCJyZXNldE9uRXJyb3IiLCJfYyIsInJlc2V0T25Db21wbGV0ZSIsIl9kIiwicmVzZXRPblJlZkNvdW50WmVybyIsIndyYXBwZXJTb3VyY2UiLCJjb25uZWN0aW9uIiwicmVzZXRDb25uZWN0aW9uIiwicmVmQ291bnQiLCJoYXNDb21wbGV0ZWQiLCJoYXNFcnJvcmVkIiwiY2FuY2VsUmVzZXQiLCJyZXNldCIsInJlc2V0QW5kVW5zdWJzY3JpYmUiLCJjb25uIiwiaGFuZGxlUmVzZXQiLCJzd2l0Y2hNYXAiLCJpbm5lclN1YnNjcmliZXIiLCJpbm5lckluZGV4Iiwib3V0ZXJJbmRleCIsIkVycm9yQ29kZXMiLCJCQVNFX1VSTCIsIlVTRVJTX1VSTCIsIkZJUkVXT09EX0lURU1TX1VSTCIsIkZMQU1NQUJMRV9JVEVNU19VUkwiLCJGSVJFU1RBUlRFUl9JVEVNU19VUkwiLCJjb25jYXRNYXAiLCJzY2FuSW50ZXJuYWxzIiwiYWNjdW11bGF0b3IiLCJzZWVkIiwiaGFzU2VlZCIsImVtaXRPbk5leHQiLCJlbWl0QmVmb3JlQ29tcGxldGUiLCJoYXNTdGF0ZSIsInN0YXRlIiwiYXJyUmVkdWNlciIsInRvQXJyYXkiLCJJbnZlbnRvcnkiLCJjcmVhdGVJbml0aWFsVXNlckRUTyIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJpZCIsImdhbWVJbmZvIiwidXNlclRvVXNlckRUTyIsImludiIsInByb3AiLCJnZXRVc2VyT2JzIiwidXNlckR0b09icyIsImZldGNoIiwianNvbiIsInVzZXJzIiwiZ2V0VXNlckR0b09icyIsInVzZXJEdG8iLCJ1c2VyTm90Rm91bmQiLCJpbnZlbnRvcnlEVE8iLCJmaXJld29vZEl0ZW1EVE8iLCJrZXlzIiwiZmxhbW1hYmxlSXRlbURUTyIsImZpcmVzdGFydGVySXRlbURUTyIsIml0ZW1zIiwiemlwcGVkRGF0YSIsInVzZXJEVE8iLCJTdG9yZVZpZXciLCJtYWluQ29udGFpbmVyIiwidXNlclN1YmplY3QiLCJfY29udGFpbmVyIiwicmVuZGVyQ29udGVudCIsInN0b3JlSXRlbXMiLCJzdG9yZSIsImZ3SXRlbSIsImRyYXdTdG9yZUl0ZW0iLCJmbUl0ZW0iLCJmc0l0ZW0iLCJidXlJdGVtQ2FsbGJhY2siLCJpdGVtQ29udGFpbmVyIiwiSU1BR0VTX0xPQ0FUSU9OIiwiaW1hZ2VTcmMiLCJuZXdVc2VyU3RhdGVPYnMiLCJpbnB1dHMiLCJsZW4iLCJvdGhlclZhbHVlcyIsImhhc1ZhbHVlIiwicmVhZHkiLCJ2YWx1ZXMiLCJ3aXRoTGF0ZXN0RnJvbSIsImV2VXNlciIsImV2QW5kVXNlciIsIm1ldGhvZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJoZWFkZXJzIiwicmVzcG9uc2UiLCJvayIsInVwZGF0ZVVzZXJPYnMiLCJHYW1lIiwicGFyYW1ldGVyIiwiY29uc29sZSIsImxvZyIsImRpc3Bvc2UiLCJhbnlUb1BhZ2VQYXJhbWV0ZXIiLCJvYmplY3QiLCJIb21lIiwiUm91dGVyIiwiTmF2aWdhdG9yIiwiZ29UbyIsIkxvZ2luIiwidXNlcm5hbWVJbnB1dCIsInBhc3N3b3JkSW5wdXQiLCJvbnN1Ym1pdCIsImFsZXJ0IiwiUmVnaXN0ZXIiLCJtZXJnZUFsbCIsIkFjdGlvbiIsIndvcmsiLCJpbnRlcnZhbFByb3ZpZGVyIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiQXN5bmNBY3Rpb24iLCJwZW5kaW5nIiwicmVjeWNsZUFzeW5jSWQiLCJyZXF1ZXN0QXN5bmNJZCIsIl9pZCIsImZsdXNoIiwiX3NjaGVkdWxlciIsIl9leGVjdXRlIiwiX2RlbGF5IiwiZXJyb3JWYWx1ZSIsImVycm9yZWQiLCJhY3Rpb25zIiwiZGF0ZVRpbWVzdGFtcFByb3ZpZGVyIiwibm93IiwiRGF0ZSIsIlNjaGVkdWxlciIsInNjaGVkdWxlckFjdGlvbkN0b3IiLCJhc3luY1NjaGVkdWxlciIsIkFzeW5jU2NoZWR1bGVyIiwiU2NoZWR1bGVyQWN0aW9uIiwiX2FjdGl2ZSIsIl9zY2hlZHVsZWQiLCJhY3Rpb24iLCJ1c2VybmFtZUVycm9yTGFiZWwiLCJhY3RpdmVUYXNrIiwibGFzdFZhbHVlIiwibGFzdFRpbWUiLCJlbWl0IiwiZW1pdFdoZW5JZGxlIiwidGFyZ2V0VGltZSIsImV2IiwiY2hlY2tVc2VybmFtZUV4aXN0c09icyIsImV4aXN0cyIsInNob3dFcnJvck1lc3NhZ2UiLCJoaWRlRXJyb3JNZXNzYWdlIiwicmVwZWF0UGFzc3dvcmRJbnB1dCIsInBhc3Nzd29yZEVycm9yTGFiZWwiLCJtZXJnZSIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiZXJyb3JMYWJlbCIsInJlcGxhY2UiLCJfbWFpbkNvbnRhaW5lciIsImdldEVsZW1lbnRCeUlkIiwiX25hdmlnYXRvciIsInBhZ2VOYW1lIiwicGFnZVBhcmFtIiwiY2xlYXJNYWluQ29udGFpbmVyIiwiZGlzcG9zZVN1YnNjcmlwdGlvbnMiLCJnYW1lIiwicGFnZVRvRGlzcG9zZSJdLCJtYXBwaW5ncyI6IjtzQ0FFQSxJQUFJQSxFQUFzQixXQUN0QixTQUFTQSxFQUFLQyxHQUNWLElBQUtBLEVBQ0QsTUFBTSxJQUFJQyxVQUFVLDJDQUV4QkMsS0FBS0MsTUFBUUosRUFBS0ssTUFDZEosR0FBUUQsRUFBS00sT0FBT0wsS0FDcEJFLEtBQUtDLE1BQVFILEdBNkNyQixPQTFDQUQsRUFBS00sT0FBUyxTQUFVTCxHQUNwQixJQUFJRyxFQUFRSCxFQUFLTSxXQUNqQixPQUFPTixJQUFTQSxhQUFnQkQsR0FBUUEsRUFBS1EsVUFBVUMsS0FBS0wsS0FFaEVKLEVBQUtVLE9BQVMsV0FDVixPQUFPLElBQUlWLEVBQUssQ0FBQ0EsRUFBS1csSUFBSSxHQUFJWCxFQUFLVyxJQUFJLEdBQUlYLEVBQUtXLElBQUksR0FBSVgsRUFBS1csSUFBSSxHQUFJWCxFQUFLVyxJQUFJLElBQUlDLEtBQUssT0FFM0ZaLEVBQUthLFlBQWMsV0FDZixPQUFPLElBQUliLEVBQUssY0FFcEJBLEVBQUtjLE1BQVEsU0FBVWIsR0FDbkIsT0FBTyxJQUFJRCxFQUFLQyxJQUVwQkQsRUFBS2UsSUFBTSxXQUNQLE1BQU8sQ0FBQ2YsRUFBS1csSUFB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RUFBT3pkLFVBQVV1aEIsbUJBQXFCLFdBQ2xDMWlCLEtBQUtxaUIsZUFBZS9mLFVBQVksSUFFcENzYyxFQUFPemQsVUFBVXdoQixxQkFBdUIsV0FDaEMzaUIsS0FBSzZpQixlQUNMN2lCLEtBQUs2aUIsY0FBY3JFLFdBRXBCSSxFQXZDZ0IsR0NIM0JBLEdBQU9DLFVBQVVDLEtBQUs3YyxFQUFLMGMsTyIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxudmFyIEd1aWQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBHdWlkKGd1aWQpIHtcclxuICAgICAgICBpZiAoIWd1aWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXJndW1lbnQ7IGB2YWx1ZWAgaGFzIG5vIHZhbHVlLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IEd1aWQuRU1QVFk7XHJcbiAgICAgICAgaWYgKGd1aWQgJiYgR3VpZC5pc0d1aWQoZ3VpZCkpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGd1aWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgR3VpZC5pc0d1aWQgPSBmdW5jdGlvbiAoZ3VpZCkge1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IGd1aWQudG9TdHJpbmcoKTtcclxuICAgICAgICByZXR1cm4gZ3VpZCAmJiAoZ3VpZCBpbnN0YW5jZW9mIEd1aWQgfHwgR3VpZC52YWxpZGF0b3IudGVzdCh2YWx1ZSkpO1xyXG4gICAgfTtcclxuICAgIEd1aWQuY3JlYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgR3VpZChbR3VpZC5nZW4oMiksIEd1aWQuZ2VuKDEpLCBHdWlkLmdlbigxKSwgR3VpZC5nZW4oMSksIEd1aWQuZ2VuKDMpXS5qb2luKFwiLVwiKSk7XHJcbiAgICB9O1xyXG4gICAgR3VpZC5jcmVhdGVFbXB0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEd1aWQoXCJlbXB0eWd1aWRcIik7XHJcbiAgICB9O1xyXG4gICAgR3VpZC5wYXJzZSA9IGZ1bmN0aW9uIChndWlkKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBHdWlkKGd1aWQpO1xyXG4gICAgfTtcclxuICAgIEd1aWQucmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBbR3VpZC5nZW4oMiksIEd1aWQuZ2VuKDEpLCBHdWlkLmdlbigxKSwgR3VpZC5nZW4oMSksIEd1aWQuZ2VuKDMpXS5qb2luKFwiLVwiKTtcclxuICAgIH07XHJcbiAgICBHdWlkLmdlbiA9IGZ1bmN0aW9uIChjb3VudCkge1xyXG4gICAgICAgIHZhciBvdXQgPSBcIlwiO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYml0d2lzZVxyXG4gICAgICAgICAgICBvdXQgKz0gKCgoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMCkgfCAwKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfTtcclxuICAgIEd1aWQucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIC8vIENvbXBhcmluZyBzdHJpbmcgYHZhbHVlYCBhZ2FpbnN0IHByb3ZpZGVkIGBndWlkYCB3aWxsIGF1dG8tY2FsbFxyXG4gICAgICAgIC8vIHRvU3RyaW5nIG9uIGBndWlkYCBmb3IgY29tcGFyaXNvblxyXG4gICAgICAgIHJldHVybiBHdWlkLmlzR3VpZChvdGhlcikgJiYgdGhpcy52YWx1ZSA9PT0gb3RoZXIudG9TdHJpbmcoKTtcclxuICAgIH07XHJcbiAgICBHdWlkLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID09PSBHdWlkLkVNUFRZO1xyXG4gICAgfTtcclxuICAgIEd1aWQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gICAgfTtcclxuICAgIEd1aWQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgR3VpZC52YWxpZGF0b3IgPSBuZXcgUmVnRXhwKFwiXlthLXowLTldezh9LVthLXowLTldezR9LVthLXowLTldezR9LVthLXowLTldezR9LVthLXowLTldezEyfSRcIiwgXCJpXCIpO1xyXG4gICAgR3VpZC5FTVBUWSA9IFwiMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwXCI7XHJcbiAgICByZXR1cm4gR3VpZDtcclxufSgpKTtcclxuZXhwb3J0cy5HdWlkID0gR3VpZDtcclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsImV4cG9ydCB2YXIgUGFnZTtcclxuKGZ1bmN0aW9uIChQYWdlKSB7XHJcbiAgICBQYWdlW1BhZ2VbXCJIb21lXCJdID0gMF0gPSBcIkhvbWVcIjtcclxuICAgIFBhZ2VbUGFnZVtcIkdhbWVcIl0gPSAxXSA9IFwiR2FtZVwiO1xyXG4gICAgUGFnZVtQYWdlW1wiTG9naW5cIl0gPSAyXSA9IFwiTG9naW5cIjtcclxuICAgIFBhZ2VbUGFnZVtcIlJlZ2lzdGVyXCJdID0gM10gPSBcIlJlZ2lzdGVyXCI7XHJcbn0pKFBhZ2UgfHwgKFBhZ2UgPSB7fSkpO1xyXG4iLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlRWxlbWVudChlbGVtZW50VHlwZSwgcGFyZW50RWxlbWVudCwgY2xhc3NOYW1lLCBpbm5lckhUTUwpIHtcclxuICAgIHZhciBuZXdFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbGVtZW50VHlwZSk7XHJcbiAgICBuZXdFbGVtZW50LmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcclxuICAgIG5ld0VsZW1lbnQuaW5uZXJIVE1MID0gaW5uZXJIVE1MO1xyXG4gICAgcGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChuZXdFbGVtZW50KTtcclxuICAgIHJldHVybiBuZXdFbGVtZW50O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCdXR0b24ocGFyZW50RWxlbWVudCwgY2xhc3NOYW1lLCBpbm5lckhUTUwsIG9uQ2xpY2spIHtcclxuICAgIHZhciBuZXdCdXR0b24gPSBjcmVhdGVFbGVtZW50KCdidXR0b24nLCBwYXJlbnRFbGVtZW50LCBjbGFzc05hbWUsIGlubmVySFRNTCk7XHJcbiAgICBuZXdCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAob25DbGljaylcclxuICAgICAgICAgICAgb25DbGljaygpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBuZXdCdXR0b247XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUlucHV0KGlucHV0VHlwZSwgcGFyZW50RWxlbWVudCwgY2xhc3NOYW1lLCByZXF1aXJlZCwgcGxhY2Vob2xkZXIpIHtcclxuICAgIHZhciBuZXdFbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnaW5wdXQnLCBwYXJlbnRFbGVtZW50LCBjbGFzc05hbWUsICcnKTtcclxuICAgIG5ld0VsZW1lbnQucmVxdWlyZWQgPSByZXF1aXJlZDtcclxuICAgIG5ld0VsZW1lbnQudHlwZSA9IGlucHV0VHlwZTtcclxuICAgIG5ld0VsZW1lbnQucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcclxuICAgIHJldHVybiBuZXdFbGVtZW50O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbWFnZShwYXJlbnRFbGVtZW50LCBjbGFzc05hbWUsIHNyYywgd2lkdGgsIGhlaWdodCkge1xyXG4gICAgdmFyIG5ld0VsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdpbWcnLCBwYXJlbnRFbGVtZW50LCBjbGFzc05hbWUsICcnKTtcclxuICAgIG5ld0VsZW1lbnQuc3JjID0gc3JjO1xyXG4gICAgbmV3RWxlbWVudC53aWR0aCA9IHdpZHRoO1xyXG4gICAgbmV3RWxlbWVudC5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICByZXR1cm4gbmV3RWxlbWVudDtcclxufVxyXG4iLCJ2YXIgSW52ZW50b3J5SXRlbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEludmVudG9yeUl0ZW0oaXRlbSwgcXVhbnRpdHkpIHtcclxuICAgICAgICB0aGlzLml0ZW0gPSBpdGVtO1xyXG4gICAgICAgIHRoaXMucXVhbnRpdHkgPSBxdWFudGl0eTtcclxuICAgIH1cclxuICAgIHJldHVybiBJbnZlbnRvcnlJdGVtO1xyXG59KCkpO1xyXG5leHBvcnQgeyBJbnZlbnRvcnlJdGVtIH07XHJcbiIsImltcG9ydCB7IEludmVudG9yeUl0ZW0gfSBmcm9tIFwiLi9pbnZlbnRvcnktaXRlbVwiO1xyXG52YXIgVXNlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFVzZXIoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gVXNlcjtcclxufSgpKTtcclxuZXhwb3J0IHsgVXNlciB9O1xyXG5leHBvcnQgZnVuY3Rpb24gaXNVc2VyKG9iamVjdCkge1xyXG4gICAgaWYgKFwiaWRcIiBpbiBvYmplY3QgJiZcclxuICAgICAgICBcInVzZXJuYW1lXCIgaW4gb2JqZWN0ICYmXHJcbiAgICAgICAgXCJwYXNzd29yZFwiIGluIG9iamVjdCAmJlxyXG4gICAgICAgIFwiZ2FtZUluZm9cIiBpbiBvYmplY3QgJiZcclxuICAgICAgICBcImludmVudG9yeVwiIGluIG9iamVjdCAmJlxyXG4gICAgICAgIFwiYmFsYW5jZVwiIGluIG9iamVjdClcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gYnV5RmxhbW1hYmxlSXRlbSh1c2VyLCBpdGVtKSB7XHJcbiAgICB1c2VyLmJhbGFuY2UgLT0gaXRlbS5wcmljZTtcclxuICAgIGlmICghT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModXNlci5pbnZlbnRvcnkuZmxhbW1hYmxlSXRlbXMpLmluY2x1ZGVzKGl0ZW0ubmFtZSkpIHtcclxuICAgICAgICB1c2VyLmludmVudG9yeS5mbGFtbWFibGVJdGVtc1tpdGVtLm5hbWVdID0gbmV3IEludmVudG9yeUl0ZW0oaXRlbSwgMCk7XHJcbiAgICB9XHJcbiAgICB1c2VyLmludmVudG9yeS5mbGFtbWFibGVJdGVtc1tpdGVtLm5hbWVdLnF1YW50aXR5Kys7XHJcbiAgICByZXR1cm4gdXNlcjtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gYnV5RmlyZXN0YXJ0ZXJJdGVtKHVzZXIsIGl0ZW0pIHtcclxuICAgIHVzZXIuYmFsYW5jZSAtPSBpdGVtLnByaWNlO1xyXG4gICAgaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh1c2VyLmludmVudG9yeS5maXJlc3RhcnRlckl0ZW1zKS5pbmNsdWRlcyhpdGVtLm5hbWUpKSB7XHJcbiAgICAgICAgdXNlci5pbnZlbnRvcnkuZmlyZXN0YXJ0ZXJJdGVtc1tpdGVtLm5hbWVdID0gbmV3IEludmVudG9yeUl0ZW0oaXRlbSwgMCk7XHJcbiAgICB9XHJcbiAgICB1c2VyLmludmVudG9yeS5maXJlc3RhcnRlckl0ZW1zW2l0ZW0ubmFtZV0ucXVhbnRpdHkrKztcclxuICAgIHJldHVybiB1c2VyO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBidXlGaXJld29vZEl0ZW0odXNlciwgaXRlbSkge1xyXG4gICAgdXNlci5iYWxhbmNlIC09IGl0ZW0ucHJpY2U7XHJcbiAgICBpZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHVzZXIuaW52ZW50b3J5LmZpcmV3b29kSXRlbXMpLmluY2x1ZGVzKGl0ZW0ubmFtZSkpIHtcclxuICAgICAgICB1c2VyLmludmVudG9yeS5maXJld29vZEl0ZW1zW2l0ZW0ubmFtZV0gPSBuZXcgSW52ZW50b3J5SXRlbShpdGVtLCAwKTtcclxuICAgIH1cclxuICAgIHVzZXIuaW52ZW50b3J5LmZpcmV3b29kSXRlbXNbaXRlbS5uYW1lXS5xdWFudGl0eSsrO1xyXG4gICAgcmV0dXJuIHVzZXI7XHJcbn1cclxuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20pIHtcclxuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxyXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcclxuICAgIHJldHVybiB0bztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHByaXZhdGVNYXAuc2V0KHJlY2VpdmVyLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuIiwiZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNGdW5jdGlvbi5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlRXJyb3JDbGFzcyhjcmVhdGVJbXBsKSB7XG4gICAgdmFyIF9zdXBlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICBFcnJvci5jYWxsKGluc3RhbmNlKTtcbiAgICAgICAgaW5zdGFuY2Uuc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICB9O1xuICAgIHZhciBjdG9yRnVuYyA9IGNyZWF0ZUltcGwoX3N1cGVyKTtcbiAgICBjdG9yRnVuYy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gICAgY3RvckZ1bmMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvckZ1bmM7XG4gICAgcmV0dXJuIGN0b3JGdW5jO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlRXJyb3JDbGFzcy5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVFcnJvckNsYXNzIH0gZnJvbSAnLi9jcmVhdGVFcnJvckNsYXNzJztcbmV4cG9ydCB2YXIgVW5zdWJzY3JpcHRpb25FcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3MoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbChlcnJvcnMpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvcnNcbiAgICAgICAgICAgID8gZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XFxuXCIgKyBlcnJvcnMubWFwKGZ1bmN0aW9uIChlcnIsIGkpIHsgcmV0dXJuIGkgKyAxICsgXCIpIFwiICsgZXJyLnRvU3RyaW5nKCk7IH0pLmpvaW4oJ1xcbiAgJylcbiAgICAgICAgICAgIDogJyc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdVbnN1YnNjcmlwdGlvbkVycm9yJztcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5zdWJzY3JpcHRpb25FcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gYXJyUmVtb3ZlKGFyciwgaXRlbSkge1xuICAgIGlmIChhcnIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgICAgIDAgPD0gaW5kZXggJiYgYXJyLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJyUmVtb3ZlLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSwgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBVbnN1YnNjcmlwdGlvbkVycm9yIH0gZnJvbSAnLi91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi91dGlsL2FyclJlbW92ZSc7XG52YXIgU3Vic2NyaXB0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oaW5pdGlhbFRlYXJkb3duKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbFRlYXJkb3duID0gaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLl90ZWFyZG93bnMgPSBudWxsO1xuICAgIH1cbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZV8xLCBfYSwgZV8yLCBfYjtcbiAgICAgICAgdmFyIGVycm9ycztcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgICAgICBpZiAoX3BhcmVudGFnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9wYXJlbnRhZ2VfMSA9IF9fdmFsdWVzKF9wYXJlbnRhZ2UpLCBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCk7ICFfcGFyZW50YWdlXzFfMS5kb25lOyBfcGFyZW50YWdlXzFfMSA9IF9wYXJlbnRhZ2VfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBfcGFyZW50YWdlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRfMS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfcGFyZW50YWdlXzFfMSAmJiAhX3BhcmVudGFnZV8xXzEuZG9uZSAmJiAoX2EgPSBfcGFyZW50YWdlXzEucmV0dXJuKSkgX2EuY2FsbChfcGFyZW50YWdlXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfcGFyZW50YWdlLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaW5pdGlhbFRlYXJkb3duID0gdGhpcy5pbml0aWFsVGVhcmRvd247XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihpbml0aWFsVGVhcmRvd24pKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFRlYXJkb3duKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGUgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yID8gZS5lcnJvcnMgOiBbZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF90ZWFyZG93bnMgPSB0aGlzLl90ZWFyZG93bnM7XG4gICAgICAgICAgICBpZiAoX3RlYXJkb3ducykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RlYXJkb3ducyA9IG51bGw7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX3RlYXJkb3duc18xID0gX192YWx1ZXMoX3RlYXJkb3ducyksIF90ZWFyZG93bnNfMV8xID0gX3RlYXJkb3duc18xLm5leHQoKTsgIV90ZWFyZG93bnNfMV8xLmRvbmU7IF90ZWFyZG93bnNfMV8xID0gX3RlYXJkb3duc18xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlYXJkb3duXzEgPSBfdGVhcmRvd25zXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlY1RlYXJkb3duKHRlYXJkb3duXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyAhPT0gbnVsbCAmJiBlcnJvcnMgIT09IHZvaWQgMCA/IGVycm9ycyA6IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGVycm9ycykpLCBfX3JlYWQoZXJyLmVycm9ycykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGVhcmRvd25zXzFfMSAmJiAhX3RlYXJkb3duc18xXzEuZG9uZSAmJiAoX2IgPSBfdGVhcmRvd25zXzEucmV0dXJuKSkgX2IuY2FsbChfdGVhcmRvd25zXzEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuc3Vic2NyaXB0aW9uRXJyb3IoZXJyb3JzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGVhcmRvd24gJiYgdGVhcmRvd24gIT09IHRoaXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIGV4ZWNUZWFyZG93bih0ZWFyZG93bik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGVhcmRvd24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duLmNsb3NlZCB8fCB0ZWFyZG93bi5faGFzUGFyZW50KHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGVhcmRvd24uX2FkZFBhcmVudCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKHRoaXMuX3RlYXJkb3ducyA9IChfYSA9IHRoaXMuX3RlYXJkb3ducykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10pLnB1c2godGVhcmRvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9oYXNQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICByZXR1cm4gX3BhcmVudGFnZSA9PT0gcGFyZW50IHx8IChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpICYmIF9wYXJlbnRhZ2UuaW5jbHVkZXMocGFyZW50KSk7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9hZGRQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpID8gKF9wYXJlbnRhZ2UucHVzaChwYXJlbnQpLCBfcGFyZW50YWdlKSA6IF9wYXJlbnRhZ2UgPyBbX3BhcmVudGFnZSwgcGFyZW50XSA6IHBhcmVudDtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX3JlbW92ZVBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIGlmIChfcGFyZW50YWdlID09PSBwYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSkge1xuICAgICAgICAgICAgYXJyUmVtb3ZlKF9wYXJlbnRhZ2UsIHBhcmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfdGVhcmRvd25zID0gdGhpcy5fdGVhcmRvd25zO1xuICAgICAgICBfdGVhcmRvd25zICYmIGFyclJlbW92ZShfdGVhcmRvd25zLCB0ZWFyZG93bik7XG4gICAgICAgIGlmICh0ZWFyZG93biBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGVhcmRvd24uX3JlbW92ZVBhcmVudCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLkVNUFRZID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVtcHR5ID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICBlbXB0eS5jbG9zZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgfSkoKTtcbiAgICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpKTtcbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiB9O1xuZXhwb3J0IHZhciBFTVBUWV9TVUJTQ1JJUFRJT04gPSBTdWJzY3JpcHRpb24uRU1QVFk7XG5leHBvcnQgZnVuY3Rpb24gaXNTdWJzY3JpcHRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uIHx8XG4gICAgICAgICh2YWx1ZSAmJiAnY2xvc2VkJyBpbiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnJlbW92ZSkgJiYgaXNGdW5jdGlvbih2YWx1ZS5hZGQpICYmIGlzRnVuY3Rpb24odmFsdWUudW5zdWJzY3JpYmUpKSk7XG59XG5mdW5jdGlvbiBleGVjVGVhcmRvd24odGVhcmRvd24pIHtcbiAgICBpZiAoaXNGdW5jdGlvbih0ZWFyZG93bikpIHtcbiAgICAgICAgdGVhcmRvd24oKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRlYXJkb3duLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaXB0aW9uLmpzLm1hcCIsImV4cG9ydCB2YXIgY29uZmlnID0ge1xuICAgIG9uVW5oYW5kbGVkRXJyb3I6IG51bGwsXG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uOiBudWxsLFxuICAgIFByb21pc2U6IHVuZGVmaW5lZCxcbiAgICB1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nOiBmYWxzZSxcbiAgICB1c2VEZXByZWNhdGVkTmV4dENvbnRleHQ6IGZhbHNlLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmV4cG9ydCB2YXIgdGltZW91dFByb3ZpZGVyID0ge1xuICAgIHNldFRpbWVvdXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5zZXRUaW1lb3V0KSB8fCBzZXRUaW1lb3V0KS5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpO1xuICAgIH0sXG4gICAgY2xlYXJUaW1lb3V0OiBmdW5jdGlvbiAoaGFuZGxlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IHRpbWVvdXRQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNsZWFyVGltZW91dCkgfHwgY2xlYXJUaW1lb3V0KShoYW5kbGUpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0UHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4uL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHJlcG9ydFVuaGFuZGxlZEVycm9yKGVycikge1xuICAgIHRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9uVW5oYW5kbGVkRXJyb3IgPSBjb25maWcub25VbmhhbmRsZWRFcnJvcjtcbiAgICAgICAgaWYgKG9uVW5oYW5kbGVkRXJyb3IpIHtcbiAgICAgICAgICAgIG9uVW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwb3J0VW5oYW5kbGVkRXJyb3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7IH1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vb3AuanMubWFwIiwiZXhwb3J0IHZhciBDT01QTEVURV9OT1RJRklDQVRJT04gPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdDJywgdW5kZWZpbmVkLCB1bmRlZmluZWQpOyB9KSgpO1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yTm90aWZpY2F0aW9uKGVycm9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignRScsIHVuZGVmaW5lZCwgZXJyb3IpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5leHROb3RpZmljYXRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdOJywgdmFsdWUsIHVuZGVmaW5lZCk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm90aWZpY2F0aW9uKGtpbmQsIHZhbHVlLCBlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzLCBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBpc1N1YnNjcmlwdGlvbiwgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgcmVwb3J0VW5oYW5kbGVkRXJyb3IgfSBmcm9tICcuL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3InO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4vdXRpbC9ub29wJztcbmltcG9ydCB7IG5leHROb3RpZmljYXRpb24sIGVycm9yTm90aWZpY2F0aW9uLCBDT01QTEVURV9OT1RJRklDQVRJT04gfSBmcm9tICcuL05vdGlmaWNhdGlvbkZhY3Rvcmllcyc7XG5pbXBvcnQgeyB0aW1lb3V0UHJvdmlkZXIgfSBmcm9tICcuL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xudmFyIFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbikge1xuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgICAgIGlmIChpc1N1YnNjcmlwdGlvbihkZXN0aW5hdGlvbikpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5hZGQoX3RoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBFTVBUWV9PQlNFUlZFUjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YnNjcmliZXIuY3JlYXRlID0gZnVuY3Rpb24gKG5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFNhZmVTdWJzY3JpYmVyKG5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihlcnJvck5vdGlmaWNhdGlvbihlcnIpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oQ09NUExFVEVfTk9USUZJQ0FUSU9OLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3Vic2NyaWJlcjtcbn0oU3Vic2NyaXB0aW9uKSk7XG5leHBvcnQgeyBTdWJzY3JpYmVyIH07XG52YXIgU2FmZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTYWZlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYWZlU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIHZhciBuZXh0O1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnNlcnZlck9yTmV4dCkpIHtcbiAgICAgICAgICAgIG5leHQgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvYnNlcnZlck9yTmV4dCkge1xuICAgICAgICAgICAgKG5leHQgPSBvYnNlcnZlck9yTmV4dC5uZXh0LCBlcnJvciA9IG9ic2VydmVyT3JOZXh0LmVycm9yLCBjb21wbGV0ZSA9IG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlKTtcbiAgICAgICAgICAgIHZhciBjb250ZXh0XzE7XG4gICAgICAgICAgICBpZiAoX3RoaXMgJiYgY29uZmlnLnVzZURlcHJlY2F0ZWROZXh0Q29udGV4dCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMSA9IE9iamVjdC5jcmVhdGUob2JzZXJ2ZXJPck5leHQpO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHQgPSBuZXh0ID09PSBudWxsIHx8IG5leHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5leHQuYmluZChjb250ZXh0XzEpO1xuICAgICAgICAgICAgZXJyb3IgPSBlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3IuYmluZChjb250ZXh0XzEpO1xuICAgICAgICAgICAgY29tcGxldGUgPSBjb21wbGV0ZSA9PT0gbnVsbCB8fCBjb21wbGV0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29tcGxldGUuYmluZChjb250ZXh0XzEpO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0ge1xuICAgICAgICAgICAgbmV4dDogbmV4dCA/IHdyYXBGb3JFcnJvckhhbmRsaW5nKG5leHQsIF90aGlzKSA6IG5vb3AsXG4gICAgICAgICAgICBlcnJvcjogd3JhcEZvckVycm9ySGFuZGxpbmcoZXJyb3IgIT09IG51bGwgJiYgZXJyb3IgIT09IHZvaWQgMCA/IGVycm9yIDogZGVmYXVsdEVycm9ySGFuZGxlciwgX3RoaXMpLFxuICAgICAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlID8gd3JhcEZvckVycm9ySGFuZGxpbmcoY29tcGxldGUsIF90aGlzKSA6IG5vb3AsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFNhZmVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBTYWZlU3Vic2NyaWJlciB9O1xuZnVuY3Rpb24gd3JhcEZvckVycm9ySGFuZGxpbmcoaGFuZGxlciwgaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBoYW5kbGVyLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLl9zeW5jRXJyb3JIYWNrX2lzU3Vic2NyaWJpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuX19zeW5jRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVwb3J0VW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBkZWZhdWx0RXJyb3JIYW5kbGVyKGVycikge1xuICAgIHRocm93IGVycjtcbn1cbmZ1bmN0aW9uIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKSB7XG4gICAgdmFyIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiA9IGNvbmZpZy5vblN0b3BwZWROb3RpZmljYXRpb247XG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uICYmIHRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9uU3RvcHBlZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIHN1YnNjcmliZXIpOyB9KTtcbn1cbmV4cG9ydCB2YXIgRU1QVFlfT0JTRVJWRVIgPSB7XG4gICAgY2xvc2VkOiB0cnVlLFxuICAgIG5leHQ6IG5vb3AsXG4gICAgZXJyb3I6IGRlZmF1bHRFcnJvckhhbmRsZXIsXG4gICAgY29tcGxldGU6IG5vb3AsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaWJlci5qcy5tYXAiLCJleHBvcnQgdmFyIG9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUpIHx8ICdAQG9ic2VydmFibGUnOyB9KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgIHJldHVybiB4O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRlbnRpdHkuanMubWFwIiwiaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuL2lkZW50aXR5JztcbmV4cG9ydCBmdW5jdGlvbiBwaXBlKCkge1xuICAgIHZhciBmbnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBmbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkoZm5zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwaXBlRnJvbUFycmF5KGZucykge1xuICAgIGlmIChmbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICB9XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGZuc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBpcGVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBmbnMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBmbikgeyByZXR1cm4gZm4ocHJldik7IH0sIGlucHV0KTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwZS5qcy5tYXAiLCJpbXBvcnQgeyBTYWZlU3Vic2NyaWJlciwgU3Vic2NyaWJlciB9IGZyb20gJy4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBpc1N1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IHBpcGVGcm9tQXJyYXkgfSBmcm9tICcuL3V0aWwvcGlwZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xudmFyIE9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlKSB7XG4gICAgICAgIGlmIChzdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xuICAgICAgICBvYnNlcnZhYmxlLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBpc1N1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQpID8gb2JzZXJ2ZXJPck5leHQgOiBuZXcgU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgdGhpcy5fZGVwcmVjYXRlZFN5bmNFcnJvclN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIG9wZXJhdG9yID0gX2Eub3BlcmF0b3IsIHNvdXJjZSA9IF9hLnNvdXJjZTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKG9wZXJhdG9yXG4gICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvci5jYWxsKHN1YnNjcmliZXIsIHNvdXJjZSlcbiAgICAgICAgICAgICAgICA6IHNvdXJjZVxuICAgICAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUoc3Vic2NyaWJlcilcbiAgICAgICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJ5U3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl9kZXByZWNhdGVkU3luY0Vycm9yU3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGxvY2FsU3Vic2NyaWJlciA9IHN1YnNjcmliZXI7XG4gICAgICAgIGxvY2FsU3Vic2NyaWJlci5fc3luY0Vycm9ySGFja19pc1N1YnNjcmliaW5nID0gdHJ1ZTtcbiAgICAgICAgdmFyIG9wZXJhdG9yID0gdGhpcy5vcGVyYXRvcjtcbiAgICAgICAgaWYgKG9wZXJhdG9yKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChvcGVyYXRvci5jYWxsKHN1YnNjcmliZXIsIHRoaXMuc291cmNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKHRoaXMuX3N1YnNjcmliZShzdWJzY3JpYmVyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxTdWJzY3JpYmVyLl9fc3luY0Vycm9yID0gZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBkZXN0ID0gbG9jYWxTdWJzY3JpYmVyO1xuICAgICAgICB3aGlsZSAoZGVzdCkge1xuICAgICAgICAgICAgaWYgKCdfX3N5bmNFcnJvcicgaW4gZGVzdCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGRlc3QuX19zeW5jRXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVzdCA9IGRlc3QuZGVzdGluYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgbG9jYWxTdWJzY3JpYmVyLl9zeW5jRXJyb3JIYWNrX2lzU3Vic2NyaWJpbmcgPSBmYWxzZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc2luaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShzaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzaW5rLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAobmV4dCwgcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBuZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID09PSBudWxsIHx8IHN1YnNjcmlwdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVqZWN0LCByZXNvbHZlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5zb3VyY2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZVtTeW1ib2xfb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3BlcmF0aW9ucy5sZW5ndGggPyBwaXBlRnJvbUFycmF5KG9wZXJhdGlvbnMpKHRoaXMpIDogdGhpcztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnRvUHJvbWlzZSA9IGZ1bmN0aW9uIChwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHgpIHsgcmV0dXJuICh2YWx1ZSA9IHgpOyB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiByZWplY3QoZXJyKTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHN1YnNjcmliZSkge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZhYmxlO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmFibGUgfTtcbmZ1bmN0aW9uIGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBwcm9taXNlQ3RvciAhPT0gbnVsbCAmJiBwcm9taXNlQ3RvciAhPT0gdm9pZCAwID8gcHJvbWlzZUN0b3IgOiBjb25maWcuUHJvbWlzZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogUHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGlzT2JzZXJ2ZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5uZXh0KSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmVycm9yKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmNvbXBsZXRlKTtcbn1cbmZ1bmN0aW9uIGlzU3Vic2NyaWJlcih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB8fCAoaXNPYnNlcnZlcih2YWx1ZSkgJiYgaXNTdWJzY3JpcHRpb24odmFsdWUpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlRXJyb3JDbGFzcyB9IGZyb20gJy4vY3JlYXRlRXJyb3JDbGFzcyc7XG5leHBvcnQgdmFyIE9iamVjdFVuc3Vic2NyaWJlZEVycm9yID0gY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIE9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbCgpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnb2JqZWN0IHVuc3Vic2NyaWJlZCc7XG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24sIEVNUFRZX1NVQlNDUklQVElPTiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yIH0gZnJvbSAnLi91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbmltcG9ydCB7IGFyclJlbW92ZSB9IGZyb20gJy4vdXRpbC9hcnJSZW1vdmUnO1xudmFyIFN1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YmplY3QoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5vYnNlcnZlcnMgPSBbXTtcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmhhc0Vycm9yID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnRocm93bkVycm9yID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJqZWN0LnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gbmV3IEFub255bW91c1N1YmplY3QodGhpcywgdGhpcyk7XG4gICAgICAgIHN1YmplY3Qub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fdGhyb3dJZkNsb3NlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB2YXIgY29weSA9IHRoaXMub2JzZXJ2ZXJzLnNsaWNlKCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGNvcHlfMSA9IF9fdmFsdWVzKGNvcHkpLCBjb3B5XzFfMSA9IGNvcHlfMS5uZXh0KCk7ICFjb3B5XzFfMS5kb25lOyBjb3B5XzFfMSA9IGNvcHlfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gY29weV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29weV8xXzEgJiYgIWNvcHlfMV8xLmRvbmUgJiYgKF9hID0gY29weV8xLnJldHVybikpIF9hLmNhbGwoY29weV8xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLmhhc0Vycm9yID0gdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy50aHJvd25FcnJvciA9IGVycjtcbiAgICAgICAgICAgIHZhciBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVycztcbiAgICAgICAgICAgIHdoaWxlIChvYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXJzLnNoaWZ0KCkuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzO1xuICAgICAgICAgICAgd2hpbGUgKG9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlcnMuc2hpZnQoKS5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gbnVsbDtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdWJqZWN0LnByb3RvdHlwZSwgXCJvYnNlcnZlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuICgoX2EgPSB0aGlzLm9ic2VydmVycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgPiAwO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHRoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuX3RyeVN1YnNjcmliZS5jYWxsKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHRoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgdGhpcy5fY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyhzdWJzY3JpYmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lubmVyU3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX2lubmVyU3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgaGFzRXJyb3IgPSBfYS5oYXNFcnJvciwgaXNTdG9wcGVkID0gX2EuaXNTdG9wcGVkLCBvYnNlcnZlcnMgPSBfYS5vYnNlcnZlcnM7XG4gICAgICAgIHJldHVybiBoYXNFcnJvciB8fCBpc1N0b3BwZWRcbiAgICAgICAgICAgID8gRU1QVFlfU1VCU0NSSVBUSU9OXG4gICAgICAgICAgICA6IChvYnNlcnZlcnMucHVzaChzdWJzY3JpYmVyKSwgbmV3IFN1YnNjcmlwdGlvbihmdW5jdGlvbiAoKSB7IHJldHVybiBhcnJSZW1vdmUob2JzZXJ2ZXJzLCBzdWJzY3JpYmVyKTsgfSkpO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX2NoZWNrRmluYWxpemVkU3RhdHVzZXMgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBoYXNFcnJvciA9IF9hLmhhc0Vycm9yLCB0aHJvd25FcnJvciA9IF9hLnRocm93bkVycm9yLCBpc1N0b3BwZWQgPSBfYS5pc1N0b3BwZWQ7XG4gICAgICAgIGlmIChoYXNFcnJvcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcih0aHJvd25FcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmFzT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgU3ViamVjdC5jcmVhdGUgPSBmdW5jdGlvbiAoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gbmV3IEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3ViamVjdDtcbn0oT2JzZXJ2YWJsZSkpO1xuZXhwb3J0IHsgU3ViamVjdCB9O1xudmFyIEFub255bW91c1N1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBbm9ueW1vdXNTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmRlc3RpbmF0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmV4dCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHZhbHVlKTtcbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmRlc3RpbmF0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZXJyb3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBlcnIpO1xuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb21wbGV0ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSB0aGlzLnNvdXJjZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN1YnNjcmliZShzdWJzY3JpYmVyKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogRU1QVFlfU1VCU0NSSVBUSU9OO1xuICAgIH07XG4gICAgcmV0dXJuIEFub255bW91c1N1YmplY3Q7XG59KFN1YmplY3QpKTtcbmV4cG9ydCB7IEFub255bW91c1N1YmplY3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YmplY3QuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi9TdWJqZWN0JztcbnZhciBCZWhhdmlvclN1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCZWhhdmlvclN1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQmVoYXZpb3JTdWJqZWN0KF92YWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fdmFsdWUgPSBfdmFsdWU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gX3N1cGVyLnByb3RvdHlwZS5fc3Vic2NyaWJlLmNhbGwodGhpcywgc3Vic2NyaWJlcik7XG4gICAgICAgICFzdWJzY3JpcHRpb24uY2xvc2VkICYmIHN1YnNjcmliZXIubmV4dCh0aGlzLl92YWx1ZSk7XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICBCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBoYXNFcnJvciA9IF9hLmhhc0Vycm9yLCB0aHJvd25FcnJvciA9IF9hLnRocm93bkVycm9yLCBfdmFsdWUgPSBfYS5fdmFsdWU7XG4gICAgICAgIGlmIChoYXNFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgdGhyb3duRXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICByZXR1cm4gX3ZhbHVlO1xuICAgIH07XG4gICAgQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUubmV4dC5jYWxsKHRoaXMsICh0aGlzLl92YWx1ZSA9IHZhbHVlKSk7XG4gICAgfTtcbiAgICByZXR1cm4gQmVoYXZpb3JTdWJqZWN0O1xufShTdWJqZWN0KSk7XG5leHBvcnQgeyBCZWhhdmlvclN1YmplY3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJlaGF2aW9yU3ViamVjdC5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBoYXNMaWZ0KHNvdXJjZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHNvdXJjZSA9PT0gbnVsbCB8fCBzb3VyY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNvdXJjZS5saWZ0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBvcGVyYXRlKGluaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzTGlmdChzb3VyY2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLmxpZnQoZnVuY3Rpb24gKGxpZnRlZFNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbml0KGxpZnRlZFNvdXJjZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuYWJsZSB0byBsaWZ0IHVua25vd24gT2JzZXJ2YWJsZSB0eXBlJyk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpZnQuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoT3BlcmF0b3JTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE9wZXJhdG9yU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb25OZXh0LCBvbkNvbXBsZXRlLCBvbkVycm9yLCBvbkZpbmFsaXplKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vbkZpbmFsaXplID0gb25GaW5hbGl6ZTtcbiAgICAgICAgX3RoaXMuX25leHQgPSBvbk5leHRcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25OZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fbmV4dDtcbiAgICAgICAgX3RoaXMuX2Vycm9yID0gb25FcnJvclxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9lcnJvcjtcbiAgICAgICAgX3RoaXMuX2NvbXBsZXRlID0gb25Db21wbGV0ZVxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPcGVyYXRvclN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBjbG9zZWQgPSB0aGlzLmNsb3NlZDtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAhY2xvc2VkICYmICgoX2EgPSB0aGlzLm9uRmluYWxpemUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMpKTtcbiAgICB9O1xuICAgIHJldHVybiBPcGVyYXRvclN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IE9wZXJhdG9yU3Vic2NyaWJlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T3BlcmF0b3JTdWJzY3JpYmVyLmpzLm1hcCIsImltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG1hcChwcm9qZWN0LCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocHJvamVjdC5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCsrKSk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXAiLCJleHBvcnQgdmFyIGlzQXJyYXlMaWtlID0gKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHggIT09ICdmdW5jdGlvbic7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheUxpa2UuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gXCIuL2lzRnVuY3Rpb25cIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUudGhlbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1Byb21pc2UuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGkgPT09IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpbnB1dFtpKytdKTtcbiAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVBcnJheS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gZ2V0U3ltYm9sSXRlcmF0b3IoKSB7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgIVN5bWJvbC5pdGVyYXRvcikge1xuICAgICAgICByZXR1cm4gJ0BAaXRlcmF0b3InO1xuICAgIH1cbiAgICByZXR1cm4gU3ltYm9sLml0ZXJhdG9yO1xufVxuZXhwb3J0IHZhciBpdGVyYXRvciA9IGdldFN5bWJvbEl0ZXJhdG9yKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVyYXRvci5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlQXN5bmNJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKCFpbnB1dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0ZXJhYmxlIGNhbm5vdCBiZSBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3ViID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICBzdWIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpbnB1dFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLm5leHQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNjaGVkdWxlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gc3ViO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVBc3luY0l0ZXJhYmxlLmpzLm1hcCIsImltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oaW5wdXRbU3ltYm9sX29ic2VydmFibGVdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSW50ZXJvcE9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSXRlcmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihpbnB1dCA9PT0gbnVsbCB8fCBpbnB1dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5wdXRbU3ltYm9sX2l0ZXJhdG9yXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0l0ZXJhYmxlLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZShvYmopIHtcbiAgICByZXR1cm4gU3ltYm9sLmFzeW5jSXRlcmF0b3IgJiYgaXNGdW5jdGlvbihvYmogPT09IG51bGwgfHwgb2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvYmpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXN5bmNJdGVyYWJsZS5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpIHtcbiAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIllvdSBwcm92aWRlZCBcIiArIChpbnB1dCAhPT0gbnVsbCAmJiB0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnID8gJ2FuIGludmFsaWQgb2JqZWN0JyA6IFwiJ1wiICsgaW5wdXQgKyBcIidcIikgKyBcIiB3aGVyZSBhIHN0cmVhbSB3YXMgZXhwZWN0ZWQuIFlvdSBjYW4gcHJvdmlkZSBhbiBPYnNlcnZhYmxlLCBQcm9taXNlLCBSZWFkYWJsZVN0cmVhbSwgQXJyYXksIEFzeW5jSXRlcmFibGUsIG9yIEl0ZXJhYmxlLlwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm93VW5vYnNlcnZhYmxlRXJyb3IuanMubWFwIiwiaW1wb3J0IHsgX19hc3luY0dlbmVyYXRvciwgX19hd2FpdCwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3JfMSgpIHtcbiAgICAgICAgdmFyIHJlYWRlciwgX2EsIHZhbHVlLCBkb25lO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSByZWFkYWJsZVN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFsxLCAsIDksIDEwXSk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJ1ZSkgcmV0dXJuIFszLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHJlYWRlci5yZWFkKCkpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpLCB2YWx1ZSA9IF9hLnZhbHVlLCBkb25lID0gX2EuZG9uZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkb25lKSByZXR1cm4gWzMsIDVdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQodm9pZCAwKV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIsIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzQsIF9fYXdhaXQodmFsdWUpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbNCwgX2Iuc2VudCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAyXTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZWFkYWJsZVN0cmVhbUxpa2Uob2JqKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqLmdldFJlYWRlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1JlYWRhYmxlU3RyZWFtTGlrZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2FzeW5jVmFsdWVzLCBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvaXNQcm9taXNlJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBzY2hlZHVsZWQgfSBmcm9tICcuLi9zY2hlZHVsZWQvc2NoZWR1bGVkJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgcmVwb3J0VW5oYW5kbGVkRXJyb3IgfSBmcm9tICcuLi91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0FzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IgfSBmcm9tICcuLi91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3InO1xuaW1wb3J0IHsgaXNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc1JlYWRhYmxlU3RyZWFtTGlrZSwgcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciB9IGZyb20gJy4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGZyb20oaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZXIgPyBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcikgOiBpbm5lckZyb20oaW5wdXQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlubmVyRnJvbShpbnB1dCkge1xuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcm9taXNlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Qcm9taXNlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBc3luY0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Bc3luY0l0ZXJhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSXRlcmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCk7XG59XG5mdW5jdGlvbiBmcm9tSW50ZXJvcE9ic2VydmFibGUob2JqKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBvYnMgPSBvYmpbU3ltYm9sX29ic2VydmFibGVdKCk7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9icy5zdWJzY3JpYmUpKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm92aWRlZCBvYmplY3QgZG9lcyBub3QgY29ycmVjdGx5IGltcGxlbWVudCBTeW1ib2wub2JzZXJ2YWJsZScpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21BcnJheUxpa2UoYXJyYXkpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGggJiYgIXN1YnNjcmliZXIuY2xvc2VkOyBpKyspIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChhcnJheVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZnJvbVByb21pc2UocHJvbWlzZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBwcm9taXNlXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KVxuICAgICAgICAgICAgLnRoZW4obnVsbCwgcmVwb3J0VW5oYW5kbGVkRXJyb3IpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZnJvbUl0ZXJhYmxlKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgaXRlcmFibGVfMSA9IF9fdmFsdWVzKGl0ZXJhYmxlKSwgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCk7ICFpdGVyYWJsZV8xXzEuZG9uZTsgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZXJhYmxlXzFfMSAmJiAhaXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gaXRlcmFibGVfMS5yZXR1cm4pKSBfYS5jYWxsKGl0ZXJhYmxlXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZyb21Bc3luY0l0ZXJhYmxlKGFzeW5jSXRlcmFibGUpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcHJvY2Vzcyhhc3luY0l0ZXJhYmxlLCBzdWJzY3JpYmVyKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShyZWFkYWJsZVN0cmVhbSkge1xuICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKHJlYWRhYmxlU3RyZWFtKSk7XG59XG5mdW5jdGlvbiBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpIHtcbiAgICB2YXIgYXN5bmNJdGVyYWJsZV8xLCBhc3luY0l0ZXJhYmxlXzFfMTtcbiAgICB2YXIgZV8yLCBfYTtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ZSwgZV8yXzE7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMCwgNSwgNiwgMTFdKTtcbiAgICAgICAgICAgICAgICAgICAgYXN5bmNJdGVyYWJsZV8xID0gX19hc3luY1ZhbHVlcyhhc3luY0l0ZXJhYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFs0LCBhc3luY0l0ZXJhYmxlXzEubmV4dCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGFzeW5jSXRlcmFibGVfMV8xID0gX2Iuc2VudCgpLCAhYXN5bmNJdGVyYWJsZV8xXzEuZG9uZSkpIHJldHVybiBbMywgNF07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYXN5bmNJdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzMsIDFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBlXzJfMSA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZV8yID0geyBlcnJvcjogZV8yXzEgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzYsICwgOSwgMTBdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXN5bmNJdGVyYWJsZV8xXzEgJiYgIWFzeW5jSXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gYXN5bmNJdGVyYWJsZV8xLnJldHVybikpKSByZXR1cm4gWzMsIDhdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9hLmNhbGwoYXN5bmNJdGVyYWJsZV8xKV07XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gODtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6IHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb20uanMubWFwIiwiaW1wb3J0IHsgc2NoZWR1bGVPYnNlcnZhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZU9ic2VydmFibGUnO1xuaW1wb3J0IHsgc2NoZWR1bGVQcm9taXNlIH0gZnJvbSAnLi9zY2hlZHVsZVByb21pc2UnO1xuaW1wb3J0IHsgc2NoZWR1bGVBcnJheSB9IGZyb20gJy4vc2NoZWR1bGVBcnJheSc7XG5pbXBvcnQgeyBzY2hlZHVsZUl0ZXJhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZUl0ZXJhYmxlJztcbmltcG9ydCB7IHNjaGVkdWxlQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzSXRlcmFibGUnO1xuaW1wb3J0IHsgaXNBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0FzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IgfSBmcm9tICcuLi91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3InO1xuaW1wb3J0IHsgaXNSZWFkYWJsZVN0cmVhbUxpa2UgfSBmcm9tICcuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlJztcbmltcG9ydCB7IHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlIH0gZnJvbSAnLi9zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVkKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFzeW5jSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVkLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlT2JzZXJ2YWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWIgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlID0gaW5wdXRbU3ltYm9sX29ic2VydmFibGVdKCk7XG4gICAgICAgICAgICBzdWIuYWRkKG9ic2VydmFibGUuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHsgc3ViLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSkpOyB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7IHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSkpOyB9LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7IHN1Yi5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSkpOyB9LFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBzdWI7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZU9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlUHJvbWlzZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSkpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZVByb21pc2UuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgY2F1Z2h0U2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2NhdWdodFNjaGVkdWxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUl0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yO1xuICAgICAgICBzdWJzY3JpYmVyLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXRlcmF0b3IgPSBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBjYXVnaHRTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBpdGVyYXRvci5uZXh0KCksIHZhbHVlID0gX2EudmFsdWUsIGRvbmUgPSBfYS5kb25lO1xuICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNGdW5jdGlvbihpdGVyYXRvciA9PT0gbnVsbCB8fCBpdGVyYXRvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaXRlcmF0b3IucmV0dXJuKSAmJiBpdGVyYXRvci5yZXR1cm4oKTsgfTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlSXRlcmFibGUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNhdWdodFNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZXhlY3V0ZSwgZGVsYXkpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGV4ZWN1dGUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9LCBkZWxheSk7XG4gICAgc3Vic2NyaWJlci5hZGQoc3Vic2NyaXB0aW9uKTtcbiAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2F1Z2h0U2NoZWR1bGUuanMubWFwIiwiaW1wb3J0IHsgc2NoZWR1bGVBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi9zY2hlZHVsZUFzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciB9IGZyb20gJy4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IoaW5wdXQpLCBzY2hlZHVsZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UuanMubWFwIiwiaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9tYXAnO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9mcm9tJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgbWVyZ2VJbnRlcm5hbHMgfSBmcm9tICcuL21lcmdlSW50ZXJuYWxzJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gSW5maW5pdHk7IH1cbiAgICBpZiAoaXNGdW5jdGlvbihyZXN1bHRTZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBtYXAoZnVuY3Rpb24gKGIsIGlpKSB7IHJldHVybiByZXN1bHRTZWxlY3RvcihhLCBiLCBpLCBpaSk7IH0pKGlubmVyRnJvbShwcm9qZWN0KGEsIGkpKSk7IH0sIGNvbmN1cnJlbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikgeyByZXR1cm4gbWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50KTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcC5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2Zyb20nO1xuaW1wb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlSW50ZXJuYWxzKHNvdXJjZSwgc3Vic2NyaWJlciwgcHJvamVjdCwgY29uY3VycmVudCwgb25CZWZvcmVOZXh0LCBleHBhbmQsIGlubmVyU3ViU2NoZWR1bGVyLCBhZGRpdGlvbmFsVGVhcmRvd24pIHtcbiAgICB2YXIgYnVmZmVyID0gW107XG4gICAgdmFyIGFjdGl2ZSA9IDA7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgIHZhciBjaGVja0NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNDb21wbGV0ZSAmJiAhYnVmZmVyLmxlbmd0aCAmJiAhYWN0aXZlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvdXRlck5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIChhY3RpdmUgPCBjb25jdXJyZW50ID8gZG9Jbm5lclN1Yih2YWx1ZSkgOiBidWZmZXIucHVzaCh2YWx1ZSkpOyB9O1xuICAgIHZhciBkb0lubmVyU3ViID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGV4cGFuZCAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICBhY3RpdmUrKztcbiAgICAgICAgdmFyIGlubmVyQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgaW5uZXJGcm9tKHByb2plY3QodmFsdWUsIGluZGV4KyspKS5zdWJzY3JpYmUobmV3IE9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoaW5uZXJWYWx1ZSkge1xuICAgICAgICAgICAgb25CZWZvcmVOZXh0ID09PSBudWxsIHx8IG9uQmVmb3JlTmV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25CZWZvcmVOZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgaWYgKGV4cGFuZCkge1xuICAgICAgICAgICAgICAgIG91dGVyTmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaW5uZXJDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlubmVyQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmUtLTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyZWRWYWx1ZSA9IGJ1ZmZlci5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJTdWJTY2hlZHVsZXIgPyBzdWJzY3JpYmVyLmFkZChpbm5lclN1YlNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBkb0lubmVyU3ViKGJ1ZmZlcmVkVmFsdWUpOyB9KSkgOiBkb0lubmVyU3ViKGJ1ZmZlcmVkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYnVmZmVyLmxlbmd0aCAmJiBhY3RpdmUgPCBjb25jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfbG9vcF8xKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2hlY2tDb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIHNvdXJjZS5zdWJzY3JpYmUobmV3IE9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBvdXRlck5leHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICB9KSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkaXRpb25hbFRlYXJkb3duID09PSBudWxsIHx8IGFkZGl0aW9uYWxUZWFyZG93biA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWRkaXRpb25hbFRlYXJkb3duKCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlSW50ZXJuYWxzLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSBcIi4uL29wZXJhdG9ycy9tYXBcIjtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGNhbGxPckFwcGx5KGZuLCBhcmdzKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkoYXJncykgPyBmbi5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpIDogZm4oYXJncyk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFwT25lT3JNYW55QXJncyhmbikge1xuICAgIHJldHVybiBtYXAoZnVuY3Rpb24gKGFyZ3MpIHsgcmV0dXJuIGNhbGxPckFwcGx5KGZuLCBhcmdzKTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBPbmVPck1hbnlBcmdzLmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlQXJyYXkgfSBmcm9tICcuLi9zY2hlZHVsZWQvc2NoZWR1bGVBcnJheSc7XG5pbXBvcnQgeyBmcm9tQXJyYXlMaWtlIH0gZnJvbSAnLi9mcm9tJztcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcm5hbEZyb21BcnJheShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlciA/IHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcikgOiBmcm9tQXJyYXlMaWtlKGlucHV0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21BcnJheS5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi4vb3BlcmF0b3JzL21lcmdlTWFwJztcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5TGlrZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IG1hcE9uZU9yTWFueUFyZ3MgfSBmcm9tICcuLi91dGlsL21hcE9uZU9yTWFueUFyZ3MnO1xuaW1wb3J0IHsgaW50ZXJuYWxGcm9tQXJyYXkgfSBmcm9tICcuL2Zyb21BcnJheSc7XG52YXIgbm9kZUV2ZW50RW1pdHRlck1ldGhvZHMgPSBbJ2FkZExpc3RlbmVyJywgJ3JlbW92ZUxpc3RlbmVyJ107XG52YXIgZXZlbnRUYXJnZXRNZXRob2RzID0gWydhZGRFdmVudExpc3RlbmVyJywgJ3JlbW92ZUV2ZW50TGlzdGVuZXInXTtcbnZhciBqcXVlcnlNZXRob2RzID0gWydvbicsICdvZmYnXTtcbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZyb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucykucGlwZShtYXBPbmVPck1hbnlBcmdzKHJlc3VsdFNlbGVjdG9yKSk7XG4gICAgfVxuICAgIHZhciBfYSA9IF9fcmVhZChpc0V2ZW50VGFyZ2V0KHRhcmdldClcbiAgICAgICAgPyBldmVudFRhcmdldE1ldGhvZHMubWFwKGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7IHJldHVybiBmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gdGFyZ2V0W21ldGhvZE5hbWVdKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7IH07IH0pXG4gICAgICAgIDpcbiAgICAgICAgICAgIGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldClcbiAgICAgICAgICAgICAgICA/IG5vZGVFdmVudEVtaXR0ZXJNZXRob2RzLm1hcCh0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgOiBpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldClcbiAgICAgICAgICAgICAgICAgICAgPyBqcXVlcnlNZXRob2RzLm1hcCh0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIDogW10sIDIpLCBhZGQgPSBfYVswXSwgcmVtb3ZlID0gX2FbMV07XG4gICAgaWYgKCFhZGQpIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKHRhcmdldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtZXJnZU1hcChmdW5jdGlvbiAoc3ViVGFyZ2V0KSB7IHJldHVybiBmcm9tRXZlbnQoc3ViVGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMpOyB9KShpbnRlcm5hbEZyb21BcnJheSh0YXJnZXQpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWFkZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGV2ZW50IHRhcmdldCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaWJlci5uZXh0KDEgPCBhcmdzLmxlbmd0aCA/IGFyZ3MgOiBhcmdzWzBdKTtcbiAgICAgICAgfTtcbiAgICAgICAgYWRkKGhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlKGhhbmRsZXIpOyB9O1xuICAgIH0pO1xufVxuZnVuY3Rpb24gdG9Db21tb25IYW5kbGVyUmVnaXN0cnkodGFyZ2V0LCBldmVudE5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHsgcmV0dXJuIGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiB0YXJnZXRbbWV0aG9kTmFtZV0oZXZlbnROYW1lLCBoYW5kbGVyKTsgfTsgfTtcbn1cbmZ1bmN0aW9uIGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHRhcmdldC5hZGRMaXN0ZW5lcikgJiYgaXNGdW5jdGlvbih0YXJnZXQucmVtb3ZlTGlzdGVuZXIpO1xufVxuZnVuY3Rpb24gaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0YXJnZXQub24pICYmIGlzRnVuY3Rpb24odGFyZ2V0Lm9mZik7XG59XG5mdW5jdGlvbiBpc0V2ZW50VGFyZ2V0KHRhcmdldCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSAmJiBpc0Z1bmN0aW9uKHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21FdmVudC5qcy5tYXAiLCJ2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5leHBvcnQgZnVuY3Rpb24gYXJnc09yQXJnQXJyYXkoYXJncykge1xuICAgIHJldHVybiBhcmdzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KGFyZ3NbMF0pID8gYXJnc1swXSA6IGFyZ3M7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcmdzT3JBcmdBcnJheS5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5leHBvcnQgdmFyIEVNUFRZID0gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSk7XG5leHBvcnQgZnVuY3Rpb24gZW1wdHkoc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlciA/IGVtcHR5U2NoZWR1bGVkKHNjaGVkdWxlcikgOiBFTVBUWTtcbn1cbmZ1bmN0aW9uIGVtcHR5U2NoZWR1bGVkKHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW1wdHkuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBpc1NjaGVkdWxlciB9IGZyb20gJy4vaXNTY2hlZHVsZXInO1xuZnVuY3Rpb24gbGFzdChhcnIpIHtcbiAgICByZXR1cm4gYXJyW2Fyci5sZW5ndGggLSAxXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3BSZXN1bHRTZWxlY3RvcihhcmdzKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24obGFzdChhcmdzKSkgPyBhcmdzLnBvcCgpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvcFNjaGVkdWxlcihhcmdzKSB7XG4gICAgcmV0dXJuIGlzU2NoZWR1bGVyKGxhc3QoYXJncykpID8gYXJncy5wb3AoKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3BOdW1iZXIoYXJncywgZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBsYXN0KGFyZ3MpID09PSAnbnVtYmVyJyA/IGFyZ3MucG9wKCkgOiBkZWZhdWx0VmFsdWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcmdzLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2NoZWR1bGVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUuc2NoZWR1bGUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNTY2hlZHVsZXIuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuL2Zyb20nO1xuaW1wb3J0IHsgYXJnc09yQXJnQXJyYXkgfSBmcm9tICcuLi91dGlsL2FyZ3NPckFyZ0FycmF5JztcbmltcG9ydCB7IEVNUFRZIH0gZnJvbSAnLi9lbXB0eSc7XG5pbXBvcnQgeyBPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuLi9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyJztcbmltcG9ydCB7IHBvcFJlc3VsdFNlbGVjdG9yIH0gZnJvbSAnLi4vdXRpbC9hcmdzJztcbmV4cG9ydCBmdW5jdGlvbiB6aXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciByZXN1bHRTZWxlY3RvciA9IHBvcFJlc3VsdFNlbGVjdG9yKGFyZ3MpO1xuICAgIHZhciBzb3VyY2VzID0gYXJnc09yQXJnQXJyYXkoYXJncyk7XG4gICAgcmV0dXJuIHNvdXJjZXMubGVuZ3RoXG4gICAgICAgID8gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHZhciBidWZmZXJzID0gc291cmNlcy5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH0pO1xuICAgICAgICAgICAgdmFyIGNvbXBsZXRlZCA9IHNvdXJjZXMubWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9KTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBidWZmZXJzID0gY29tcGxldGVkID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoc291cmNlSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpbm5lckZyb20oc291cmNlc1tzb3VyY2VJbmRleF0pLnN1YnNjcmliZShuZXcgT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBidWZmZXJzW3NvdXJjZUluZGV4XS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcnMuZXZlcnkoZnVuY3Rpb24gKGJ1ZmZlcikgeyByZXR1cm4gYnVmZmVyLmxlbmd0aDsgfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBidWZmZXJzLm1hcChmdW5jdGlvbiAoYnVmZmVyKSB7IHJldHVybiBidWZmZXIuc2hpZnQoKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0U2VsZWN0b3IgPyByZXN1bHRTZWxlY3Rvci5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChyZXN1bHQpKSkgOiByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcnMuc29tZShmdW5jdGlvbiAoYnVmZmVyLCBpKSB7IHJldHVybiAhYnVmZmVyLmxlbmd0aCAmJiBjb21wbGV0ZWRbaV07IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWRbc291cmNlSW5kZXhdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgIWJ1ZmZlcnNbc291cmNlSW5kZXhdLmxlbmd0aCAmJiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIHNvdXJjZUluZGV4ID0gMDsgIXN1YnNjcmliZXIuY2xvc2VkICYmIHNvdXJjZUluZGV4IDwgc291cmNlcy5sZW5ndGg7IHNvdXJjZUluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBfbG9vcF8xKHNvdXJjZUluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVycyA9IGNvbXBsZXRlZCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KVxuICAgICAgICA6IEVNUFRZO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9emlwLmpzLm1hcCIsImltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlcihwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUobmV3IE9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHByZWRpY2F0ZS5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCsrKSAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpOyB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXIuanMubWFwIiwiaW1wb3J0IHsgRU1QVFkgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2VtcHR5JztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHRha2UoY291bnQpIHtcbiAgICByZXR1cm4gY291bnQgPD0gMFxuICAgICAgICA/XG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBFTVBUWTsgfVxuICAgICAgICA6IG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgdmFyIHNlZW4gPSAwO1xuICAgICAgICAgICAgc291cmNlLnN1YnNjcmliZShuZXcgT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICgrK3NlZW4gPD0gY291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50IDw9IHNlZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWtlLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvZnJvbSc7XG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAnLi4vb3BlcmF0b3JzL3Rha2UnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uL1N1YmplY3QnO1xuaW1wb3J0IHsgU2FmZVN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuZXhwb3J0IGZ1bmN0aW9uIHNoYXJlKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHZhciBfYSA9IG9wdGlvbnMuY29ubmVjdG9yLCBjb25uZWN0b3IgPSBfYSA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IFN1YmplY3QoKTsgfSA6IF9hLCBfYiA9IG9wdGlvbnMucmVzZXRPbkVycm9yLCByZXNldE9uRXJyb3IgPSBfYiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9iLCBfYyA9IG9wdGlvbnMucmVzZXRPbkNvbXBsZXRlLCByZXNldE9uQ29tcGxldGUgPSBfYyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9jLCBfZCA9IG9wdGlvbnMucmVzZXRPblJlZkNvdW50WmVybywgcmVzZXRPblJlZkNvdW50WmVybyA9IF9kID09PSB2b2lkIDAgPyB0cnVlIDogX2Q7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh3cmFwcGVyU291cmNlKSB7XG4gICAgICAgIHZhciBjb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgdmFyIHJlc2V0Q29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gbnVsbDtcbiAgICAgICAgdmFyIHJlZkNvdW50ID0gMDtcbiAgICAgICAgdmFyIGhhc0NvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgaGFzRXJyb3JlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgY2FuY2VsUmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXNldENvbm5lY3Rpb24gPT09IG51bGwgfHwgcmVzZXRDb25uZWN0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNldENvbm5lY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHJlc2V0Q29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIHZhciByZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNhbmNlbFJlc2V0KCk7XG4gICAgICAgICAgICBjb25uZWN0aW9uID0gc3ViamVjdCA9IG51bGw7XG4gICAgICAgICAgICBoYXNDb21wbGV0ZWQgPSBoYXNFcnJvcmVkID0gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIHZhciByZXNldEFuZFVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNvbm4gPSBjb25uZWN0aW9uO1xuICAgICAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgICAgIGNvbm4gPT09IG51bGwgfHwgY29ubiA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29ubi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICByZWZDb3VudCsrO1xuICAgICAgICAgICAgaWYgKCFoYXNFcnJvcmVkICYmICFoYXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICBjYW5jZWxSZXNldCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRlc3QgPSAoc3ViamVjdCA9IHN1YmplY3QgIT09IG51bGwgJiYgc3ViamVjdCAhPT0gdm9pZCAwID8gc3ViamVjdCA6IGNvbm5lY3RvcigpKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZWZDb3VudC0tO1xuICAgICAgICAgICAgICAgIGlmIChyZWZDb3VudCA9PT0gMCAmJiAhaGFzRXJyb3JlZCAmJiAhaGFzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0Q29ubmVjdGlvbiA9IGhhbmRsZVJlc2V0KHJlc2V0QW5kVW5zdWJzY3JpYmUsIHJlc2V0T25SZWZDb3VudFplcm8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZGVzdC5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgICAgICBpZiAoIWNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uID0gbmV3IFNhZmVTdWJzY3JpYmVyKHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBkZXN0Lm5leHQodmFsdWUpOyB9LFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3JlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxSZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRDb25uZWN0aW9uID0gaGFuZGxlUmVzZXQocmVzZXQsIHJlc2V0T25FcnJvciwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3QuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxSZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRDb25uZWN0aW9uID0gaGFuZGxlUmVzZXQocmVzZXQsIHJlc2V0T25Db21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZnJvbShzb3VyY2UpLnN1YnNjcmliZShjb25uZWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkod3JhcHBlclNvdXJjZSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGhhbmRsZVJlc2V0KHJlc2V0LCBvbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgaWYgKG9uID09PSB0cnVlKSB7XG4gICAgICAgIHJlc2V0KCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAob24gPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gb24uYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKS5waXBlKHRha2UoMSkpXG4gICAgICAgIC5zdWJzY3JpYmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzZXQoKTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFyZS5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2Zyb20nO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gc3dpdGNoTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5uZXJTdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGNoZWNrQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0NvbXBsZXRlICYmICFpbm5lclN1YnNjcmliZXIgJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9O1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpbm5lclN1YnNjcmliZXIgPT09IG51bGwgfHwgaW5uZXJTdWJzY3JpYmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbm5lclN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHZhciBpbm5lckluZGV4ID0gMDtcbiAgICAgICAgICAgIHZhciBvdXRlckluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgICAgIGlubmVyRnJvbShwcm9qZWN0KHZhbHVlLCBvdXRlckluZGV4KSkuc3Vic2NyaWJlKChpbm5lclN1YnNjcmliZXIgPSBuZXcgT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7IHJldHVybiBzdWJzY3JpYmVyLm5leHQocmVzdWx0U2VsZWN0b3IgPyByZXN1bHRTZWxlY3Rvcih2YWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCsrKSA6IGlubmVyVmFsdWUpOyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaW5uZXJTdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoTWFwLmpzLm1hcCIsImV4cG9ydCB2YXIgSU1BR0VTX0xPQ0FUSU9OID0gJ3NyYy9hc3NldHMvSW1hZ2VzLyc7XHJcbmV4cG9ydCB2YXIgR0FNRV9JTUFHRVNfTE9DQVRJT04gPSBJTUFHRVNfTE9DQVRJT04gKyAnZ2FtZS8nO1xyXG4iLCJleHBvcnQgdmFyIEVycm9yQ29kZXM7XHJcbihmdW5jdGlvbiAoRXJyb3JDb2Rlcykge1xyXG4gICAgRXJyb3JDb2Rlc1tFcnJvckNvZGVzW1widXNlck5vdEZvdW5kXCJdID0gMF0gPSBcInVzZXJOb3RGb3VuZFwiO1xyXG59KShFcnJvckNvZGVzIHx8IChFcnJvckNvZGVzID0ge30pKTtcclxuIiwiZXhwb3J0IHZhciBCQVNFX1VSTCA9IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwL1wiO1xyXG4iLCJpbXBvcnQgeyBCQVNFX1VSTCB9IGZyb20gXCIuLi8uLi9lbnZpcm9ubWVudFwiO1xyXG5leHBvcnQgdmFyIFVTRVJTX1VSTCA9IEJBU0VfVVJMICsgXCJ1c2Vycy9cIjtcclxuZXhwb3J0IHZhciBGSVJFV09PRF9JVEVNU19VUkwgPSBCQVNFX1VSTCArIFwicmVzdC9zdG9yZS9maXJld29vZEl0ZW1zL1wiO1xyXG5leHBvcnQgdmFyIEZMQU1NQUJMRV9JVEVNU19VUkwgPSBCQVNFX1VSTCArIFwicmVzdC9zdG9yZS9mbGFtbWFibGVJdGVtcy9cIjtcclxuZXhwb3J0IHZhciBGSVJFU1RBUlRFUl9JVEVNU19VUkwgPSBCQVNFX1VSTCArIFwicmVzdC9zdG9yZS9maXJlc3RhcnRlckl0ZW1zL1wiO1xyXG4iLCJpbXBvcnQgeyBtZXJnZU1hcCB9IGZyb20gJy4vbWVyZ2VNYXAnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gY29uY2F0TWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ocmVzdWx0U2VsZWN0b3IpID8gbWVyZ2VNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IsIDEpIDogbWVyZ2VNYXAocHJvamVjdCwgMSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRNYXAuanMubWFwIiwiaW1wb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHNjYW5JbnRlcm5hbHMoYWNjdW11bGF0b3IsIHNlZWQsIGhhc1NlZWQsIGVtaXRPbk5leHQsIGVtaXRCZWZvcmVDb21wbGV0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYXNTdGF0ZSA9IGhhc1NlZWQ7XG4gICAgICAgIHZhciBzdGF0ZSA9IHNlZWQ7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUobmV3IE9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBpID0gaW5kZXgrKztcbiAgICAgICAgICAgIHN0YXRlID0gaGFzU3RhdGVcbiAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yKHN0YXRlLCB2YWx1ZSwgaSlcbiAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICgoaGFzU3RhdGUgPSB0cnVlKSwgdmFsdWUpO1xuICAgICAgICAgICAgZW1pdE9uTmV4dCAmJiBzdWJzY3JpYmVyLm5leHQoc3RhdGUpO1xuICAgICAgICB9LCBlbWl0QmVmb3JlQ29tcGxldGUgJiZcbiAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaGFzU3RhdGUgJiYgc3Vic2NyaWJlci5uZXh0KHN0YXRlKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9KSkpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2FuSW50ZXJuYWxzLmpzLm1hcCIsImltcG9ydCB7IHJlZHVjZSB9IGZyb20gJy4vcmVkdWNlJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xudmFyIGFyclJlZHVjZXIgPSBmdW5jdGlvbiAoYXJyLCB2YWx1ZSkgeyByZXR1cm4gKGFyci5wdXNoKHZhbHVlKSwgYXJyKTsgfTtcbmV4cG9ydCBmdW5jdGlvbiB0b0FycmF5KCkge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgcmVkdWNlKGFyclJlZHVjZXIsIFtdKShzb3VyY2UpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvQXJyYXkuanMubWFwIiwiaW1wb3J0IHsgc2NhbkludGVybmFscyB9IGZyb20gJy4vc2NhbkludGVybmFscyc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2UoYWNjdW11bGF0b3IsIHNlZWQpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShzY2FuSW50ZXJuYWxzKGFjY3VtdWxhdG9yLCBzZWVkLCBhcmd1bWVudHMubGVuZ3RoID49IDIsIGZhbHNlLCB0cnVlKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWR1Y2UuanMubWFwIiwidmFyIEludmVudG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEludmVudG9yeShmbGFtbWFibGVJdGVtcywgZmlyZXdvb2RJdGVtcywgZmlyZXN0YXJ0ZXJJdGVtcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5mbGFtbWFibGVJdGVtcyA9IHt9O1xyXG4gICAgICAgIHRoaXMuZmlyZXdvb2RJdGVtcyA9IHt9O1xyXG4gICAgICAgIHRoaXMuZmlyZXN0YXJ0ZXJJdGVtcyA9IHt9O1xyXG4gICAgICAgIGZsYW1tYWJsZUl0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gKF90aGlzLmZsYW1tYWJsZUl0ZW1zW2l0ZW0uaXRlbS5uYW1lXSA9IGl0ZW0pOyB9KTtcclxuICAgICAgICBmaXJld29vZEl0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gKF90aGlzLmZpcmV3b29kSXRlbXNbaXRlbS5pdGVtLm5hbWVdID0gaXRlbSk7IH0pO1xyXG4gICAgICAgIGZpcmVzdGFydGVySXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiAoX3RoaXMuZmlyZXN0YXJ0ZXJJdGVtc1tpdGVtLml0ZW0ubmFtZV0gPSBpdGVtKTsgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gSW52ZW50b3J5O1xyXG59KCkpO1xyXG5leHBvcnQgeyBJbnZlbnRvcnkgfTtcclxuIiwiZXhwb3J0IHZhciBJTklUSUFMX0JBTEFOQ0UgPSAyMDA7XHJcbiIsImltcG9ydCB7IElOSVRJQUxfQkFMQU5DRSB9IGZyb20gXCIuLi8uLi9taXNjL0dhbWVDb25maWdcIjtcclxuaW1wb3J0IHsgSW52ZW50b3J5VG9JbnZlbnRvcnlEVE8gfSBmcm9tIFwiLi9pbnZlbnRvcnktZHRvXCI7XHJcbmltcG9ydCB7IEd1aWQgfSBmcm9tIFwiZ3VpZC10eXBlc2NyaXB0XCI7XHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VyRFRPdG9Vc2VyKHVzZXJEVE8sIGludmVudG9yeSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpZDogdXNlckRUTy5pZCxcclxuICAgICAgICB1c2VybmFtZTogdXNlckRUTy51c2VybmFtZSxcclxuICAgICAgICBwYXNzd29yZDogdXNlckRUTy5wYXNzd29yZCxcclxuICAgICAgICBnYW1lSW5mbzogdXNlckRUTy5nYW1lSW5mbyxcclxuICAgICAgICBpbnZlbnRvcnk6IGludmVudG9yeSxcclxuICAgICAgICBiYWxhbmNlOiB1c2VyRFRPLmJhbGFuY2UsXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbml0aWFsVXNlckRUTyh1c2VybmFtZSwgcGFzc3dvcmQpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaWQ6IEd1aWQuY3JlYXRlKCkudG9TdHJpbmcoKSxcclxuICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsXHJcbiAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkLFxyXG4gICAgICAgIGdhbWVJbmZvOiBudWxsLFxyXG4gICAgICAgIGJhbGFuY2U6IElOSVRJQUxfQkFMQU5DRSxcclxuICAgICAgICBpbnZlbnRvcnk6IHtcclxuICAgICAgICAgICAgZmlyZXdvb2RJdGVtczogW10sXHJcbiAgICAgICAgICAgIGZsYW1tYWJsZUl0ZW1zOiBbXSxcclxuICAgICAgICAgICAgZmlyZXN0YXJ0ZXJJdGVtczogW11cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VyVG9Vc2VyRFRPKHVzZXIpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaWQ6IHVzZXIuaWQsXHJcbiAgICAgICAgYmFsYW5jZTogdXNlci5iYWxhbmNlLFxyXG4gICAgICAgIHBhc3N3b3JkOiB1c2VyLnBhc3N3b3JkLFxyXG4gICAgICAgIHVzZXJuYW1lOiB1c2VyLnVzZXJuYW1lLFxyXG4gICAgICAgIGdhbWVJbmZvOiB1c2VyLmdhbWVJbmZvLFxyXG4gICAgICAgIGludmVudG9yeTogSW52ZW50b3J5VG9JbnZlbnRvcnlEVE8odXNlci5pbnZlbnRvcnkpXHJcbiAgICB9O1xyXG59XHJcbiIsImltcG9ydCB7IGZyb20sIHppcCB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IGNvbmNhdE1hcCwgZmlsdGVyLCBtYXAsIHRvQXJyYXkgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcclxuaW1wb3J0IHsgZ2V0RmlyZXN0YXJ0ZXJJdGVtQnlJRCwgZ2V0RmlyZXdvb2RJdGVtQnlJRCwgZ2V0RmxhbW1hYmxlSXRlbUJ5SUQsIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL0RCIHNlcnZpY2VzL3N0b3JlLnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgSW52ZW50b3J5IH0gZnJvbSBcIi4uL2ludmVudG9yeVwiO1xyXG5pbXBvcnQgeyBJbnZlbnRvcnlJdGVtIH0gZnJvbSBcIi4uL2ludmVudG9yeS1pdGVtXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiBpbnZlbnRvcnlEVE90b0ludmVudG9yeU9icyhpbnZlbnRvcnlEVE8pIHtcclxuICAgIHJldHVybiB6aXAoZnJvbShpbnZlbnRvcnlEVE8uZmlyZXdvb2RJdGVtcylcclxuICAgICAgICAucGlwZShjb25jYXRNYXAoZnVuY3Rpb24gKGZpcmV3b29kSXRlbURUTykge1xyXG4gICAgICAgIHJldHVybiBnZXRGaXJld29vZEl0ZW1CeUlEKGZpcmV3b29kSXRlbURUTy5pdGVtKTtcclxuICAgIH0pLCBmaWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIE9iamVjdC5rZXlzKGl0ZW0pLmxlbmd0aCA+IDA7IH0pLCBtYXAoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBJbnZlbnRvcnlJdGVtKGl0ZW0sIGludmVudG9yeURUTy5maXJld29vZEl0ZW1zW2luZGV4XS5xdWFudGl0eSk7XHJcbiAgICB9KSlcclxuICAgICAgICAucGlwZSh0b0FycmF5KCkpLCBmcm9tKGludmVudG9yeURUTy5mbGFtbWFibGVJdGVtcylcclxuICAgICAgICAucGlwZShjb25jYXRNYXAoZnVuY3Rpb24gKGZsYW1tYWJsZUl0ZW1EVE8pIHtcclxuICAgICAgICByZXR1cm4gZ2V0RmxhbW1hYmxlSXRlbUJ5SUQoZmxhbW1hYmxlSXRlbURUTy5pdGVtKTtcclxuICAgIH0pLCBmaWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIE9iamVjdC5rZXlzKGl0ZW0pLmxlbmd0aCA+IDA7IH0pLCBtYXAoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBJbnZlbnRvcnlJdGVtKGl0ZW0sIGludmVudG9yeURUTy5mbGFtbWFibGVJdGVtc1tpbmRleF0ucXVhbnRpdHkpO1xyXG4gICAgfSkpXHJcbiAgICAgICAgLnBpcGUodG9BcnJheSgpKSwgZnJvbShpbnZlbnRvcnlEVE8uZmlyZXN0YXJ0ZXJJdGVtcylcclxuICAgICAgICAucGlwZShjb25jYXRNYXAoZnVuY3Rpb24gKGZpcmVzdGFydGVySXRlbURUTykge1xyXG4gICAgICAgIHJldHVybiBnZXRGaXJlc3RhcnRlckl0ZW1CeUlEKGZpcmVzdGFydGVySXRlbURUTy5pdGVtKTtcclxuICAgIH0pLCBmaWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIE9iamVjdC5rZXlzKGl0ZW0pLmxlbmd0aCA+IDA7IH0pLCBtYXAoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBJbnZlbnRvcnlJdGVtKGl0ZW0sIGludmVudG9yeURUTy5maXJlc3RhcnRlckl0ZW1zW2luZGV4XS5xdWFudGl0eSk7XHJcbiAgICB9KSlcclxuICAgICAgICAucGlwZSh0b0FycmF5KCkpKS5waXBlKG1hcChmdW5jdGlvbiAoaXRlbXMpIHsgcmV0dXJuIG5ldyBJbnZlbnRvcnkoaXRlbXNbMV0sIGl0ZW1zWzBdLCBpdGVtc1syXSk7IH0pKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gSW52ZW50b3J5VG9JbnZlbnRvcnlEVE8oaW52KSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGZpcmVzdGFydGVySXRlbXM6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGludi5maXJlc3RhcnRlckl0ZW1zKS5tYXAoZnVuY3Rpb24gKHByb3ApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnZlbnRvcnlJdGVtKGludi5maXJlc3RhcnRlckl0ZW1zW3Byb3BdLml0ZW0uaWQsIGludi5maXJlc3RhcnRlckl0ZW1zW3Byb3BdLnF1YW50aXR5KTtcclxuICAgICAgICB9KSxcclxuICAgICAgICBmaXJld29vZEl0ZW1zOiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhpbnYuZmlyZXdvb2RJdGVtcykubWFwKGZ1bmN0aW9uIChwcm9wKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW52ZW50b3J5SXRlbShpbnYuZmlyZXdvb2RJdGVtc1twcm9wXS5pdGVtLmlkLCBpbnYuZmlyZXdvb2RJdGVtc1twcm9wXS5xdWFudGl0eSk7XHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgZmxhbW1hYmxlSXRlbXM6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGludi5mbGFtbWFibGVJdGVtcykubWFwKGZ1bmN0aW9uIChwcm9wKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW52ZW50b3J5SXRlbShpbnYuZmxhbW1hYmxlSXRlbXNbcHJvcF0uaXRlbS5pZCwgaW52LmZsYW1tYWJsZUl0ZW1zW3Byb3BdLnF1YW50aXR5KTtcclxuICAgICAgICB9KSxcclxuICAgIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgZnJvbSwgemlwIH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgbWFwLCBzaGFyZSwgc3dpdGNoTWFwIH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XHJcbmltcG9ydCB7IFVTRVJTX1VSTCB9IGZyb20gXCIuLi8uLi9taXNjL0FQSSBVUkxzXCI7XHJcbmltcG9ydCB7IEVycm9yQ29kZXMgfSBmcm9tIFwiLi4vLi4vbWlzYy9FcnJvckNvZGVzXCI7XHJcbmltcG9ydCB7IGludmVudG9yeURUT3RvSW52ZW50b3J5T2JzIH0gZnJvbSBcIi4uLy4uL21vZGVscy9EVE9zL2ludmVudG9yeS1kdG9cIjtcclxuaW1wb3J0IHsgY3JlYXRlSW5pdGlhbFVzZXJEVE8sIHVzZXJEVE90b1VzZXIsIHVzZXJUb1VzZXJEVE8sIH0gZnJvbSBcIi4uLy4uL21vZGVscy9EVE9zL3VzZXItZHRvXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVc2VyKHVzZXJuYW1lLCBwYXNzd29yZCkge1xyXG4gICAgcmV0dXJuIGZyb20oZmV0Y2goXCJodHRwOi8vbG9jYWxob3N0OjMwMDAvdXNlcnNcIiwge1xyXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoY3JlYXRlSW5pdGlhbFVzZXJEVE8odXNlcm5hbWUsIHBhc3N3b3JkKSksXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICB9LFxyXG4gICAgfSkpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRVc2VyRHRvT2JzKHVzZXJuYW1lLCBwYXNzd29yZCkge1xyXG4gICAgcmV0dXJuIGZyb20oZmV0Y2goVVNFUlNfVVJMICsgKFwiP3VzZXJuYW1lPVwiICsgdXNlcm5hbWUgKyBcIiZwYXNzd29yZD1cIiArIHBhc3N3b3JkKSlcclxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7IHJldHVybiByZXN1bHQuanNvbigpOyB9KVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uICh1c2VycykgeyByZXR1cm4gdXNlcnNbMF07IH0pKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlck9icyh1c2VybmFtZSwgcGFzc3dvcmQpIHtcclxuICAgIHZhciB1c2VyRHRvT2JzID0gZ2V0VXNlckR0b09icyh1c2VybmFtZSwgcGFzc3dvcmQpLnBpcGUobWFwKGZ1bmN0aW9uICh1c2VyRHRvKSB7XHJcbiAgICAgICAgaWYgKCF1c2VyRHRvKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRXJyb3JDb2Rlcy51c2VyTm90Rm91bmQudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgcmV0dXJuIHVzZXJEdG87XHJcbiAgICB9KSwgc2hhcmUoKSk7XHJcbiAgICByZXR1cm4gemlwKHVzZXJEdG9PYnMucGlwZShzd2l0Y2hNYXAoZnVuY3Rpb24gKHVzZXJEdG8pIHtcclxuICAgICAgICByZXR1cm4gaW52ZW50b3J5RFRPdG9JbnZlbnRvcnlPYnModXNlckR0by5pbnZlbnRvcnkpO1xyXG4gICAgfSkpLCB1c2VyRHRvT2JzKS5waXBlKG1hcChmdW5jdGlvbiAoemlwcGVkRGF0YSkge1xyXG4gICAgICAgIHJldHVybiB1c2VyRFRPdG9Vc2VyKHppcHBlZERhdGFbMV0sIHppcHBlZERhdGFbMF0pO1xyXG4gICAgfSkpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja1VzZXJuYW1lRXhpc3RzT2JzKHVzZXJuYW1lKSB7XHJcbiAgICByZXR1cm4gZnJvbShmZXRjaChVU0VSU19VUkwgKyAoXCI/dXNlcm5hbWU9XCIgKyB1c2VybmFtZSkpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgeyByZXR1cm4gcmVzdWx0Lmpzb24oKTsgfSkpLnBpcGUobWFwKGZ1bmN0aW9uICh1c2VycykgeyByZXR1cm4gdXNlcnNbMF0gIT0gbnVsbDsgfSkpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVVc2VyT2JzKHVzZXIpIHtcclxuICAgIHJldHVybiBmcm9tKGZldGNoKFwiaHR0cDovL2xvY2FsaG9zdDozMDAwL3VzZXJzL1wiICsgdXNlci5pZCwge1xyXG4gICAgICAgIG1ldGhvZDogXCJQVVRcIixcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh1c2VyVG9Vc2VyRFRPKHVzZXIpKSxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgIH0sXHJcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spXHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKEVycm9yQ29kZXMudXNlck5vdEZvdW5kLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgIH0pKTtcclxufVxyXG4iLCJpbXBvcnQgeyBmcm9tLCB6aXAgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcclxuaW1wb3J0IHsgRklSRVNUQVJURVJfSVRFTVNfVVJMLCBGSVJFV09PRF9JVEVNU19VUkwsIEZMQU1NQUJMRV9JVEVNU19VUkwgfSBmcm9tIFwiLi4vLi4vbWlzYy9BUEkgVVJMc1wiO1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmxhbW1hYmxlSXRlbUJ5SUQoaWQpIHtcclxuICAgIHJldHVybiBmcm9tKGZldGNoKEZMQU1NQUJMRV9JVEVNU19VUkwgKyAoXCJcIiArIGlkKSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7IHJldHVybiByZXN1bHQuanNvbigpOyB9KSk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpcmV3b29kSXRlbUJ5SUQoaWQpIHtcclxuICAgIHJldHVybiBmcm9tKGZldGNoKEZJUkVXT09EX0lURU1TX1VSTCArIChcIlwiICsgaWQpKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsgcmV0dXJuIHJlc3VsdC5qc29uKCk7IH0pKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmlyZXN0YXJ0ZXJJdGVtQnlJRChpZCkge1xyXG4gICAgcmV0dXJuIGZyb20oZmV0Y2goRklSRVNUQVJURVJfSVRFTVNfVVJMICsgKFwiXCIgKyBpZCkpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgeyByZXR1cm4gcmVzdWx0Lmpzb24oKTsgfSkpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxTdG9yZUl0ZW1zKCkge1xyXG4gICAgcmV0dXJuIHppcChmcm9tKGZldGNoKEZMQU1NQUJMRV9JVEVNU19VUkwpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgeyByZXR1cm4gcmVzdWx0Lmpzb24oKTsgfSlcclxuICAgICAgICAudGhlbihmdW5jdGlvbiAoaXRlbXMpIHsgcmV0dXJuIGl0ZW1zOyB9KSksIGZyb20oZmV0Y2goRklSRVdPT0RfSVRFTVNfVVJMKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsgcmV0dXJuIHJlc3VsdC5qc29uKCk7IH0pXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGl0ZW1zKSB7IHJldHVybiBpdGVtczsgfSkpLCBmcm9tKGZldGNoKEZJUkVTVEFSVEVSX0lURU1TX1VSTClcclxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7IHJldHVybiByZXN1bHQuanNvbigpOyB9KVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChpdGVtcykgeyByZXR1cm4gaXRlbXM7IH0pKSkucGlwZShtYXAoZnVuY3Rpb24gKHN0b3JlSXRlbXMpIHsgcmV0dXJuICh7XHJcbiAgICAgICAgZmxhbW1hYmxlSXRlbXM6IHN0b3JlSXRlbXNbMF0sXHJcbiAgICAgICAgZmlyZXdvb2RJdGVtczogc3RvcmVJdGVtc1sxXSxcclxuICAgICAgICBmaXJlc3RhcnRlckl0ZW1zOiBzdG9yZUl0ZW1zWzJdXHJcbiAgICB9KTsgfSkpO1xyXG59XHJcbiIsImltcG9ydCB7IGZyb21FdmVudCwgemlwLCB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IGZpbHRlciwgbWFwLCBzaGFyZSwgc3dpdGNoTWFwLCB3aXRoTGF0ZXN0RnJvbSwgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcclxuaW1wb3J0IHsgR0FNRV9JTUFHRVNfTE9DQVRJT04gfSBmcm9tIFwiLi4vLi4vbWlzYy9Bc3NldHNVUkxcIjtcclxuaW1wb3J0IHsgYnV5RmlyZXN0YXJ0ZXJJdGVtLCBidXlGaXJld29vZEl0ZW0sIGJ1eUZsYW1tYWJsZUl0ZW0sIH0gZnJvbSBcIi4uLy4uL21vZGVscy91c2VyXCI7XHJcbmltcG9ydCB7IGdldEFsbFN0b3JlSXRlbXMgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvREIgc2VydmljZXMvc3RvcmUuc2VydmljZVwiO1xyXG5pbXBvcnQgeyB1cGRhdGVVc2VyT2JzIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL0RCIHNlcnZpY2VzL3VzZXIuc2VydmljZVwiO1xyXG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50LCBjcmVhdGVJbWFnZSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9ET00uc2VydmljZVwiO1xyXG52YXIgU3RvcmVWaWV3ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU3RvcmVWaWV3KG1haW5Db250YWluZXIsIHVzZXJTdWJqZWN0KSB7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gKGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbWFpbkNvbnRhaW5lciwgXCJzdG9yZUNvbnRhaW5lclwiLCBcIlwiKSk7XHJcbiAgICAgICAgdGhpcy51c2VyU3ViamVjdCA9IHVzZXJTdWJqZWN0O1xyXG4gICAgfVxyXG4gICAgU3RvcmVWaWV3LnByb3RvdHlwZS5yZW5kZXJDb250ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgZ2V0QWxsU3RvcmVJdGVtcygpLnN1YnNjcmliZShmdW5jdGlvbiAoc3RvcmUpIHtcclxuICAgICAgICAgICAgc3RvcmUuZmlyZXdvb2RJdGVtcy5tYXAoZnVuY3Rpb24gKGZ3SXRlbSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmRyYXdTdG9yZUl0ZW0oZndJdGVtLCBidXlGaXJld29vZEl0ZW0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgc3RvcmUuZmxhbW1hYmxlSXRlbXMubWFwKGZ1bmN0aW9uIChmbUl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5kcmF3U3RvcmVJdGVtKGZtSXRlbSwgYnV5RmxhbW1hYmxlSXRlbSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzdG9yZS5maXJlc3RhcnRlckl0ZW1zLm1hcChmdW5jdGlvbiAoZnNJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZHJhd1N0b3JlSXRlbShmc0l0ZW0sIGJ1eUZpcmVzdGFydGVySXRlbSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFN0b3JlVmlldy5wcm90b3R5cGUuZHJhd1N0b3JlSXRlbSA9IGZ1bmN0aW9uIChpdGVtLCBidXlJdGVtQ2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgaXRlbUNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHRoaXMuX2NvbnRhaW5lciwgXCJzdG9yZUl0ZW1Db250YWluZXJcIiwgXCJcIik7XHJcbiAgICAgICAgY3JlYXRlSW1hZ2UoaXRlbUNvbnRhaW5lciwgXCJzdG9yZWl0ZW1JbWFnZVwiLCBHQU1FX0lNQUdFU19MT0NBVElPTiArIGl0ZW0uaW1hZ2VTcmMsIDg1LCA4NSk7XHJcbiAgICAgICAgY3JlYXRlRWxlbWVudChcInNwYW5cIiwgaXRlbUNvbnRhaW5lciwgXCJzdG9yZUl0ZW1QcmljZVwiLCBcIjxsYWJlbD5cIiArIGl0ZW0ucHJpY2UgKyBcIjwvbGFiZWw+IDxpIGNsYXNzPSdmYSBmYS1jb2lucyc+PC9pPlwiKTtcclxuICAgICAgICB2YXIgbmV3VXNlclN0YXRlT2JzID0gZnJvbUV2ZW50KGl0ZW1Db250YWluZXIsIFwiY2xpY2tcIikucGlwZSh3aXRoTGF0ZXN0RnJvbSh0aGlzLnVzZXJTdWJqZWN0KSwgZmlsdGVyKGZ1bmN0aW9uIChldlVzZXIpIHsgcmV0dXJuIGl0ZW0ucHJpY2UgPD0gZXZVc2VyWzFdLmJhbGFuY2U7IH0pLCBtYXAoZnVuY3Rpb24gKGV2QW5kVXNlcikgeyByZXR1cm4gYnV5SXRlbUNhbGxiYWNrKGV2QW5kVXNlclsxXSwgaXRlbSk7IH0pLCBzaGFyZSgpKTtcclxuICAgICAgICB6aXAobmV3VXNlclN0YXRlT2JzLnBpcGUoc3dpdGNoTWFwKGZ1bmN0aW9uICh1c2VyKSB7IHJldHVybiB1cGRhdGVVc2VyT2JzKHVzZXIpOyB9KSksIG5ld1VzZXJTdGF0ZU9icylcclxuICAgICAgICAgICAgLnBpcGUobWFwKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4WzFdOyB9KSlcclxuICAgICAgICAgICAgLnN1YnNjcmliZSh0aGlzLnVzZXJTdWJqZWN0KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gU3RvcmVWaWV3O1xyXG59KCkpO1xyXG5leHBvcnQgeyBTdG9yZVZpZXcgfTtcclxuIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IE9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvZnJvbSc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL3V0aWwvaWRlbnRpdHknO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4uL3V0aWwvbm9vcCc7XG5pbXBvcnQgeyBwb3BSZXN1bHRTZWxlY3RvciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5leHBvcnQgZnVuY3Rpb24gd2l0aExhdGVzdEZyb20oKSB7XG4gICAgdmFyIGlucHV0cyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGlucHV0c1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcHJvamVjdCA9IHBvcFJlc3VsdFNlbGVjdG9yKGlucHV0cyk7XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgbGVuID0gaW5wdXRzLmxlbmd0aDtcbiAgICAgICAgdmFyIG90aGVyVmFsdWVzID0gbmV3IEFycmF5KGxlbik7XG4gICAgICAgIHZhciBoYXNWYWx1ZSA9IGlucHV0cy5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0pO1xuICAgICAgICB2YXIgcmVhZHkgPSBmYWxzZTtcbiAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgaW5uZXJGcm9tKGlucHV0c1tpXSkuc3Vic2NyaWJlKG5ldyBPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgb3RoZXJWYWx1ZXNbaV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlYWR5ICYmICFoYXNWYWx1ZVtpXSkge1xuICAgICAgICAgICAgICAgICAgICBoYXNWYWx1ZVtpXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIChyZWFkeSA9IGhhc1ZhbHVlLmV2ZXJ5KGlkZW50aXR5KSkgJiYgKGhhc1ZhbHVlID0gbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgbm9vcCkpO1xuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBfbG9vcF8xKGkpO1xuICAgICAgICB9XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUobmV3IE9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChyZWFkeSkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBfX3NwcmVhZEFycmF5KFt2YWx1ZV0sIF9fcmVhZChvdGhlclZhbHVlcykpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChwcm9qZWN0ID8gcHJvamVjdC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZCh2YWx1ZXMpKSkgOiB2YWx1ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aXRoTGF0ZXN0RnJvbS5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVFbGVtZW50IH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL0RPTS5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IGlzVXNlciB9IGZyb20gXCIuLi8uLi9tb2RlbHMvdXNlclwiO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBTdG9yZVZpZXcgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9zdG9yZS12aWV3XCI7XHJcbnZhciBHYW1lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gR2FtZShtYWluQ29udGFpbmVyLCBwYXJhbWV0ZXIpIHtcclxuICAgICAgICB0aGlzLl9jb250YWluZXIgPSAoY3JlYXRlRWxlbWVudChcImRpdlwiLCBtYWluQ29udGFpbmVyLCBcImdhbWVDb250YWluZXJcIiwgXCJcIikpO1xyXG4gICAgICAgIHRoaXMudXNlclN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KHBhcmFtZXRlcik7XHJcbiAgICAgICAgdGhpcy51c2VyU3ViamVjdC5zdWJzY3JpYmUoZnVuY3Rpb24gKHVzZXIpIHsgcmV0dXJuIGNvbnNvbGUubG9nKHVzZXIpOyB9KTtcclxuICAgIH1cclxuICAgIEdhbWUucHJvdG90eXBlLnJlbmRlckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbmV3IFN0b3JlVmlldyh0aGlzLl9jb250YWluZXIsIHRoaXMudXNlclN1YmplY3QpLnJlbmRlckNvbnRlbnQoKTtcclxuICAgIH07XHJcbiAgICBHYW1lLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkgeyB9O1xyXG4gICAgR2FtZS5hbnlUb1BhZ2VQYXJhbWV0ZXIgPSBmdW5jdGlvbiAocGFyYW1ldGVyKSB7XHJcbiAgICAgICAgaWYgKGlzVXNlcihwYXJhbWV0ZXIpKVxyXG4gICAgICAgICAgICByZXR1cm4gcGFyYW1ldGVyO1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgR2FtZVBhZ2UgcGFyYW1ldGVyXCIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBHYW1lO1xyXG59KCkpO1xyXG5leHBvcnQgeyBHYW1lIH07XHJcbnZhciBfX2Fzc2VydFN0YXRpY0ludGVyZmFjZSA9IEdhbWU7XHJcbiIsImltcG9ydCB7IElNQUdFU19MT0NBVElPTiB9IGZyb20gXCIuLi8uLi9taXNjL0Fzc2V0c1VSTFwiO1xyXG5pbXBvcnQgeyBQYWdlIH0gZnJvbSBcIi4uLy4uL21pc2MvUGFnZVwiO1xyXG5pbXBvcnQgeyBjcmVhdGVCdXR0b24sIGNyZWF0ZUVsZW1lbnQsIGNyZWF0ZUltYWdlLCB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9ET00uc2VydmljZVwiO1xyXG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwiLi4vcm91dGVyXCI7XHJcbnZhciBIb21lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSG9tZShtYWluQ29udGFpbmVyKSB7XHJcbiAgICAgICAgdGhpcy5tYWluQ29udGFpbmVyID0gbWFpbkNvbnRhaW5lcjtcclxuICAgIH1cclxuICAgIEhvbWUucHJvdG90eXBlLnJlbmRlckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCB0aGlzLm1haW5Db250YWluZXIsIFwiaG9tZUNvbnRhaW5lclwiLCBcIlwiKTtcclxuICAgICAgICBjcmVhdGVFbGVtZW50KFwiaDFcIiwgdGhpcy5fY29udGFpbmVyLCBcImdhbWVUaXRsZVwiLCBcIktlZXAgaXQgTGl0XCIpO1xyXG4gICAgICAgIGNyZWF0ZUltYWdlKHRoaXMuX2NvbnRhaW5lciwgXCJob21lSW1hZ2VcIiwgSU1BR0VTX0xPQ0FUSU9OICsgXCJ0aHVtYk1hcmsuanBnXCIsIDY1MCwgNDIwKTtcclxuICAgICAgICBjcmVhdGVFbGVtZW50KFwiaDNcIiwgdGhpcy5fY29udGFpbmVyLCBcImdhbWVEZXNjcmlwdGlvblwiLCBcIlRoaXMgaXMgTWFyay4gSGUgaXMgYSB3ZWIgZGV2ZWxvcGVyLjxicj4gS2VlcCBoaW0gd2FybSBzbyBoZSBtYXkgY29udGludWUgY3JlYXRpbmcgd2ViIGFwcHMgYW5kIGV2ZW50dWFseSBvcGVuIGhpcyBvd24gc3RhcnR1cC48YnI+IElmIHlvdSBkbyB0aGlzLCBoZSB3aWxsIGtlZXAgZ2l2aW5nIHlvdSBtb25leSBmb3IgZmlyZSBtYW50YWluYW5jZSBtYXRlcmlhbCwgYW5kIHRoZSByZXN0IGlzIHlvdXJzIHRvIHNwZW5kIDopXCIpO1xyXG4gICAgICAgIGNyZWF0ZUJ1dHRvbih0aGlzLl9jb250YWluZXIsIFwicGxheUJ1dHRvblwiLCBcIlBMQVlcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBSb3V0ZXIuTmF2aWdhdG9yLmdvVG8oUGFnZS5Mb2dpbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEhvbWU7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEhvbWUgfTtcclxuIiwiaW1wb3J0IHsgRXJyb3JDb2RlcyB9IGZyb20gXCIuLi8uLi9taXNjL0Vycm9yQ29kZXNcIjtcclxuaW1wb3J0IHsgUGFnZSB9IGZyb20gXCIuLi8uLi9taXNjL1BhZ2VcIjtcclxuaW1wb3J0IHsgZ2V0VXNlck9icyB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9EQiBzZXJ2aWNlcy91c2VyLnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgY3JlYXRlQnV0dG9uLCBjcmVhdGVFbGVtZW50LCBjcmVhdGVJbnB1dCwgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvRE9NLnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSBcIi4uL3JvdXRlclwiO1xyXG52YXIgTG9naW4gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBMb2dpbihtYWluQ29udGFpbmVyKSB7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gKGNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIsIG1haW5Db250YWluZXIsIFwibG9naW5Gb3JtXCIsIFwiXCIpKTtcclxuICAgIH1cclxuICAgIExvZ2luLnByb3RvdHlwZS5yZW5kZXJDb250ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJoMlwiLCB0aGlzLl9jb250YWluZXIsIFwibG9naW5IZWFkbGluZVwiLCBcIkVOVEVSIFlPVVIgQ1JFREVOVElBTFM6XCIpO1xyXG4gICAgICAgIHZhciB1c2VybmFtZUlucHV0ID0gY3JlYXRlSW5wdXQoXCJ0ZXh0XCIsIHRoaXMuX2NvbnRhaW5lciwgXCJsb2dpbklucHV0XCIsIHRydWUsIFwiVXNlcm5hbWVcIik7XHJcbiAgICAgICAgdmFyIHBhc3N3b3JkSW5wdXQgPSBjcmVhdGVJbnB1dChcInBhc3N3b3JkXCIsIHRoaXMuX2NvbnRhaW5lciwgXCJsb2dpbklucHV0XCIsIHRydWUsIFwiUGFzc3dvcmRcIik7XHJcbiAgICAgICAgY3JlYXRlQnV0dG9uKHRoaXMuX2NvbnRhaW5lciwgXCJsb2dpblN1Ym1pdEJ0blwiLCBcIkxvZ2luXCIsIG51bGwpO1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5vbnN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZ2V0VXNlck9icyh1c2VybmFtZUlucHV0LnZhbHVlLCBwYXNzd29yZElucHV0LnZhbHVlKS5zdWJzY3JpYmUoe1xyXG4gICAgICAgICAgICAgICAgLy9wcmVkbG96ZW5vIHUgZG9rdW1lbnRhY2lqaSB6YSBrYWQgc2UgaGFuZGxlIGdyZXNrYVxyXG4gICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHVzZXIpIHsgcmV0dXJuIFJvdXRlci5OYXZpZ2F0b3IuZ29UbyhQYWdlLkdhbWUsIHVzZXIpOyB9LFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUubWVzc2FnZSA9PT0gRXJyb3JDb2Rlcy51c2VyTm90Rm91bmQudG9TdHJpbmcoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJXcm9uZyBjcmVkZW50aWFsc1wiKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgbm9BY2MgPSAoY3JlYXRlRWxlbWVudChcImFcIiwgdGhpcy5fY29udGFpbmVyLCBcImRvbnRIYXZlQWNjXCIsIFwiSSBkb24ndCBoYXZlIGFuIGFjb3VudFwiKSk7XHJcbiAgICAgICAgbm9BY2Mub25jbGljayA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFJvdXRlci5OYXZpZ2F0b3IuZ29UbyhQYWdlLlJlZ2lzdGVyKTsgfTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTG9naW47XHJcbn0oKSk7XHJcbmV4cG9ydCB7IExvZ2luIH07XHJcbiIsImltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi9tZXJnZU1hcCc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL3V0aWwvaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQWxsKGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBJbmZpbml0eTsgfVxuICAgIHJldHVybiBtZXJnZU1hcChpZGVudGl0eSwgY29uY3VycmVudCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUFsbC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG52YXIgQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEFjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIHJldHVybiBBY3Rpb247XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgQWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIGludGVydmFsUHJvdmlkZXIgPSB7XG4gICAgc2V0SW50ZXJ2YWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsZWdhdGUgPSBpbnRlcnZhbFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0SW50ZXJ2YWwpIHx8IHNldEludGVydmFsKS5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpO1xuICAgIH0sXG4gICAgY2xlYXJJbnRlcnZhbDogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBpbnRlcnZhbFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuY2xlYXJJbnRlcnZhbCkgfHwgY2xlYXJJbnRlcnZhbCkoaGFuZGxlKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJ2YWxQcm92aWRlci5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJy4vQWN0aW9uJztcbmltcG9ydCB7IGludGVydmFsUHJvdmlkZXIgfSBmcm9tICcuL2ludGVydmFsUHJvdmlkZXInO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi4vdXRpbC9hcnJSZW1vdmUnO1xudmFyIEFzeW5jQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXN5bmNBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNjaGVkdWxlciwgd29yaykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICBfdGhpcy53b3JrID0gd29yaztcbiAgICAgICAgX3RoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB2YXIgaWQgPSB0aGlzLmlkO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZWxheSA9IGRlbGF5O1xuICAgICAgICB0aGlzLmlkID0gdGhpcy5pZCB8fCB0aGlzLnJlcXVlc3RBc3luY0lkKHNjaGVkdWxlciwgdGhpcy5pZCwgZGVsYXkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5yZXF1ZXN0QXN5bmNJZCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIsIF9pZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIHJldHVybiBpbnRlcnZhbFByb3ZpZGVyLnNldEludGVydmFsKHNjaGVkdWxlci5mbHVzaC5iaW5kKHNjaGVkdWxlciwgdGhpcyksIGRlbGF5KTtcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZCA9IGZ1bmN0aW9uIChfc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmIChkZWxheSAhPSBudWxsICYmIHRoaXMuZGVsYXkgPT09IGRlbGF5ICYmIHRoaXMucGVuZGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBpZDtcbiAgICAgICAgfVxuICAgICAgICBpbnRlcnZhbFByb3ZpZGVyLmNsZWFySW50ZXJ2YWwoaWQpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLmV4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignZXhlY3V0aW5nIGEgY2FuY2VsbGVkIGFjdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLl9leGVjdXRlKHN0YXRlLCBkZWxheSk7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucGVuZGluZyA9PT0gZmFsc2UgJiYgdGhpcy5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZCh0aGlzLnNjaGVkdWxlciwgdGhpcy5pZCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5fZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgX2RlbGF5KSB7XG4gICAgICAgIHZhciBlcnJvcmVkID0gZmFsc2U7XG4gICAgICAgIHZhciBlcnJvclZhbHVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy53b3JrKHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZXJyb3JlZCA9IHRydWU7XG4gICAgICAgICAgICBlcnJvclZhbHVlID0gKCEhZSAmJiBlKSB8fCBuZXcgRXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yZWQpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHJldHVybiBlcnJvclZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIGlkID0gX2EuaWQsIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcbiAgICAgICAgICAgIHZhciBhY3Rpb25zID0gc2NoZWR1bGVyLmFjdGlvbnM7XG4gICAgICAgICAgICB0aGlzLndvcmsgPSB0aGlzLnN0YXRlID0gdGhpcy5zY2hlZHVsZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBhcnJSZW1vdmUoYWN0aW9ucywgdGhpcyk7XG4gICAgICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHNjaGVkdWxlciwgaWQsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZWxheSA9IG51bGw7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBc3luY0FjdGlvbjtcbn0oQWN0aW9uKSk7XG5leHBvcnQgeyBBc3luY0FjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNBY3Rpb24uanMubWFwIiwiZXhwb3J0IHZhciBkYXRlVGltZXN0YW1wUHJvdmlkZXIgPSB7XG4gICAgbm93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmRlbGVnYXRlIHx8IERhdGUpLm5vdygpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRlVGltZXN0YW1wUHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgZGF0ZVRpbWVzdGFtcFByb3ZpZGVyIH0gZnJvbSAnLi9zY2hlZHVsZXIvZGF0ZVRpbWVzdGFtcFByb3ZpZGVyJztcbnZhciBTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjaGVkdWxlcihzY2hlZHVsZXJBY3Rpb25DdG9yLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlci5ub3c7IH1cbiAgICAgICAgdGhpcy5zY2hlZHVsZXJBY3Rpb25DdG9yID0gc2NoZWR1bGVyQWN0aW9uQ3RvcjtcbiAgICAgICAgdGhpcy5ub3cgPSBub3c7XG4gICAgfVxuICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAod29yaywgZGVsYXksIHN0YXRlKSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gbmV3IHRoaXMuc2NoZWR1bGVyQWN0aW9uQ3Rvcih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgU2NoZWR1bGVyLm5vdyA9IGRhdGVUaW1lc3RhbXBQcm92aWRlci5ub3c7XG4gICAgcmV0dXJuIFNjaGVkdWxlcjtcbn0oKSk7XG5leHBvcnQgeyBTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNjaGVkdWxlci5qcy5tYXAiLCJpbXBvcnQgeyBBc3luY0FjdGlvbiB9IGZyb20gJy4vQXN5bmNBY3Rpb24nO1xuaW1wb3J0IHsgQXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuL0FzeW5jU2NoZWR1bGVyJztcbmV4cG9ydCB2YXIgYXN5bmNTY2hlZHVsZXIgPSBuZXcgQXN5bmNTY2hlZHVsZXIoQXN5bmNBY3Rpb24pO1xuZXhwb3J0IHZhciBhc3luYyA9IGFzeW5jU2NoZWR1bGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTY2hlZHVsZXIgfSBmcm9tICcuLi9TY2hlZHVsZXInO1xudmFyIEFzeW5jU2NoZWR1bGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXN5bmNTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNTY2hlZHVsZXIoU2NoZWR1bGVyQWN0aW9uLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlci5ub3c7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgU2NoZWR1bGVyQWN0aW9uLCBub3cpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmFjdGlvbnMgPSBbXTtcbiAgICAgICAgX3RoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5fc2NoZWR1bGVkID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFzeW5jU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLmFjdGlvbnM7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChhY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNTY2hlZHVsZXI7XG59KFNjaGVkdWxlcikpO1xuZXhwb3J0IHsgQXN5bmNTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jU2NoZWR1bGVyLmpzLm1hcCIsImltcG9ydCB7IGZyb21FdmVudCwgbWVyZ2UgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIG1hcCwgc3dpdGNoTWFwIH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XHJcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwiLi4vLi4vbWlzYy9QYWdlXCI7XHJcbmltcG9ydCB7IGNoZWNrVXNlcm5hbWVFeGlzdHNPYnMsIGNyZWF0ZVVzZXIsIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL0RCIHNlcnZpY2VzL3VzZXIuc2VydmljZVwiO1xyXG5pbXBvcnQgeyBjcmVhdGVCdXR0b24sIGNyZWF0ZUVsZW1lbnQsIGNyZWF0ZUlucHV0LCB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9ET00uc2VydmljZVwiO1xyXG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwiLi4vcm91dGVyXCI7XHJcbnZhciBSZWdpc3RlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJlZ2lzdGVyKG1haW5Db250YWluZXIpIHtcclxuICAgICAgICB0aGlzLl9jb250YWluZXIgPSAoY3JlYXRlRWxlbWVudChcImZvcm1cIiwgbWFpbkNvbnRhaW5lciwgXCJyZWdpc3RlckZvcm1cIiwgXCJcIikpO1xyXG4gICAgfVxyXG4gICAgUmVnaXN0ZXIucHJvdG90eXBlLnJlbmRlckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHRoaXMuX2NvbnRhaW5lciwgXCJcIiwgXCI8aSBjbGFzcz0nZmFzIGZhLWFycm93LWFsdC1jaXJjbGUtbGVmdCBiYWNrQXJyb3cnPjwvaT5cIikub25jbGljayA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFJvdXRlci5OYXZpZ2F0b3IuZ29UbyhQYWdlLkxvZ2luKTsgfTtcclxuICAgICAgICBjcmVhdGVFbGVtZW50KFwiaDJcIiwgdGhpcy5fY29udGFpbmVyLCBcInJlZ2lzdGVySGVhZGxpbmVcIiwgXCJFTlRFUiBZT1VSIENSRURFTlRJQUxTOlwiKTtcclxuICAgICAgICB2YXIgdXNlcm5hbWVJbnB1dCA9IGNyZWF0ZUlucHV0KFwidGV4dFwiLCB0aGlzLl9jb250YWluZXIsIFwicmVnaXN0ZXJJbnB1dFwiLCB0cnVlLCBcIlVzZXJuYW1lXCIpO1xyXG4gICAgICAgIHZhciB1c2VybmFtZUVycm9yTGFiZWwgPSAoY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIHRoaXMuX2NvbnRhaW5lciwgXCJyZWdpc3RlckVycm9yIGVycm9ySGlkZGVuXCIsIFwiVXNlcm5hbWUgYWxyZWFkeSB0YWtlbiFcIikpO1xyXG4gICAgICAgIGZyb21FdmVudCh1c2VybmFtZUlucHV0LCBcImlucHV0XCIpXHJcbiAgICAgICAgICAgIC5waXBlKGRlYm91bmNlVGltZSg4MDApLCBtYXAoZnVuY3Rpb24gKGV2KSB7IHJldHVybiBldi50YXJnZXQudmFsdWU7IH0pLCBzd2l0Y2hNYXAoZnVuY3Rpb24gKHVzZXJuYW1lKSB7IHJldHVybiBjaGVja1VzZXJuYW1lRXhpc3RzT2JzKHVzZXJuYW1lKTsgfSkpXHJcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoZnVuY3Rpb24gKGV4aXN0cykge1xyXG4gICAgICAgICAgICByZXR1cm4gZXhpc3RzXHJcbiAgICAgICAgICAgICAgICA/IF90aGlzLnNob3dFcnJvck1lc3NhZ2UodXNlcm5hbWVFcnJvckxhYmVsKVxyXG4gICAgICAgICAgICAgICAgOiBfdGhpcy5oaWRlRXJyb3JNZXNzYWdlKHVzZXJuYW1lRXJyb3JMYWJlbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIHBhc3N3b3JkSW5wdXQgPSBjcmVhdGVJbnB1dChcInBhc3N3b3JkXCIsIHRoaXMuX2NvbnRhaW5lciwgXCJyZWdpc3RlcklucHV0XCIsIHRydWUsIFwiUGFzc3dvcmRcIik7XHJcbiAgICAgICAgdmFyIHJlcGVhdFBhc3N3b3JkSW5wdXQgPSBjcmVhdGVJbnB1dChcInBhc3N3b3JkXCIsIHRoaXMuX2NvbnRhaW5lciwgXCJyZWdpc3RlcklucHV0XCIsIHRydWUsIFwiUGFzc3dvcmRcIik7XHJcbiAgICAgICAgdmFyIHBhc3Nzd29yZEVycm9yTGFiZWwgPSAoY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIHRoaXMuX2NvbnRhaW5lciwgXCJwYXNzd29yZEVycm9yIGVycm9ySGlkZGVuXCIsIFwiUGFzc3dvcmRzIGRvbid0IG1hdGNoXCIpKTtcclxuICAgICAgICBtZXJnZShmcm9tRXZlbnQocmVwZWF0UGFzc3dvcmRJbnB1dCwgXCJpbnB1dFwiKSwgZnJvbUV2ZW50KHBhc3N3b3JkSW5wdXQsIFwiaW5wdXRcIikpLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJlcGVhdFBhc3N3b3JkSW5wdXQudmFsdWUgPT09IHBhc3N3b3JkSW5wdXQudmFsdWVcclxuICAgICAgICAgICAgICAgID8gX3RoaXMuaGlkZUVycm9yTWVzc2FnZShwYXNzc3dvcmRFcnJvckxhYmVsKVxyXG4gICAgICAgICAgICAgICAgOiBfdGhpcy5zaG93RXJyb3JNZXNzYWdlKHBhc3Nzd29yZEVycm9yTGFiZWwpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNyZWF0ZUJ1dHRvbih0aGlzLl9jb250YWluZXIsIFwicmVnaXN0ZXJTdWJtaXRCdG5cIiwgXCJSZWdpc3RlclwiLCBudWxsKTtcclxuICAgICAgICB0aGlzLl9jb250YWluZXIub25zdWJtaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdXNlcm5hbWVFcnJvckxhYmVsLmNsYXNzTGlzdC5jb250YWlucyhcImVycm9yVmlzaWJsZVwiKSAmJlxyXG4gICAgICAgICAgICAgICAgIXBhc3Nzd29yZEVycm9yTGFiZWwuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZXJyb3JWaXNpYmxlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBjcmVhdGVVc2VyKHVzZXJuYW1lSW5wdXQudmFsdWUsIHBhc3N3b3JkSW5wdXQudmFsdWUpLnN1YnNjcmliZShmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJvdXRlci5OYXZpZ2F0b3IuZ29UbyhQYWdlLkxvZ2luKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIFJlZ2lzdGVyLnByb3RvdHlwZS5zaG93RXJyb3JNZXNzYWdlID0gZnVuY3Rpb24gKGVycm9yTGFiZWwpIHtcclxuICAgICAgICBlcnJvckxhYmVsLmNsYXNzTGlzdC5yZXBsYWNlKFwiZXJyb3JIaWRkZW5cIiwgXCJlcnJvclZpc2libGVcIik7XHJcbiAgICB9O1xyXG4gICAgUmVnaXN0ZXIucHJvdG90eXBlLmhpZGVFcnJvck1lc3NhZ2UgPSBmdW5jdGlvbiAoZXJyb3JMYWJlbCkge1xyXG4gICAgICAgIGVycm9yTGFiZWwuY2xhc3NMaXN0LnJlcGxhY2UoXCJlcnJvclZpc2libGVcIiwgXCJlcnJvckhpZGRlblwiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVnaXN0ZXI7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFJlZ2lzdGVyIH07XHJcbiIsImltcG9ydCB7IGFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGRlYm91bmNlVGltZShkdWVUaW1lLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNTY2hlZHVsZXI7IH1cbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBhY3RpdmVUYXNrID0gbnVsbDtcbiAgICAgICAgdmFyIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgIHZhciBsYXN0VGltZSA9IG51bGw7XG4gICAgICAgIHZhciBlbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGFjdGl2ZVRhc2spIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgYWN0aXZlVGFzayA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gbGFzdFZhbHVlO1xuICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gZW1pdFdoZW5JZGxlKCkge1xuICAgICAgICAgICAgdmFyIHRhcmdldFRpbWUgPSBsYXN0VGltZSArIGR1ZVRpbWU7XG4gICAgICAgICAgICB2YXIgbm93ID0gc2NoZWR1bGVyLm5vdygpO1xuICAgICAgICAgICAgaWYgKG5vdyA8IHRhcmdldFRpbWUpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrID0gdGhpcy5zY2hlZHVsZSh1bmRlZmluZWQsIHRhcmdldFRpbWUgLSBub3cpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVtaXQoKTtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBsYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIGxhc3RUaW1lID0gc2NoZWR1bGVyLm5vdygpO1xuICAgICAgICAgICAgaWYgKCFhY3RpdmVUYXNrKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlVGFzayA9IHNjaGVkdWxlci5zY2hlZHVsZShlbWl0V2hlbklkbGUsIGR1ZVRpbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBlbWl0KCk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGFzdFZhbHVlID0gYWN0aXZlVGFzayA9IG51bGw7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYm91bmNlVGltZS5qcy5tYXAiLCJpbXBvcnQgeyBtZXJnZUFsbCB9IGZyb20gJy4uL29wZXJhdG9ycy9tZXJnZUFsbCc7XG5pbXBvcnQgeyBpbnRlcm5hbEZyb21BcnJheSB9IGZyb20gJy4vZnJvbUFycmF5JztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4vZnJvbSc7XG5pbXBvcnQgeyBFTVBUWSB9IGZyb20gJy4vZW1wdHknO1xuaW1wb3J0IHsgcG9wTnVtYmVyLCBwb3BTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2FyZ3MnO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gcG9wU2NoZWR1bGVyKGFyZ3MpO1xuICAgIHZhciBjb25jdXJyZW50ID0gcG9wTnVtYmVyKGFyZ3MsIEluZmluaXR5KTtcbiAgICB2YXIgc291cmNlcyA9IGFyZ3M7XG4gICAgcmV0dXJuICFzb3VyY2VzLmxlbmd0aFxuICAgICAgICA/XG4gICAgICAgICAgICBFTVBUWVxuICAgICAgICA6IHNvdXJjZXMubGVuZ3RoID09PSAxXG4gICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgaW5uZXJGcm9tKHNvdXJjZXNbMF0pXG4gICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgbWVyZ2VBbGwoY29uY3VycmVudCkoaW50ZXJuYWxGcm9tQXJyYXkoc291cmNlcywgc2NoZWR1bGVyKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZS5qcy5tYXAiLCJpbXBvcnQgeyBQYWdlIH0gZnJvbSBcIi4uL21pc2MvUGFnZVwiO1xyXG5pbXBvcnQgeyBHYW1lIH0gZnJvbSBcIi4vcGFnZXMvZ2FtZVwiO1xyXG5pbXBvcnQgeyBIb21lIH0gZnJvbSBcIi4vcGFnZXMvaG9tZVwiO1xyXG5pbXBvcnQgeyBMb2dpbiB9IGZyb20gXCIuL3BhZ2VzL2xvZ2luXCI7XHJcbmltcG9ydCB7IFJlZ2lzdGVyIH0gZnJvbSBcIi4vcGFnZXMvcmVnaXN0ZXJcIjtcclxudmFyIFJvdXRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJvdXRlcigpIHtcclxuICAgICAgICB0aGlzLl9tYWluQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYWluXCIpO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJvdXRlciwgXCJOYXZpZ2F0b3JcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIHJldHVybiAoX2EgPSB0aGlzLl9uYXZpZ2F0b3IpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICh0aGlzLl9uYXZpZ2F0b3IgPSBuZXcgUm91dGVyKCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIFJvdXRlci5wcm90b3R5cGUuZ29UbyA9IGZ1bmN0aW9uIChwYWdlTmFtZSwgcGFnZVBhcmFtKSB7XHJcbiAgICAgICAgaWYgKHBhZ2VQYXJhbSA9PT0gdm9pZCAwKSB7IHBhZ2VQYXJhbSA9IG51bGw7IH1cclxuICAgICAgICB0aGlzLmNsZWFyTWFpbkNvbnRhaW5lcigpO1xyXG4gICAgICAgIHRoaXMuZGlzcG9zZVN1YnNjcmlwdGlvbnMoKTtcclxuICAgICAgICBzd2l0Y2ggKHBhZ2VOYW1lKSB7XHJcbiAgICAgICAgICAgIGNhc2UgUGFnZS5Ib21lOlxyXG4gICAgICAgICAgICAgICAgbmV3IEhvbWUodGhpcy5fbWFpbkNvbnRhaW5lcikucmVuZGVyQ29udGVudCgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUGFnZS5HYW1lOlxyXG4gICAgICAgICAgICAgICAgdmFyIGdhbWUgPSBuZXcgR2FtZSh0aGlzLl9tYWluQ29udGFpbmVyLCBHYW1lLmFueVRvUGFnZVBhcmFtZXRlcihwYWdlUGFyYW0pKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFnZVRvRGlzcG9zZSA9IGdhbWU7XHJcbiAgICAgICAgICAgICAgICBnYW1lLnJlbmRlckNvbnRlbnQoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFBhZ2UuTG9naW46XHJcbiAgICAgICAgICAgICAgICBuZXcgTG9naW4odGhpcy5fbWFpbkNvbnRhaW5lcikucmVuZGVyQ29udGVudCgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUGFnZS5SZWdpc3RlcjpcclxuICAgICAgICAgICAgICAgIG5ldyBSZWdpc3Rlcih0aGlzLl9tYWluQ29udGFpbmVyKS5yZW5kZXJDb250ZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFJvdXRlci5wcm90b3R5cGUuY2xlYXJNYWluQ29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuX21haW5Db250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgIH07XHJcbiAgICBSb3V0ZXIucHJvdG90eXBlLmRpc3Bvc2VTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnBhZ2VUb0Rpc3Bvc2UpXHJcbiAgICAgICAgICAgIHRoaXMucGFnZVRvRGlzcG9zZS5kaXNwb3NlKCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJvdXRlcjtcclxufSgpKTtcclxuZXhwb3J0IHsgUm91dGVyIH07XHJcbiIsImltcG9ydCB7IFBhZ2UgfSBmcm9tIFwiLi9taXNjL1BhZ2VcIjtcclxuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSBcIi4vdmlld3Mvcm91dGVyXCI7XHJcblJvdXRlci5OYXZpZ2F0b3IuZ29UbyhQYWdlLkhvbWUpO1xyXG4vLyBjb25zdCBmb29TdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdChudWxsKTtcclxuLy8gY29uc3QgYmFyU3ViamVjdCA9IG5ldyBTdWJqZWN0KCk7XHJcbi8vIGJhclN1YmplY3Quc3Vic2NyaWJlKGZvb1N1YmplY3QpO1xyXG4vLyBiYXJTdWJqZWN0Lm5leHQoJ2JhcicpO1xyXG4vLyBmb29TdWJqZWN0LnN1YnNjcmliZSh4PT5jb25zb2xlLmxvZyh4KSk7XHJcbi8vZnJvbSBldmVudCBjbGljayBwcmVuYW1hcGlyYSBzZSBuYSBub3ZvIHN0YW5qZSBrcm96IGZ1bmtjaWp1LCBpc2tvbWJpbnVqZSBzZSBzYSBwb3NsZWRuam9tIHZyZWRub3NjdSwgc3Vic2NyaWJlIHBhIHNlIG5lIHpvdmUgbmV4dCBuZWdvIHNlIHByb3NsZWRpIHN1YmplY3Qga29qaSBjZSBvbmRhIHRvIGRhIGVtaXR1amUgXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=