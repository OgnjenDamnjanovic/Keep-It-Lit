/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var n;!function(n){n[n.Home=0]="Home",n[n.Game=1]="Game",n[n.Login=2]="Login",n[n.Register=3]="Register"}(n||(n={}));var t="src/assets/Images/";function e(n,t,e,r){var o=document.createElement(n);return o.className=e,o.innerHTML=r,t.appendChild(o),o}function r(n,t,r,o){var i=e("button",n,t,r);return i.onclick=function(){o&&o()},i}function o(n,t,r,o,i){var u=e("input",t,r,"");return u.required=o,u.type=n,u.placeholder=i,u}function i(n,t,r,o,i){var u=e("img",n,t,"");return u.src=r,u.width=o,u.height=i,u}var u,c=function(){function n(n){this._container=e("form",n,"homeForm","")}return n.prototype.renderContent=function(){i(this._container,"homeImage ",t+"fullMark.jpg",1400,900)},n.prototype.dispose=function(){},n}(),s=function(){function o(n){this.mainContainer=n}return o.prototype.renderContent=function(){this._container=e("div",this.mainContainer,"homeContainer",""),e("h1",this._container,"gameTitle","Keep it Lit"),i(this._container,"homeImage",t+"thumbMark.jpg",650,420),e("h3",this._container,"gameDescription","This is Mark. He is a web developer.<br> Keep him warm so he may continue creating web apps and eventualy open his own startup.<br> If you do this, he will keep giving you money for fire mantainance material, and the rest is yours to spend :)"),r(this._container,"playButton","PLAY",(function(){zn.Navigator.goTo(n.Login)}))},o}();!function(n){n[n.userNotFound=0]="userNotFound"}(u||(u={}));var a=function(n,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e])})(n,t)};function l(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function e(){this.constructor=n}a(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}function f(n,t){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(n,u)}catch(n){i=[6,n],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}function h(n){var t="function"==typeof Symbol&&Symbol.iterator,e=t&&n[t],r=0;if(e)return e.call(n);if(n&&"number"==typeof n.length)return{next:function(){return n&&r>=n.length&&(n=void 0),{value:n&&n[r++],done:!n}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function d(n,t){var e="function"==typeof Symbol&&n[Symbol.iterator];if(!e)return n;var r,o,i=e.call(n),u=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(n){o={error:n}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u}function p(n,t){for(var e=0,r=t.length,o=n.length;e<r;e++,o++)n[o]=t[e];return n}function v(n){return this instanceof v?(this.v=n,this):new v(n)}function y(n,t,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=e.apply(n,t||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(n){o[n]&&(r[n]=function(t){return new Promise((function(e,r){i.push([n,t,e,r])>1||c(n,t)}))})}function c(n,t){try{(e=o[n](t)).value instanceof v?Promise.resolve(e.value.v).then(s,a):l(i[0][2],e)}catch(n){l(i[0][3],n)}var e}function s(n){c("next",n)}function a(n){c("throw",n)}function l(n,t){n(t),i.shift(),i.length&&c(i[0][0],i[0][1])}}Object.create,Object.create;var b=function(n){return n&&"number"==typeof n.length&&"function"!=typeof n};function m(n){return"function"==typeof n}function w(n){return m(null==n?void 0:n.then)}var g,_="function"==typeof Symbol&&Symbol.observable||"@@observable",x=((g=function(n){var t;t=this,Error.call(t),t.stack=(new Error).stack,this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(n,t){return t+1+") "+n.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}).prototype=Object.create(Error.prototype),g.prototype.constructor=g,g);function I(n,t){if(n){var e=n.indexOf(t);0<=e&&n.splice(e,1)}}var E=function(){function n(n){this.initialTeardown=n,this.closed=!1,this._parentage=null,this._teardowns=null}return n.prototype.unsubscribe=function(){var n,t,e,r,o;if(!this.closed){this.closed=!0;var i=this._parentage;if(i)if(this._parentage=null,Array.isArray(i))try{for(var u=h(i),c=u.next();!c.done;c=u.next())c.value.remove(this)}catch(t){n={error:t}}finally{try{c&&!c.done&&(t=u.return)&&t.call(u)}finally{if(n)throw n.error}}else i.remove(this);var s=this.initialTeardown;if(m(s))try{s()}catch(n){o=n instanceof x?n.errors:[n]}var a=this._teardowns;if(a){this._teardowns=null;try{for(var l=h(a),f=l.next();!f.done;f=l.next()){var v=f.value;try{T(v)}catch(n){o=null!=o?o:[],n instanceof x?o=p(p([],d(o)),d(n.errors)):o.push(n)}}}catch(n){e={error:n}}finally{try{f&&!f.done&&(r=l.return)&&r.call(l)}finally{if(e)throw e.error}}}if(o)throw new x(o)}},n.prototype.add=function(t){var e;if(t&&t!==this)if(this.closed)T(t);else{if(t instanceof n){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._teardowns=null!==(e=this._teardowns)&&void 0!==e?e:[]).push(t)}},n.prototype._hasParent=function(n){var t=this._parentage;return t===n||Array.isArray(t)&&t.includes(n)},n.prototype._addParent=function(n){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(n),t):t?[t,n]:n},n.prototype._removeParent=function(n){var t=this._parentage;t===n?this._parentage=null:Array.isArray(t)&&I(t,n)},n.prototype.remove=function(t){var e=this._teardowns;e&&I(e,t),t instanceof n&&t._removeParent(this)},n.EMPTY=((t=new n).closed=!0,t),n;var t}();function S(n){return n instanceof E||n&&"closed"in n&&m(n.remove)&&m(n.add)&&m(n.unsubscribe)}function T(n){m(n)?n():n.unsubscribe()}E.EMPTY;var k=null,A=null,C=void 0,L=!1,P=!1,j={setTimeout:function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];var e=j.delegate;return((null==e?void 0:e.setTimeout)||setTimeout).apply(void 0,p([],d(n)))},clearTimeout:function(n){var t=j.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(n)},delegate:void 0};function O(n){j.setTimeout((function(){if(!k)throw n;k(n)}))}function H(){}var N=M("C",void 0,void 0);function M(n,t,e){return{kind:n,value:t,error:e}}var R=function(n){function t(t){var e=n.call(this)||this;return e.isStopped=!1,t?(e.destination=t,S(t)&&t.add(e)):e.destination=q,e}return l(t,n),t.create=function(n,t,e){return new F(n,t,e)},t.prototype.next=function(n){this.isStopped?Y(function(n){return M("N",n,void 0)}(n),this):this._next(n)},t.prototype.error=function(n){this.isStopped?Y(M("E",void 0,n),this):(this.isStopped=!0,this._error(n))},t.prototype.complete=function(){this.isStopped?Y(N,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,n.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(n){this.destination.next(n)},t.prototype._error=function(n){try{this.destination.error(n)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(E),F=function(n){function t(t,e,r){var o,i=n.call(this)||this;if(m(t))o=t;else if(t){var u;o=t.next,e=t.error,r=t.complete,i&&P?(u=Object.create(t)).unsubscribe=function(){return i.unsubscribe()}:u=t,o=null==o?void 0:o.bind(u),e=null==e?void 0:e.bind(u),r=null==r?void 0:r.bind(u)}return i.destination={next:o?D(o,i):H,error:D(null!=e?e:U,i),complete:r?D(r,i):H},i}return l(t,n),t}(R);function D(n,t){return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];try{n.apply(void 0,p([],d(e)))}catch(n){if(L){if(!t._syncErrorHack_isSubscribing)throw n;t.__syncError=n}else O(n)}}}function U(n){throw n}function Y(n,t){var e=A;e&&j.setTimeout((function(){return e(n,t)}))}var q={closed:!0,next:H,error:U,complete:H};function B(n){return n}function G(n){return 0===n.length?B:1===n.length?n[0]:function(t){return n.reduce((function(n,t){return t(n)}),t)}}var V=function(){function n(n){n&&(this._subscribe=n)}return n.prototype.lift=function(t){var e=new n;return e.source=this,e.operator=t,e},n.prototype.subscribe=function(n,t,e){var r,o=(r=n)&&r instanceof R||function(n){return n&&m(n.next)&&m(n.error)&&m(n.complete)}(r)&&S(r)?n:new F(n,t,e);if(L)this._deprecatedSyncErrorSubscribe(o);else{var i=this.operator,u=this.source;o.add(i?i.call(o,u):u?this._subscribe(o):this._trySubscribe(o))}return o},n.prototype._deprecatedSyncErrorSubscribe=function(n){var t=n;t._syncErrorHack_isSubscribing=!0;var e=this.operator;if(e)n.add(e.call(n,this.source));else try{n.add(this._subscribe(n))}catch(n){t.__syncError=n}for(var r=t;r;){if("__syncError"in r)try{throw r.__syncError}finally{n.unsubscribe()}r=r.destination}t._syncErrorHack_isSubscribing=!1},n.prototype._trySubscribe=function(n){try{return this._subscribe(n)}catch(t){n.error(t)}},n.prototype.forEach=function(n,t){var e=this;return new(t=z(t))((function(t,r){var o;o=e.subscribe((function(t){try{n(t)}catch(n){r(n),null==o||o.unsubscribe()}}),r,t)}))},n.prototype._subscribe=function(n){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(n)},n.prototype[_]=function(){return this},n.prototype.pipe=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return n.length?G(n)(this):this},n.prototype.toPromise=function(n){var t=this;return new(n=z(n))((function(n,e){var r;t.subscribe((function(n){return r=n}),(function(n){return e(n)}),(function(){return n(r)}))}))},n.create=function(t){return new n(t)},n}();function z(n){var t;return null!==(t=null!=n?n:C)&&void 0!==t?t:Promise}function K(n,t){return new V((function(e){var r=0;return t.schedule((function(){r===n.length?e.complete():(e.next(n[r++]),e.closed||this.schedule())}))}))}var J="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function W(n,t){if(!n)throw new Error("Iterable cannot be null");return new V((function(e){var r=new E;return r.add(t.schedule((function(){var o=n[Symbol.asyncIterator]();r.add(t.schedule((function(){var n=this;o.next().then((function(t){t.done?e.complete():(e.next(t.value),n.schedule())}))})))}))),r}))}function Q(n){return m(n[_])}function X(n){return m(null==n?void 0:n[J])}function Z(n){return Symbol.asyncIterator&&m(null==n?void 0:n[Symbol.asyncIterator])}function $(n){return new TypeError("You provided "+(null!==n&&"object"==typeof n?"an invalid object":"'"+n+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function nn(n){return y(this,arguments,(function(){var t,e,r;return f(this,(function(o){switch(o.label){case 0:t=n.getReader(),o.label=1;case 1:o.trys.push([1,,9,10]),o.label=2;case 2:return[4,v(t.read())];case 3:return e=o.sent(),r=e.value,e.done?[4,v(void 0)]:[3,5];case 4:return[2,o.sent()];case 5:return[4,v(r)];case 6:return[4,o.sent()];case 7:return o.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function tn(n){return m(null==n?void 0:n.getReader)}function en(n,t){return t?function(n,t){if(null!=n){if(Q(n))return function(n,t){return new V((function(e){var r=new E;return r.add(t.schedule((function(){var o=n[_]();r.add(o.subscribe({next:function(n){r.add(t.schedule((function(){return e.next(n)})))},error:function(n){r.add(t.schedule((function(){return e.error(n)})))},complete:function(){r.add(t.schedule((function(){return e.complete()})))}}))}))),r}))}(n,t);if(b(n))return K(n,t);if(w(n))return function(n,t){return new V((function(e){return t.schedule((function(){return n.then((function(n){e.add(t.schedule((function(){e.next(n),e.add(t.schedule((function(){return e.complete()})))})))}),(function(n){e.add(t.schedule((function(){return e.error(n)})))}))}))}))}(n,t);if(Z(n))return W(n,t);if(X(n))return function(n,t){return new V((function(e){var r;return e.add(t.schedule((function(){r=n[J](),function(n,t,e,r){void 0===r&&(r=0);var o=t.schedule((function(){try{e.call(this)}catch(t){n.error(t)}}),r);n.add(o)}(e,t,(function(){var n=r.next(),t=n.value;n.done?e.complete():(e.next(t),this.schedule())}))}))),function(){return m(null==r?void 0:r.return)&&r.return()}}))}(n,t);if(tn(n))return function(n,t){return W(nn(n),t)}(n,t)}throw $(n)}(n,t):rn(n)}function rn(n){if(n instanceof V)return n;if(null!=n){if(Q(n))return r=n,new V((function(n){var t=r[_]();if(m(t.subscribe))return t.subscribe(n);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(b(n))return on(n);if(w(n))return e=n,new V((function(n){e.then((function(t){n.closed||(n.next(t),n.complete())}),(function(t){return n.error(t)})).then(null,O)}));if(Z(n))return un(n);if(X(n))return t=n,new V((function(n){var e,r;try{for(var o=h(t),i=o.next();!i.done;i=o.next()){var u=i.value;if(n.next(u),n.closed)return}}catch(n){e={error:n}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}n.complete()}));if(tn(n))return un(nn(n))}var t,e,r;throw $(n)}function on(n){return new V((function(t){for(var e=0;e<n.length&&!t.closed;e++)t.next(n[e]);t.complete()}))}function un(n){return new V((function(t){(function(n,t){var e,r,o,i,u,c,s,a;return u=this,c=void 0,a=function(){var u,c;return f(this,(function(s){switch(s.label){case 0:s.trys.push([0,5,6,11]),e=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,e=n[Symbol.asyncIterator];return e?e.call(n):(n=h(n),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(e){t[e]=n[e]&&function(t){return new Promise((function(r,o){!function(n,t,e,r){Promise.resolve(r).then((function(t){n({value:t,done:e})}),t)}(r,o,(t=n[e](t)).done,t.value)}))}}}(n),s.label=1;case 1:return[4,e.next()];case 2:if((r=s.sent()).done)return[3,4];if(u=r.value,t.next(u),t.closed)return[2];s.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=s.sent(),o={error:c},[3,11];case 6:return s.trys.push([6,,9,10]),r&&!r.done&&(i=e.return)?[4,i.call(e)]:[3,8];case 7:s.sent(),s.label=8;case 8:return[3,10];case 9:if(o)throw o.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((s=void 0)||(s=Promise))((function(n,t){function e(n){try{o(a.next(n))}catch(n){t(n)}}function r(n){try{o(a.throw(n))}catch(n){t(n)}}function o(t){var o;t.done?n(t.value):(o=t.value,o instanceof s?o:new s((function(n){n(o)}))).then(e,r)}o((a=a.apply(u,c||[])).next())}))})(n,t).catch((function(n){return t.error(n)}))}))}var cn=Array.isArray;function sn(n){return 1===n.length&&cn(n[0])?n[0]:n}var an=new V((function(n){return n.complete()})),ln=function(n){function t(t,e,r,o,i){var u=n.call(this,t)||this;return u.onFinalize=i,u._next=e?function(n){try{e(n)}catch(n){t.error(n)}}:n.prototype._next,u._error=o?function(n){try{o(n)}catch(n){t.error(n)}finally{this.unsubscribe()}}:n.prototype._error,u._complete=r?function(){try{r()}catch(n){t.error(n)}finally{this.unsubscribe()}}:n.prototype._complete,u}return l(t,n),t.prototype.unsubscribe=function(){var t,e=this.closed;n.prototype.unsubscribe.call(this),!e&&(null===(t=this.onFinalize)||void 0===t||t.call(this))},t}(R);function fn(n){return n[n.length-1]}function hn(n){return m(fn(n))?n.pop():void 0}function dn(n){return(t=fn(n))&&m(t.schedule)?n.pop():void 0;var t}function pn(n,t){return"number"==typeof fn(n)?n.pop():t}function vn(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];var e=hn(n),r=sn(n);return r.length?new V((function(n){var t=r.map((function(){return[]})),o=r.map((function(){return!1}));n.add((function(){t=o=null}));for(var i=function(i){rn(r[i]).subscribe(new ln(n,(function(r){if(t[i].push(r),t.every((function(n){return n.length}))){var u=t.map((function(n){return n.shift()}));n.next(e?e.apply(void 0,p([],d(u))):u),t.some((function(n,t){return!n.length&&o[t]}))&&n.complete()}}),(function(){o[i]=!0,!t[i].length&&n.complete()})))},u=0;!n.closed&&u<r.length;u++)i(u);return function(){t=o=null}})):an}function yn(n){return function(t){if(function(n){return m(null==n?void 0:n.lift)}(t))return t.lift((function(t){try{return n(t,this)}catch(n){this.error(n)}}));throw new TypeError("Unable to lift unknown Observable type")}}function bn(n,t){return yn((function(e,r){var o=0;e.subscribe(new ln(r,(function(e){r.next(n.call(t,e,o++))})))}))}function mn(n,t){return yn((function(e,r){var o=null,i=0,u=!1,c=function(){return u&&!o&&r.complete()};e.subscribe(new ln(r,(function(e){null==o||o.unsubscribe();var u=0,s=i++;rn(n(e,s)).subscribe(o=new ln(r,(function(n){return r.next(t?t(e,n,s,u++):n)}),(function(){o=null,c()})))}),(function(){u=!0,c()})))}))}var wn="http://localhost:3000/users/";function gn(n,t,e){return void 0===e&&(e=1/0),m(t)?gn((function(e,r){return bn((function(n,o){return t(e,n,r,o)}))(rn(n(e,r)))}),e):("number"==typeof t&&(e=t),yn((function(t,r){return function(n,t,e,r,o,i,u,c){var s=[],a=0,l=0,f=!1,h=function(){!f||s.length||a||t.complete()},d=function(n){return a<r?p(n):s.push(n)},p=function(n){a++;var o=!1;rn(e(n,l++)).subscribe(new ln(t,(function(n){t.next(n)}),(function(){o=!0}),void 0,(function(){if(o)try{a--;for(;s.length&&a<r;)n=void 0,n=s.shift(),p(n);h()}catch(n){t.error(n)}var n})))};return n.subscribe(new ln(t,d,(function(){f=!0,h()}))),function(){}}(t,r,n,e)})))}function _n(n,t){return m(t)?gn(n,t,1):gn(n,1)}function xn(n,t){return yn((function(e,r){var o=0;e.subscribe(new ln(r,(function(e){return n.call(t,e,o++)&&r.next(e)})))}))}function In(n,t,e,r,o){return function(i,u){var c=e,s=t,a=0;i.subscribe(new ln(u,(function(t){var e=a++;s=c?n(s,t,e):(c=!0,t),r&&u.next(s)}),o&&function(){c&&u.next(s),u.complete()}))}}var En=function(n,t){return n.push(t),n};function Sn(){return yn((function(n,t){(function(n,t){return yn(In(n,t,arguments.length>=2,!1,!0))})(En,[])(n).subscribe(t)}))}var Tn=function(n,t){var e=this;this.flammableItems={},this.firewoodItems={},n.map((function(n){return e.flammableItems[n.item.name]=n})),t.map((function(n){return e.firewoodItems[n.item.name]=n}))},kn=function(n,t){this.item=n,this.quantity=t};function An(n,t){return{id:0,username:n,password:t,gameInfo:null,balance:200,inventory:{firewoodItems:[],flammableItems:[]}}}function Cn(n,t){var e=function(n,t){return en(fetch(wn+"?username="+n+"&password="+t).then((function(n){return n.json()})).then((function(n){return n[0]})))}(n,t).pipe(bn((function(n){if(!n)throw new Error(u.userNotFound.toString());return n})));return vn(e.pipe(mn((function(n){return vn(en((t=n.inventory).firewoodItems).pipe(_n((function(n){return t=n.item,en(fetch("http://localhost:3000/rest/store/firewoodItems/"+t).then((function(n){return n.json()})));var t})),xn((function(n){return Object.keys(n).length>0})),bn((function(n,e){return new kn(n,t.firewoodItems[e].quantity)}))).pipe(Sn()),en(t.flammableItems).pipe(_n((function(n){return t=n.item,en(fetch("http://localhost:3000/rest/store/flammableItems/"+t).then((function(n){return n.json()})));var t})),xn((function(n){return Object.keys(n).length>0})),bn((function(n,e){return new kn(n,t.flammableItems[e].quantity)}))).pipe(Sn())).pipe(bn((function(n){return new Tn(n[1],n[0])})));var t}))),e).pipe(bn((function(n){return t=n[1],e=n[0],{id:t.id,username:t.username,password:t.password,gameInfo:t.gameInfo,inventory:e,balance:t.balance};var t,e})))}var Ln=function(){function t(n){this._container=e("form",n,"loginForm","")}return t.prototype.renderContent=function(){e("h2",this._container,"loginHeadline","ENTER YOUR CREDENTIALS:");var t=o("text",this._container,"loginInput",!0,"Username"),i=o("password",this._container,"loginInput",!0,"Password");r(this._container,"loginSubmitBtn","Login",null),this._container.onsubmit=function(){return Cn(t.value,i.value).subscribe({next:function(n){return console.log(n)},error:function(n){n.message===u.userNotFound.toString()&&alert("Wrong credentials")}}),!1},e("a",this._container,"dontHaveAcc","I don't have an acount").onclick=function(){return zn.Navigator.goTo(n.Register)}},t}(),Pn=Array.isArray;function jn(n,t){return t?K(n,t):on(n)}var On=["addListener","removeListener"],Hn=["addEventListener","removeEventListener"],Nn=["on","off"];function Mn(n,t,e,r){if(m(e)&&(r=e,e=void 0),r)return Mn(n,t,e).pipe((o=r,bn((function(n){return function(n,t){return Pn(t)?n.apply(void 0,p([],d(t))):n(t)}(o,n)}))));var o,i=d(function(n){return m(n.addEventListener)&&m(n.removeEventListener)}(n)?Hn.map((function(r){return function(o){return n[r](t,o,e)}})):function(n){return m(n.addListener)&&m(n.removeListener)}(n)?On.map(Rn(n,t)):function(n){return m(n.on)&&m(n.off)}(n)?Nn.map(Rn(n,t)):[],2),u=i[0],c=i[1];if(!u&&b(n))return gn((function(n){return Mn(n,t,e)}))(jn(n));if(!u)throw new TypeError("Invalid event target");return new V((function(n){var t=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1<t.length?t:t[0])};return u(t),function(){return c(t)}}))}function Rn(n,t){return function(e){return function(r){return n[e](t,r)}}}function Fn(n){return void 0===n&&(n=1/0),gn(B,n)}var Dn=function(n){function t(t,e){return n.call(this)||this}return l(t,n),t.prototype.schedule=function(n,t){return void 0===t&&(t=0),this},t}(E),Un={setInterval:function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];var e=Un.delegate;return((null==e?void 0:e.setInterval)||setInterval).apply(void 0,p([],d(n)))},clearInterval:function(n){var t=Un.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(n)},delegate:void 0},Yn=function(n){function t(t,e){var r=n.call(this,t,e)||this;return r.scheduler=t,r.work=e,r.pending=!1,r}return l(t,n),t.prototype.schedule=function(n,t){if(void 0===t&&(t=0),this.closed)return this;this.state=n;var e=this.id,r=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(r,e,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(r,this.id,t),this},t.prototype.requestAsyncId=function(n,t,e){return void 0===e&&(e=0),Un.setInterval(n.flush.bind(n,this),e)},t.prototype.recycleAsyncId=function(n,t,e){if(void 0===e&&(e=0),null!=e&&this.delay===e&&!1===this.pending)return t;Un.clearInterval(t)},t.prototype.execute=function(n,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(n,t);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(n,t){var e,r=!1;try{this.work(n)}catch(n){r=!0,e=!!n&&n||new Error(n)}if(r)return this.unsubscribe(),e},t.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,e=this.scheduler,r=e.actions;this.work=this.state=this.scheduler=null,this.pending=!1,I(r,this),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null,n.prototype.unsubscribe.call(this)}},t}(Dn),qn={now:function(){return(qn.delegate||Date).now()},delegate:void 0},Bn=function(){function n(t,e){void 0===e&&(e=n.now),this.schedulerActionCtor=t,this.now=e}return n.prototype.schedule=function(n,t,e){return void 0===t&&(t=0),new this.schedulerActionCtor(this,n).schedule(e,t)},n.now=qn.now,n}(),Gn=new(function(n){function t(t,e){void 0===e&&(e=Bn.now);var r=n.call(this,t,e)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return l(t,n),t.prototype.flush=function(n){var t=this.actions;if(this._active)t.push(n);else{var e;this._active=!0;do{if(e=n.execute(n.state,n.delay))break}while(n=t.shift());if(this._active=!1,e){for(;n=t.shift();)n.unsubscribe();throw e}}},t}(Bn))(Yn),Vn=function(){function t(n){this._container=e("form",n,"registerForm","")}return t.prototype.renderContent=function(){var t=this;e("div",this._container,"","<i class='fas fa-arrow-alt-circle-left backArrow'></i>").onclick=function(){return zn.Navigator.goTo(n.Login)},e("h2",this._container,"registerHeadline","ENTER YOUR CREDENTIALS:");var i,u=o("text",this._container,"registerInput",!0,"Username"),c=e("label",this._container,"registerError errorHidden","Username already taken!");Mn(u,"input").pipe((800,void 0===i&&(i=Gn),yn((function(n,t){var e=null,r=null,o=null,u=function(){if(e){e.unsubscribe(),e=null;var n=r;r=null,t.next(n)}};function c(){var n=o+800,t=i.now();t<n?e=this.schedule(void 0,n-t):u()}n.subscribe(new ln(t,(function(n){r=n,o=i.now(),e||(e=i.schedule(c,800))}),(function(){u(),t.complete()}),void 0,(function(){r=e=null})))}))),bn((function(n){return n.target.value})),mn((function(n){return function(n){return en(fetch(wn+"?username="+n).then((function(n){return n.json()}))).pipe(bn((function(n){return null!=n[0]})))}(n)}))).subscribe((function(n){return n?t.showErrorMessage(c):t.hideErrorMessage(c)}));var s=o("password",this._container,"registerInput",!0,"Password"),a=o("password",this._container,"registerInput",!0,"Password"),l=e("label",this._container,"passwordError errorHidden","Passwords don't match");(function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];var e=dn(n),r=pn(n,1/0),o=n;return o.length?1===o.length?rn(o[0]):Fn(r)(jn(o,e)):an})(Mn(a,"input"),Mn(s,"input")).subscribe((function(){a.value===s.value?t.hideErrorMessage(l):t.showErrorMessage(l)})),r(this._container,"registerSubmitBtn","Register",null),this._container.onsubmit=function(){var t,e;return c.classList.contains("errorVisible")||l.classList.contains("errorVisible")||(t=u.value,e=s.value,en(fetch("http://localhost:3000/users",{method:"POST",body:JSON.stringify(An(t,e)),headers:{"Content-Type":"application/json"}}))).subscribe((function(t){t.ok&&zn.Navigator.goTo(n.Login)})),!1}},t.prototype.showErrorMessage=function(n){n.classList.replace("errorHidden","errorVisible")},t.prototype.hideErrorMessage=function(n){n.classList.replace("errorVisible","errorHidden")},t}(),zn=function(){function t(){this._mainContainer=document.getElementById("main")}return Object.defineProperty(t,"Navigator",{get:function(){var n;return null!==(n=this._navigator)&&void 0!==n?n:this._navigator=new t},enumerable:!1,configurable:!0}),t.prototype.goTo=function(t){switch(this.clearMainContainer(),this.disposeSubscriptions(),t){case n.Home:new s(this._mainContainer).renderContent();break;case n.Game:var e=new c(this._mainContainer);this.pageToDispose=e,e.renderContent();break;case n.Login:new Ln(this._mainContainer).renderContent();break;case n.Register:new Vn(this._mainContainer).renderContent()}},t.prototype.clearMainContainer=function(){this._mainContainer.innerHTML=""},t.prototype.disposeSubscriptions=function(){this.pageToDispose&&this.pageToDispose.dispose()},t}();zn.Navigator.goTo(n.Home)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,