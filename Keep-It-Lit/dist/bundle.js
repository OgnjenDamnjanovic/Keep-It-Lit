/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={442:(e,t)=>{var n=function(){function e(t){if(!t)throw new TypeError("Invalid argument; `value` has no value.");this.value=e.EMPTY,t&&e.isGuid(t)&&(this.value=t)}return e.isGuid=function(t){var n=t.toString();return t&&(t instanceof e||e.validator.test(n))},e.create=function(){return new e([e.gen(2),e.gen(1),e.gen(1),e.gen(1),e.gen(3)].join("-"))},e.createEmpty=function(){return new e("emptyguid")},e.parse=function(t){return new e(t)},e.raw=function(){return[e.gen(2),e.gen(1),e.gen(1),e.gen(1),e.gen(3)].join("-")},e.gen=function(e){for(var t="",n=0;n<e;n++)t+=(65536*(1+Math.random())|0).toString(16).substring(1);return t},e.prototype.equals=function(t){return e.isGuid(t)&&this.value===t.toString()},e.prototype.isEmpty=function(){return this.value===e.EMPTY},e.prototype.toString=function(){return this.value},e.prototype.toJSON=function(){return{value:this.value}},e.validator=new RegExp("^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$","i"),e.EMPTY="00000000-0000-0000-0000-000000000000",e}();t.i=n}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}(()=>{var e;function t(e,t,n,r){var o=document.createElement(e);return o.className=n,o.innerHTML=r,t.appendChild(o),o}function r(e,n,r,o){var i=t("button",e,n,r);return i.onclick=o,i}function o(e,n,r,o,i){var u=t("input",n,r,"");return u.required=o,u.type=e,u.placeholder=i,u}function i(e,n,r,o,i){var u=t("img",e,n,"");return u.src=r,u.width=o,u.height=i,u}!function(e){e[e.Home=0]="Home",e[e.Game=1]="Game",e[e.Login=2]="Login",e[e.Register=3]="Register"}(e||(e={}));var u=function(e,t){return(u=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}u(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}function s(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}function c(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function f(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return u}function l(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e}function m(e){return this instanceof m?(this.v=e,this):new m(e)}function d(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||a(e,t)}))})}function a(e,t){try{(n=o[e](t)).value instanceof m?Promise.resolve(n.value.v).then(s,c):f(i[0][2],n)}catch(e){f(i[0][3],e)}var n}function s(e){a("next",e)}function c(e){a("throw",e)}function f(e,t){e(t),i.shift(),i.length&&a(i[0][0],i[0][1])}}function p(e){return"function"==typeof e}function h(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}Object.create,Object.create;var v=h((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function b(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var y=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._teardowns=null}return e.prototype.unsubscribe=function(){var e,t,n,r,o;if(!this.closed){this.closed=!0;var i=this._parentage;if(i)if(this._parentage=null,Array.isArray(i))try{for(var u=c(i),a=u.next();!a.done;a=u.next())a.value.remove(this)}catch(t){e={error:t}}finally{try{a&&!a.done&&(t=u.return)&&t.call(u)}finally{if(e)throw e.error}}else i.remove(this);var s=this.initialTeardown;if(p(s))try{s()}catch(e){o=e instanceof v?e.errors:[e]}var m=this._teardowns;if(m){this._teardowns=null;try{for(var d=c(m),h=d.next();!h.done;h=d.next()){var b=h.value;try{I(b)}catch(e){o=null!=o?o:[],e instanceof v?o=l(l([],f(o)),f(e.errors)):o.push(e)}}}catch(e){n={error:e}}finally{try{h&&!h.done&&(r=d.return)&&r.call(d)}finally{if(n)throw n.error}}}if(o)throw new v(o)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)I(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._teardowns=null!==(n=this._teardowns)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&b(t,e)},e.prototype.remove=function(t){var n=this._teardowns;n&&b(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e;var t}(),w=y.EMPTY;function g(e){return e instanceof y||e&&"closed"in e&&p(e.remove)&&p(e.add)&&p(e.unsubscribe)}function I(e){p(e)?e():e.unsubscribe()}var _=null,S=null,x=void 0,E=!1,j=!1,C={setTimeout:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=C.delegate;return((null==n?void 0:n.setTimeout)||setTimeout).apply(void 0,l([],f(e)))},clearTimeout:function(e){var t=C.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function F(e){C.setTimeout((function(){if(!_)throw e;_(e)}))}function T(){}var L=O("C",void 0,void 0);function O(e,t,n){return{kind:e,value:t,error:n}}var P=function(e){function t(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,g(t)&&t.add(n)):n.destination=H,n}return a(t,e),t.create=function(e,t,n){return new A(e,t,n)},t.prototype.next=function(e){this.isStopped?q(function(e){return O("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?q(O("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?q(L,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(y),A=function(e){function t(t,n,r){var o,i=e.call(this)||this;if(p(t))o=t;else if(t){var u;o=t.next,n=t.error,r=t.complete,i&&j?(u=Object.create(t)).unsubscribe=function(){return i.unsubscribe()}:u=t,o=null==o?void 0:o.bind(u),n=null==n?void 0:n.bind(u),r=null==r?void 0:r.bind(u)}return i.destination={next:o?k(o,i):T,error:k(null!=n?n:M,i),complete:r?k(r,i):T},i}return a(t,e),t}(P);function k(e,t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];try{e.apply(void 0,l([],f(n)))}catch(e){if(E){if(!t._syncErrorHack_isSubscribing)throw e;t.__syncError=e}else F(e)}}}function M(e){throw e}function q(e,t){var n=S;n&&C.setTimeout((function(){return n(e,t)}))}var H={closed:!0,next:T,error:M,complete:T},N="function"==typeof Symbol&&Symbol.observable||"@@observable";function D(e){return e}function B(e){return 0===e.length?D:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}var R=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,o=(r=e)&&r instanceof P||function(e){return e&&p(e.next)&&p(e.error)&&p(e.complete)}(r)&&g(r)?e:new A(e,t,n);if(E)this._deprecatedSyncErrorSubscribe(o);else{var i=this.operator,u=this.source;o.add(i?i.call(o,u):u?this._subscribe(o):this._trySubscribe(o))}return o},e.prototype._deprecatedSyncErrorSubscribe=function(e){var t=e;t._syncErrorHack_isSubscribing=!0;var n=this.operator;if(n)e.add(n.call(e,this.source));else try{e.add(this._subscribe(e))}catch(e){t.__syncError=e}for(var r=t;r;){if("__syncError"in r)try{throw r.__syncError}finally{e.unsubscribe()}r=r.destination}t._syncErrorHack_isSubscribing=!1},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=z(t))((function(t,r){var o;o=n.subscribe((function(t){try{e(t)}catch(e){r(e),null==o||o.unsubscribe()}}),r,t)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[N]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.length?B(e)(this):this},e.prototype.toPromise=function(e){var t=this;return new(e=z(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function z(e){var t;return null!==(t=null!=e?e:x)&&void 0!==t?t:Promise}var V=h((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),Y=function(e){function t(){var t=e.call(this)||this;return t.closed=!1,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return a(t,e),t.prototype.lift=function(e){var t=new G(this,this);return t.operator=e,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new V},t.prototype.next=function(e){var t,n;if(this._throwIfClosed(),!this.isStopped){var r=this.observers.slice();try{for(var o=c(r),i=o.next();!i.done;i=o.next())i.value.next(e)}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}}},t.prototype.error=function(e){if(this._throwIfClosed(),!this.isStopped){this.hasError=this.isStopped=!0,this.thrownError=e;for(var t=this.observers;t.length;)t.shift().error(e)}},t.prototype.complete=function(){if(this._throwIfClosed(),!this.isStopped){this.isStopped=!0;for(var e=this.observers;e.length;)e.shift().complete()}},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var t=this,n=t.hasError,r=t.isStopped,o=t.observers;return n||r?w:(o.push(e),new y((function(){return b(o,e)})))},t.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,r=t.thrownError,o=t.isStopped;n?e.error(r):o&&e.complete()},t.prototype.asObservable=function(){var e=new R;return e.source=this,e},t.create=function(e,t){return new G(e,t)},t}(R),G=function(e){function t(t,n){var r=e.call(this)||this;return r.destination=t,r.source=n,r}return a(t,e),t.prototype.next=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===n||n.call(t,e)},t.prototype.error=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===n||n.call(t,e)},t.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},t.prototype._subscribe=function(e){var t,n;return null!==(n=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==n?n:w},t}(Y),U=function(e){function t(t){var n=e.call(this)||this;return n._value=t,n}return a(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),t.prototype._subscribe=function(t){var n=e.prototype._subscribe.call(this,t);return!n.closed&&t.next(this._value),n},t.prototype.getValue=function(){var e=this,t=e.hasError,n=e.thrownError,r=e._value;if(t)throw n;return this._throwIfClosed(),r},t.prototype.next=function(t){e.prototype.next.call(this,this._value=t)},t}(Y);function J(e){return function(t){if(function(e){return p(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}var K=function(e){function t(t,n,r,o,i){var u=e.call(this,t)||this;return u.onFinalize=i,u._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,u._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,u._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,u}return a(t,e),t.prototype.unsubscribe=function(){var t,n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))},t}(P);function Q(e,t){return J((function(n,r){var o=0;n.subscribe(new K(r,(function(n){r.next(e.call(t,n,o++))})))}))}var W=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function Z(e){return p(null==e?void 0:e.then)}function $(e,t){return new R((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}var X="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function ee(e,t){if(!e)throw new Error("Iterable cannot be null");return new R((function(n){var r=new y;return r.add(t.schedule((function(){var o=e[Symbol.asyncIterator]();r.add(t.schedule((function(){var e=this;o.next().then((function(t){t.done?n.complete():(n.next(t.value),e.schedule())}))})))}))),r}))}function te(e){return p(e[N])}function ne(e){return p(null==e?void 0:e[X])}function re(e){return Symbol.asyncIterator&&p(null==e?void 0:e[Symbol.asyncIterator])}function oe(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function ie(e){return d(this,arguments,(function(){var t,n,r;return s(this,(function(o){switch(o.label){case 0:t=e.getReader(),o.label=1;case 1:o.trys.push([1,,9,10]),o.label=2;case 2:return[4,m(t.read())];case 3:return n=o.sent(),r=n.value,n.done?[4,m(void 0)]:[3,5];case 4:return[2,o.sent()];case 5:return[4,m(r)];case 6:return[4,o.sent()];case 7:return o.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function ue(e){return p(null==e?void 0:e.getReader)}function ae(e,t){return t?function(e,t){if(null!=e){if(te(e))return function(e,t){return new R((function(n){var r=new y;return r.add(t.schedule((function(){var o=e[N]();r.add(o.subscribe({next:function(e){r.add(t.schedule((function(){return n.next(e)})))},error:function(e){r.add(t.schedule((function(){return n.error(e)})))},complete:function(){r.add(t.schedule((function(){return n.complete()})))}}))}))),r}))}(e,t);if(W(e))return $(e,t);if(Z(e))return function(e,t){return new R((function(n){return t.schedule((function(){return e.then((function(e){n.add(t.schedule((function(){n.next(e),n.add(t.schedule((function(){return n.complete()})))})))}),(function(e){n.add(t.schedule((function(){return n.error(e)})))}))}))}))}(e,t);if(re(e))return ee(e,t);if(ne(e))return function(e,t){return new R((function(n){var r;return n.add(t.schedule((function(){r=e[X](),function(e,t,n,r){void 0===r&&(r=0);var o=t.schedule((function(){try{n.call(this)}catch(t){e.error(t)}}),r);e.add(o)}(n,t,(function(){var e=r.next(),t=e.value;e.done?n.complete():(n.next(t),this.schedule())}))}))),function(){return p(null==r?void 0:r.return)&&r.return()}}))}(e,t);if(ue(e))return function(e,t){return ee(ie(e),t)}(e,t)}throw oe(e)}(e,t):se(e)}function se(e){if(e instanceof R)return e;if(null!=e){if(te(e))return r=e,new R((function(e){var t=r[N]();if(p(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(W(e))return ce(e);if(Z(e))return n=e,new R((function(e){n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,F)}));if(re(e))return fe(e);if(ne(e))return t=e,new R((function(e){var n,r;try{for(var o=c(t),i=o.next();!i.done;i=o.next()){var u=i.value;if(e.next(u),e.closed)return}}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}e.complete()}));if(ue(e))return fe(ie(e))}var t,n,r;throw oe(e)}function ce(e){return new R((function(t){for(var n=0;n<e.length&&!t.closed;n++)t.next(e[n]);t.complete()}))}function fe(e){return new R((function(t){(function(e,t){var n,r,o,i,u,a,f,l;return u=this,a=void 0,l=function(){var u,a;return s(this,(function(s){switch(s.label){case 0:s.trys.push([0,5,6,11]),n=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=c(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}(e),s.label=1;case 1:return[4,n.next()];case 2:if((r=s.sent()).done)return[3,4];if(u=r.value,t.next(u),t.closed)return[2];s.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=s.sent(),o={error:a},[3,11];case 6:return s.trys.push([6,,9,10]),r&&!r.done&&(i=n.return)?[4,i.call(n)]:[3,8];case 7:s.sent(),s.label=8;case 8:return[3,10];case 9:if(o)throw o.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((f=void 0)||(f=Promise))((function(e,t){function n(e){try{o(l.next(e))}catch(e){t(e)}}function r(e){try{o(l.throw(e))}catch(e){t(e)}}function o(t){var o;t.done?e(t.value):(o=t.value,o instanceof f?o:new f((function(e){e(o)}))).then(n,r)}o((l=l.apply(u,a||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function le(e,t,n){return void 0===n&&(n=1/0),p(t)?le((function(n,r){return Q((function(e,o){return t(n,e,r,o)}))(se(e(n,r)))}),n):("number"==typeof t&&(n=t),J((function(t,r){return function(e,t,n,r,o,i,u,a){var s=[],c=0,f=0,l=!1,m=function(){!l||s.length||c||t.complete()},d=function(e){return c<r?p(e):s.push(e)},p=function(e){c++;var o=!1;se(n(e,f++)).subscribe(new K(t,(function(e){t.next(e)}),(function(){o=!0}),void 0,(function(){if(o)try{c--;for(;s.length&&c<r;)e=void 0,e=s.shift(),p(e);m()}catch(e){t.error(e)}var e})))};return e.subscribe(new K(t,d,(function(){l=!0,m()}))),function(){}}(t,r,e,n)})))}var me=Array.isArray;function de(e,t){return t?$(e,t):ce(e)}var pe=["addListener","removeListener"],he=["addEventListener","removeEventListener"],ve=["on","off"];function be(e,t,n,r){if(p(n)&&(r=n,n=void 0),r)return be(e,t,n).pipe((o=r,Q((function(e){return function(e,t){return me(t)?e.apply(void 0,l([],f(t))):e(t)}(o,e)}))));var o,i=f(function(e){return p(e.addEventListener)&&p(e.removeEventListener)}(e)?he.map((function(r){return function(o){return e[r](t,o,n)}})):function(e){return p(e.addListener)&&p(e.removeListener)}(e)?pe.map(ye(e,t)):function(e){return p(e.on)&&p(e.off)}(e)?ve.map(ye(e,t)):[],2),u=i[0],a=i[1];if(!u&&W(e))return le((function(e){return be(e,t,n)}))(de(e));if(!u)throw new TypeError("Invalid event target");return new R((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return u(t),function(){return a(t)}}))}function ye(e,t){return function(n){return function(r){return e[n](t,r)}}}function we(e,t){return e===t}function ge(e,t){return void 0===r&&(r=D),n=null!=(n=function(n,r){return t?t(n[e],r[e]):n[e]===r[e]})?n:we,J((function(e,t){var o,i=!0;e.subscribe(new K(t,(function(e){var u=r(e);!i&&n(o,u)||(i=!1,o=u,t.next(e))})))}));var n,r}function Ie(e){return e&&p(e.schedule)}function _e(e){return e[e.length-1]}function Se(e){return p(_e(e))?e.pop():void 0}function xe(e){return Ie(_e(e))?e.pop():void 0}function Ee(e,t){return"number"==typeof _e(e)?e.pop():t}function je(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Se(e);return J((function(t,r){for(var o=e.length,i=new Array(o),u=e.map((function(){return!1})),a=!1,s=function(t){se(e[t]).subscribe(new K(r,(function(e){i[t]=e,a||u[t]||(u[t]=!0,(a=u.every(D))&&(u=null))}),T))},c=0;c<o;c++)s(c);t.subscribe(new K(r,(function(e){if(a){var t=l([e],f(i));r.next(n?n.apply(void 0,l([],f(t))):t)}})))}))}function Ce(e,t){return J((function(n,r){var o=0;n.subscribe(new K(r,(function(n){return e.call(t,n,o++)&&r.next(n)})))}))}function Fe(e,t,n){var r=p(e)||t||n?{next:e,error:t,complete:n}:e;return r?J((function(e,t){e.subscribe(new K(t,(function(e){var n;null===(n=r.next)||void 0===n||n.call(r,e),t.next(e)}),(function(){var e;null===(e=r.complete)||void 0===e||e.call(r),t.complete()}),(function(e){var n;null===(n=r.error)||void 0===n||n.call(r,e),t.error(e)})))})):D}var Te="src/assets/Images/",Le=Te+"game/";function Oe(e){return Object.getOwnPropertyNames(e)}function Pe(e,t){return Oe(e).sort().join()==Oe(t).sort().join()}var Ae=function(){return(Ae=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function ke(e){return Ae(Ae({},e),{inventory:{flammableItems:Ae({},e.inventory.flammableItems),firewoodItems:Ae({},e.inventory.firewoodItems),firestarterItems:Ae({},e.inventory.firestarterItems)},gameInfo:Ae(Ae({},e.gameInfo),{firewood:Ae({},e.gameInfo.firewood),fireboosters:Ae({},e.gameInfo.fireboosters)})})}var Me=function(){return(Me=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function qe(e,t){var n=ke(e);return De(n,t,n.inventory.flammableItems)}function He(e,t){var n=ke(e);return De(n,t,n.inventory.firestarterItems)}function Ne(e,t){var n=ke(e);return De(n,t,n.inventory.firewoodItems)}function De(e,t,n){return e.balance-=t.price,n[t.name]?n[t.name]=Me({},n[t.name]):n[t.name]={item:t,quantity:0},n[t.name].quantity++,Object.freeze(e)}var Be=Array.isArray;function Re(e){return 1===e.length&&Be(e[0])?e[0]:e}var ze=new R((function(e){return e.complete()}));function Ve(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Se(e),r=Re(e);return r.length?new R((function(e){var t=r.map((function(){return[]})),o=r.map((function(){return!1}));e.add((function(){t=o=null}));for(var i=function(i){se(r[i]).subscribe(new K(e,(function(r){if(t[i].push(r),t.every((function(e){return e.length}))){var u=t.map((function(e){return e.shift()}));e.next(n?n.apply(void 0,l([],f(u))):u),t.some((function(e,t){return!e.length&&o[t]}))&&e.complete()}}),(function(){o[i]=!0,!t[i].length&&e.complete()})))},u=0;!e.closed&&u<r.length;u++)i(u);return function(){t=o=null}})):ze}var Ye,Ge="http://localhost:3000/",Ue=Ge+"users/",Je=Ge+"rest/store/firewoodItems/",Ke=Ge+"rest/store/flammableItems/",Qe=Ge+"rest/store/firestarterItems/";function We(e){return e<=0?function(){return ze}:J((function(t,n){var r=0;t.subscribe(new K(n,(function(t){++r<=e&&(n.next(t),e<=r&&n.complete())})))}))}function Ze(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];return!0===t?(e(),null):!1===t?null:t.apply(void 0,l([],f(n))).pipe(We(1)).subscribe((function(){return e()}))}function $e(e,t){return J((function(n,r){var o=null,i=0,u=!1,a=function(){return u&&!o&&r.complete()};n.subscribe(new K(r,(function(n){null==o||o.unsubscribe();var u=0,s=i++;se(e(n,s)).subscribe(o=new K(r,(function(e){return r.next(t?t(n,e,s,u++):e)}),(function(){o=null,a()})))}),(function(){u=!0,a()})))}))}function Xe(e,t){return p(t)?le(e,t,1):le(e,1)}function et(e,t,n,r,o){return function(i,u){var a=n,s=t,c=0;i.subscribe(new K(u,(function(t){var n=c++;s=a?e(s,t,n):(a=!0,t),r&&u.next(s)}),o&&function(){a&&u.next(s),u.complete()}))}}!function(e){e[e.userNotFound=0]="userNotFound"}(Ye||(Ye={}));var tt=function(e,t){return e.push(t),e};function nt(){return J((function(e,t){(function(e,t){return J(et(e,t,arguments.length>=2,!1,!0))})(tt,[])(e).subscribe(t)}))}function rt(e,t){return e.quantity===t.quantity&&e.item===t.item}function ot(e,t){if(!Pe(e.firestarterItems,t.firestarterItems)||!Pe(e.firewoodItems,t.firewoodItems)||!Pe(e.flammableItems,t.flammableItems))return!1;for(var n in e.firestarterItems)if(!rt(e.firestarterItems[n],t.firestarterItems[n]))return!1;for(var n in e.flammableItems)if(!rt(e.flammableItems[n],t.flammableItems[n]))return!1;for(var n in e.firewoodItems)if(!rt(e.firewoodItems[n],t.firewoodItems[n]))return!1;return!0}var it=n(442);function ut(e,t){return{id:it.i.create().toString(),username:e,password:t,gameInfo:{emberAmount:0,flameBaseLevel:0,fireboosters:{},totalFlameMultiplier:1,totalFlameIncrement:0,firewood:{}},balance:1e4,inventory:{firewoodItems:[],flammableItems:[],firestarterItems:[]}}}function at(e){return{id:e.id,balance:e.balance,password:e.password,username:e.username,gameInfo:e.gameInfo,inventory:(t=e.inventory,{firestarterItems:Oe(t.firestarterItems).map((function(e){return{item:t.firestarterItems[e].item.id,quantity:t.firestarterItems[e].quantity}})),firewoodItems:Oe(t.firewoodItems).map((function(e){return{item:t.firewoodItems[e].item.id,quantity:t.firewoodItems[e].quantity}})),flammableItems:Oe(t.flammableItems).map((function(e){return{item:t.flammableItems[e].item.id,quantity:t.flammableItems[e].quantity}}))})};var t}function st(e,t){var n=function(e,t){return ae(fetch(Ue+"?username="+e+"&password="+t).then((function(e){return e.json()})).then((function(e){return e[0]})))}(e,t).pipe(Q((function(e){if(!e)throw new Error(Ye.userNotFound.toString());return e})),function(e){void 0===e&&(e={});var t=e.connector,n=void 0===t?function(){return new Y}:t,r=e.resetOnError,o=void 0===r||r,i=e.resetOnComplete,u=void 0===i||i,a=e.resetOnRefCountZero,s=void 0===a||a;return function(e){var t=null,r=null,i=null,a=0,c=!1,f=!1,l=function(){null==r||r.unsubscribe(),r=null},m=function(){l(),t=i=null,c=f=!1},d=function(){var e=t;m(),null==e||e.unsubscribe()};return J((function(e,p){a++,f||c||l();var h=i=null!=i?i:n();p.add((function(){0!=--a||f||c||(r=Ze(d,s))})),h.subscribe(p),t||(t=new A({next:function(e){return h.next(e)},error:function(e){f=!0,l(),r=Ze(m,o,e),h.error(e)},complete:function(){c=!0,l(),r=Ze(m,u),h.complete()}}),ae(e).subscribe(t))}))(e)}}());return Ve(n.pipe($e((function(e){return Ve(ae((t=e.inventory).firewoodItems).pipe(Xe((function(e){return t=e.item,ae(fetch(Je+""+t).then((function(e){return e.json()})));var t})),Ce((function(e){return Object.keys(e).length>0})),Q((function(e,n){return{item:e,quantity:t.firewoodItems[n].quantity}}))).pipe(nt()),ae(t.flammableItems).pipe(Xe((function(e){return t=e.item,ae(fetch(Ke+""+t).then((function(e){return e.json()})));var t})),Ce((function(e){return Object.keys(e).length>0})),Q((function(e,n){return{item:e,quantity:t.flammableItems[n].quantity}}))).pipe(nt()),ae(t.firestarterItems).pipe(Xe((function(e){return t=e.item,ae(fetch(Qe+""+t).then((function(e){return e.json()})));var t})),Ce((function(e){return Object.keys(e).length>0})),Q((function(e,n){return{item:e,quantity:t.firestarterItems[n].quantity}}))).pipe(nt())).pipe(Q((function(e){return t=e[1],n=e[0],r=e[2],o={firestarterItems:{},firewoodItems:{},flammableItems:{}},t.map((function(e){return o.flammableItems[e.item.name]=e})),n.map((function(e){return o.firewoodItems[e.item.name]=e})),r.map((function(e){return o.firestarterItems[e.item.name]=e})),o;var t,n,r,o})));var t}))),n).pipe(Q((function(e){return t=e[1],n=e[0],{id:t.id,username:t.username,password:t.password,gameInfo:t.gameInfo,inventory:n,balance:t.balance};var t,n})))}function ct(e){return ae(fetch(Ue+e.id,{method:"PUT",body:JSON.stringify(at(e)),headers:{"Content-Type":"application/json"}}).then((function(e){if(!e.ok)throw Error(Ye.userNotFound.toString());return e})))}var ft=function(){function e(e,n){this.userSubject=n,this._container=t("div",e,"storeContainer","")}return e.prototype.dispose=function(){this.balanceSubscription.unsubscribe()},e.prototype.renderContent=function(){var e=this;this.balanceSubscription=this.userSubject.pipe(ge("balance")).subscribe((function(t){e.disableExpensiveItems(t.balance),e.renderBalance(t.balance)}));var n="<i class='fas fa-caret-left'></i><div>S<br/>T<br/>O<br/>R<br/>E</div>";t("div",this._container,"storeSpacer","");var o=r(this._container,"storeShowBtn",n,(function(){"none"===window.getComputedStyle(i).display?(o.innerHTML="<i class='fas fa-caret-right'></i><div>S<br/>T<br/>O<br/>R<br/>E</div>",i.style.display="flex",u.classList.add("balanceLabelOffset"),o.classList.add("storeShowBtnOffset")):(o.innerHTML=n,i.style.display="none",u.classList.remove("balanceLabelOffset"),o.classList.remove("storeShowBtnOffset"))})),i=t("div",this._container,"storeItemsCont",""),u=t("label",this._container,"balanceLabel","");Ve(ae(fetch(Ke).then((function(e){return e.json()})).then((function(e){return e}))),ae(fetch(Je).then((function(e){return e.json()})).then((function(e){return e}))),ae(fetch(Qe).then((function(e){return e.json()})).then((function(e){return e})))).pipe(Q((function(e){return{flammableItems:e[0],firewoodItems:e[1],firestarterItems:e[2]}}))).pipe(je(this.userSubject.pipe(Q((function(e){return e.balance}))))).subscribe((function(t){t[0].firewoodItems.map((function(t){return e.renderStoreItem(t,Ne,i)})),t[0].flammableItems.map((function(t){return e.renderStoreItem(t,qe,i)})),t[0].firestarterItems.map((function(t){return e.renderStoreItem(t,He,i)})),e.disableExpensiveItems(t[1]),e.renderBalance(t[1])}))},e.prototype.disableExpensiveItems=function(e){this._container.querySelectorAll(".storeItemPrice").forEach((function(t){t.parentElement.classList.remove("disabledDiv"),parseInt(t.getAttribute("price"))>e&&t.parentElement.classList.add("disabledDiv")}))},e.prototype.renderBalance=function(e){var t=document.querySelector(".balanceLabel");t&&(t.innerHTML=e.toString()+"   <i class='fa fa-coins'></i>")},e.prototype.renderStoreItem=function(e,n,r){var o=t("div",r,"storeItemContainer","");i(o,"storeitemImage",Le+e.imageSrc,95,80),t("div",o,"storeItemPrice","<label>"+e.price+"</label> <i class='fa fa-coins'></i>").setAttribute("price",e.price.toString()),be(o,"click").pipe(je(this.userSubject),Ce((function(t){return e.price<=t[1].balance})),Q((function(t){return n(t[1],e)})),Fe((function(e){return ct(e)}))).subscribe(this.userSubject)},e}(),lt=function(e){function t(t,n){return e.call(this)||this}return a(t,e),t.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},t}(y),mt={setInterval:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=mt.delegate;return((null==n?void 0:n.setInterval)||setInterval).apply(void 0,l([],f(e)))},clearInterval:function(e){var t=mt.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0},dt=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r.pending=!1,r}return a(t,e),t.prototype.schedule=function(e,t){if(void 0===t&&(t=0),this.closed)return this;this.state=e;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(r,this.id,t),this},t.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),mt.setInterval(e.flush.bind(e,this),n)},t.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return t;mt.clearInterval(t)},t.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,t){var n,r=!1;try{this.work(e)}catch(e){r=!0,n=!!e&&e||new Error(e)}if(r)return this.unsubscribe(),n},t.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,b(r,this),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},t}(lt),pt={now:function(){return(pt.delegate||Date).now()},delegate:void 0},ht=function(){function e(t,n){void 0===n&&(n=e.now),this.schedulerActionCtor=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(n,t)},e.now=pt.now,e}(),vt=new(function(e){function t(t,n){void 0===n&&(n=ht.now);var r=e.call(this,t,n)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return a(t,e),t.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var n;this._active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},t}(ht))(dt),bt=vt;function yt(e,t,n){void 0===e&&(e=0),void 0===n&&(n=bt);var r=-1;return null!=t&&(Ie(t)?n=t:r=t),new R((function(t){var o,i=(o=e)instanceof Date&&!isNaN(o)?+e-n.now():e;i<0&&(i=0);var u=0;return n.schedule((function(){t.closed||(t.next(u++),0<=r?this.schedule(void 0,r):t.complete())}),i)}))}function wt(e){return(e.flameBaseLevel+e.totalFlameIncrement)*e.totalFlameMultiplier}function gt(e,t){if(e.emberAmount!==t.emberAmount||e.flameBaseLevel!==t.flameBaseLevel||e.totalFlameIncrement!==t.totalFlameIncrement||e.totalFlameMultiplier!==t.totalFlameMultiplier||!Pe(e.firewood,t.firewood))return!1;for(var n in e.firewood)if(r=t.firewood[n],o=e.firewood[n],r.combustionFactor!==o.combustionFactor||r.totalFirewoodContribution!==o.totalFirewoodContribution)return!1;var r,o;return!0}var It=function(){return(It=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function _t(e,t){var n,r,o=(n=e,Oe((r=ke(e)).gameInfo.firewood).forEach((function(e){r.gameInfo.firewood[e]=Ae({},n.gameInfo.firewood[e])})),r),i=0;return Object.keys(o.gameInfo.firewood).map((function(n){var r=o.gameInfo.firewood[n].totalFirewoodContribution*o.gameInfo.firewood[n].combustionFactor*wt(e.gameInfo)*t*3e-4;r>o.gameInfo.firewood[n].totalFirewoodContribution?(i+=o.gameInfo.firewood[n].totalFirewoodContribution,delete o.gameInfo.firewood[n]):(i+=r,o.gameInfo.firewood[n].totalFirewoodContribution-=r,o.gameInfo.firewood[n].totalFirewoodContribution<1&&delete o.gameInfo.firewood[n])})),o.gameInfo.emberAmount-=.5*o.gameInfo.emberAmount*wt(e.gameInfo),o.gameInfo.emberAmount<1&&(o.gameInfo.emberAmount=0),o.gameInfo.emberAmount+=i,o.gameInfo.flameBaseLevel=.5*o.gameInfo.emberAmount,o.gameInfo.flameBaseLevel>1750&&(o.gameInfo.flameBaseLevel=1750),o.gameInfo.flameBaseLevel>0&&(o.balance+=800),Object.freeze(o)}function St(e,t){var n=ke(e);return n.inventory.firewoodItems[t.name]=It({},n.inventory.firewoodItems[t.name]),n.inventory.firewoodItems[t.name].quantity--,0===n.inventory.firewoodItems[t.name].quantity&&delete n.inventory.firewoodItems[t.name],n.gameInfo.firewood[t.name]?n.gameInfo.firewood[t.name]=It({},n.gameInfo.firewood[t.name]):n.gameInfo.firewood[t.name]={combustionFactor:t.combustionFactor,totalFirewoodContribution:0},n.gameInfo.firewood[t.name].totalFirewoodContribution+=t.firewoodContribution,Object.freeze(n)}function xt(e,t,n){var r=ke(e);r.inventory.firestarterItems[t.name]=It({},r.inventory.firestarterItems[t.name]),r.inventory.firestarterItems[t.name].quantity--,0===r.inventory.firestarterItems[t.name].quantity&&delete r.inventory.firestarterItems[t.name],r.gameInfo.totalFlameIncrement+=t.flameIncrement,t.firewoodContribution>0&&(r.gameInfo.firewood[t.name]?r.gameInfo.firewood[t.name]=It({},r.gameInfo.firewood[t.name]):r.gameInfo.firewood[t.name]={combustionFactor:t.combustionFactor,totalFirewoodContribution:0},r.gameInfo.firewood[t.name].totalFirewoodContribution+=t.firewoodContribution);var o=Date.now().toString();return r.gameInfo.fireboosters[o]={timeLeft:t.flameIncrementDuration,flameIncrement:t.flameIncrement,flameMultiplier:1},Et(o,n),Object.freeze(r)}function Et(e,t){var n=yt(0,1e3).pipe(je(t),Q((function(r){return function(e,t,n,r){var o=ke(e);return o.gameInfo.fireboosters[t]=It(It({},e.gameInfo.fireboosters[t]),{timeLeft:e.gameInfo.fireboosters[t].timeLeft-1}),0==o.gameInfo.fireboosters[t].timeLeft&&(n.unsubscribe(),r.next(function(e,t){return e.gameInfo.totalFlameIncrement-=e.gameInfo.fireboosters[t].flameIncrement,e.gameInfo.totalFlameMultiplier/=e.gameInfo.fireboosters[t].flameMultiplier,delete e.gameInfo.fireboosters[t],e}(o,t)),ct(o)),Object.freeze(o)}(r[1],e,n,t)}))).subscribe(t)}function jt(e,t,n){var r=ke(e);if(r.inventory.flammableItems[t.name]=It({},r.inventory.flammableItems[t.name]),r.inventory.flammableItems[t.name].quantity--,0===r.inventory.flammableItems[t.name].quantity&&delete r.inventory.flammableItems[t.name],0!=wt(r.gameInfo)){r.gameInfo.totalFlameMultiplier*=t.flameMultiplier;var o=Date.now().toString();r.gameInfo.fireboosters[o]={timeLeft:t.flameMultiplierDuration,flameIncrement:0,flameMultiplier:t.flameMultiplier},Et(o,n)}return Object.freeze(r)}var Ct=function(){function e(e,n){this.userSubject=n,this._container=t("div",e,"inventoryContainer","")}return e.prototype.dispose=function(){this.inventorySubscription.unsubscribe()},e.prototype.renderContent=function(){var e=this;this.inventorySubscription=this.userSubject.pipe(ge("inventory",ot)).subscribe((function(t){e.renderInventory(t.inventory)}))},e.prototype.renderInventory=function(e){var n=this;this._container.innerHTML="",0!==Oe(e.firewoodItems).length&&t("h2",this._container,"","Firewoods:"),Oe(e.firewoodItems).map((function(t){return n.renderInventoryItem(e.firewoodItems[t],St)})),0!==Oe(e.flammableItems).length&&t("h2",this._container,"","Flammables:"),Oe(e.flammableItems).map((function(t){return n.renderInventoryItem(e.flammableItems[t],jt)})),0!==Oe(e.firestarterItems).length&&t("h2",this._container,"","Firestarters:"),Oe(e.firestarterItems).map((function(t){return n.renderInventoryItem(e.firestarterItems[t],xt)}))},e.prototype.renderInventoryItem=function(e,n){var r=this,o=t("span",this._container,"invItemContainer",""),u=i(o,"invItemImg",Le+e.item.imageSrc,100,90);t("label",o,"ivnItemQuantity","x"+e.quantity),be(u,"click").pipe(je(this.userSubject),Q((function(t){return n(t[1],e.item,r.userSubject)})),Fe((function(e){return ct(e)}))).subscribe(this.userSubject)},e}();var Ft=function(){function e(e,n){var r=this;this.userSubject=n,this._container=t("div",e,"fireplaceContainer",""),this.userSubject.pipe(We(1)).subscribe((function(e){Oe(e.gameInfo.fireboosters).forEach((function(e){Et(e,n)}))}));var o,i=new Y,u=new Y,a=3e3,s=Date.now();this.burnTimerSubscription=yt(a,a).pipe(je(this.userSubject),Q((function(e){return _t(e[1],(Date.now()-s)/a)})),(o=i,J((function(e,t){se(o).subscribe(new K(t,(function(){return t.complete()}),T)),!t.closed&&e.subscribe(t)}))),function(e){return J((function(t,n){var r,o,i=!1,u=!1,a=!1,s=function(){return a&&u&&(n.complete(),!0)},c=function(){a=!1,r=t.subscribe(new K(n,void 0,(function(){a=!0,!s()&&(o||(o=new Y,e(o).subscribe(new K(n,(function(){r?c():i=!0}),(function(){u=!0,s()})))),o).next()}))),i&&(r.unsubscribe(),r=null,i=!1,c())};c()}))}((function(){return u}))).subscribe((function(e){r.userSubject.next(e),s=Date.now()})),this.burnTimerDisruptorSubscription=this.userSubject.pipe((1,Ce((function(e,t){return 1<=t}))),ge("gameInfo",(function(e,t){return e.totalFlameIncrement!=t.totalFlameIncrement||e.totalFlameMultiplier!=e.totalFlameIncrement}))).subscribe((function(e){i.next(),r.userSubject.next(_t(e,(Date.now()-s)/a)),s=Date.now(),u.next()}))}return e.prototype.dispose=function(){this.gameInfoSubscription.unsubscribe(),this.burnTimerSubscription.unsubscribe(),this.burnTimerDisruptorSubscription.unsubscribe()},e.prototype.renderContent=function(){var e=this;this.gameInfoSubscription=this.userSubject.pipe(ge("gameInfo",gt)).subscribe((function(n){e._container.innerHTML="",i(e._container,"fullMark1",Te+"fullMark1.jpg",1400,900);var r,o=t("div",e._container,"fireHolder","");r=n.gameInfo,(0===Object.keys(r.firewood).length?0:Object.keys(r.firewood).map((function(e){return r.firewood[e].totalFirewoodContribution})).reduce((function(e,t){return e+t})))>29&&i(e._container,"log",Te+"162601897664282077.png",150,75);var u=wt(n.gameInfo);if(u>0){var a;a=u>500?200:u>200?140:u>50?80:u>10?50:10;var s=t("div",o,"fireSpacer","");s.style.height=201-a+"px",s.style.width="175px",i(o,"fire",Te+"fire_lower_hue.gif",.69*a,a)}t("label",e._container,"stats",""),e.logStats(n)}))},e.prototype.logStats=function(e){var t=document.querySelector(".stats"),n="TotalfireLevel: "+wt(e.gameInfo).toFixed(2)+"\nfireLevel: "+e.gameInfo.flameBaseLevel.toFixed(2)+"\nmultiplier: "+e.gameInfo.totalFlameMultiplier.toFixed(2)+"\nincrement: "+e.gameInfo.totalFlameIncrement.toFixed(2)+"\n amber:"+e.gameInfo.emberAmount.toFixed(2);n+="\n",Oe(e.gameInfo.firewood).forEach((function(t){n+=t+"{combustion factor: "+e.gameInfo.firewood[t].combustionFactor.toFixed(2)+" firewoodContribution: "+e.gameInfo.firewood[t].totalFirewoodContribution.toFixed(2)+"}\n"})),n+="\n",Oe(e.gameInfo.fireboosters).forEach((function(t){n+="increment: "+e.gameInfo.fireboosters[t].flameIncrement.toFixed(2)+" multiplier: "+e.gameInfo.fireboosters[t].flameMultiplier.toFixed(2)+" \n"})),t.innerHTML=n},e}(),Tt=function(){function e(e,n){this._container=t("div",e,"gameContainer",""),this.userSubject=new U(n),this.fireplaceView=new Ft(this._container,this.userSubject),this.inventoryView=new Ct(this._container,this.userSubject),this.storeView=new ft(this._container,this.userSubject)}return e.prototype.renderContent=function(){this.fireplaceView.renderContent(),this.inventoryView.renderContent(),this.storeView.renderContent()},e.prototype.dispose=function(){this.fireplaceView.dispose(),this.inventoryView.dispose(),this.storeView.dispose()},e.anyToPageParameter=function(e){if("id"in(t=e)&&"username"in t&&"password"in t&&"gameInfo"in t&&"inventory"in t&&"balance"in t)return e;var t;throw new Error("Invalid GamePage parameter")},e}(),Lt=function(){function n(e){this.mainContainer=e}return n.prototype.renderContent=function(){this._container=t("div",this.mainContainer,"homeContainer",""),t("h1",this._container,"gameTitle","Keep it Lit"),i(this._container,"homeImage",Te+"thumbMark.jpg",650,420),t("h3",this._container,"gameDescription","This is Mark. He is a web developer.<br> Keep him warm so he may continue creating web apps and eventualy open his own startup.<br> If you do this, he will keep giving you money for fire mantainance material, and the rest is yours to spend :)"),r(this._container,"playButton","PLAY",(function(){kt.Navigator.goTo(e.Login)}))},n}(),Ot=function(){function n(e){this._container=t("form",e,"loginForm","")}return n.prototype.renderContent=function(){t("h2",this._container,"loginHeadline","ENTER YOUR CREDENTIALS:");var n=o("text",this._container,"loginInput",!0,"Username"),i=o("password",this._container,"loginInput",!0,"Password");r(this._container,"loginSubmitBtn","Login",null),this._container.onsubmit=function(){return st(n.value,i.value).subscribe({next:function(t){return kt.Navigator.goTo(e.Game,t)},error:function(e){e.message===Ye.userNotFound.toString()&&alert("Wrong credentials")}}),!1},t("a",this._container,"dontHaveAcc","I don't have an acount").onclick=function(){return kt.Navigator.goTo(e.Register)}},n}();function Pt(e){return void 0===e&&(e=1/0),le(D,e)}var At=function(){function n(e){this._container=t("form",e,"registerForm","")}return n.prototype.renderContent=function(){var n=this;t("div",this._container,"","<i class='fas fa-arrow-alt-circle-left backArrow'></i>").onclick=function(){return kt.Navigator.goTo(e.Login)},t("h2",this._container,"registerHeadline","ENTER YOUR CREDENTIALS:");var i,u=o("text",this._container,"registerInput",!0,"Username"),a=t("label",this._container,"registerError errorHidden","Username already taken!");be(u,"input").pipe((800,void 0===i&&(i=vt),J((function(e,t){var n=null,r=null,o=null,u=function(){if(n){n.unsubscribe(),n=null;var e=r;r=null,t.next(e)}};function a(){var e=o+800,t=i.now();t<e?n=this.schedule(void 0,e-t):u()}e.subscribe(new K(t,(function(e){r=e,o=i.now(),n||(n=i.schedule(a,800))}),(function(){u(),t.complete()}),void 0,(function(){r=n=null})))}))),Q((function(e){return e.target.value})),$e((function(e){return function(e){return ae(fetch(Ue+"?username="+e).then((function(e){return e.json()}))).pipe(Q((function(e){return null!=e[0]})))}(e)}))).subscribe((function(e){return e?n.showErrorMessage(a):n.hideErrorMessage(a)}));var s=o("password",this._container,"registerInput",!0,"Password"),c=o("password",this._container,"registerInput",!0,"Password"),f=t("label",this._container,"passwordError errorHidden","Passwords don't match");(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=xe(e),r=Ee(e,1/0),o=e;return o.length?1===o.length?se(o[0]):Pt(r)(de(o,n)):ze})(be(c,"input"),be(s,"input")).subscribe((function(){c.value===s.value?n.hideErrorMessage(f):n.showErrorMessage(f)})),r(this._container,"registerSubmitBtn","Register",null),this._container.onsubmit=function(){var t,n;return a.classList.contains("errorVisible")||f.classList.contains("errorVisible")||(t=u.value,n=s.value,ae(fetch(Ue,{method:"POST",body:JSON.stringify(ut(t,n)),headers:{"Content-Type":"application/json"}}))).subscribe((function(t){t.ok&&kt.Navigator.goTo(e.Login)})),!1}},n.prototype.showErrorMessage=function(e){e.classList.replace("errorHidden","errorVisible")},n.prototype.hideErrorMessage=function(e){e.classList.replace("errorVisible","errorHidden")},n}(),kt=function(){function t(){this._mainContainer=document.getElementById("main")}return Object.defineProperty(t,"Navigator",{get:function(){var e;return null!==(e=this._navigator)&&void 0!==e?e:this._navigator=new t},enumerable:!1,configurable:!0}),t.prototype.goTo=function(t,n){switch(void 0===n&&(n=null),this.clearMainContainer(),this.disposeSubscriptions(),t){case e.Home:new Lt(this._mainContainer).renderContent();break;case e.Game:var r=new Tt(this._mainContainer,Tt.anyToPageParameter(n));this.pageToDispose=r,r.renderContent();break;case e.Login:new Ot(this._mainContainer).renderContent();break;case e.Register:new At(this._mainContainer).renderContent()}},t.prototype.clearMainContainer=function(){this._mainContainer.innerHTML=""},t.prototype.disposeSubscriptions=function(){this.pageToDispose&&this.pageToDispose.dispose()},t}();kt.Navigator.goTo(e.Home)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,